= Contents

[#50561092_pgfId-999777]##Specification: JSR-000052 A Standard Tag
Library for JavaServer Pages(tm) ("Specification")

[#50561092_pgfId-999780]##Version: 1.2

[#50561092_pgfId-999783]##Status: Maintenance Release

[#50561092_pgfId-999786]##Release: 8 May 2006

[#50561092_pgfId-999787]##Â 

[#50561092_pgfId-999789]##Copyright 2006 SUN MICROSYSTEMS, INC.

[#50561092_pgfId-999791]##4150 Network Circle, Santa Clara, California
95054, U.S.A

[#50561092_pgfId-999793]##All rights reserved.

======= [#50561093_pgfId-108319]##

image:jstl-1.gif[image]

Contents

image:jstl-2.gif[image]

======= [#50561093_pgfId-1029042]##link:jstl.htm#50561094_pgfId-2090[Preface xiv]

======= [#50561093_pgfId-1029044]##link:jstl.htm#50561095_pgfId-999291[Introduction 1]

{empty}[#50561093_pgfId-1029046]##link:jstl.htm#50561095_pgfId-999921[1.1
Goals 1]

{empty}[#50561093_pgfId-1029048]##link:jstl.htm#50561095_pgfId-1000553[1.2
Multiple Tag Libraries 2]

{empty}[#50561093_pgfId-1029050]##link:jstl.htm#50561095_pgfId-1001283[1.3
Container Requirement 2]

======= [#50561093_pgfId-1029052]##link:jstl.htm#50561096_pgfId-999291[Conventions 3]

{empty}[#50561093_pgfId-1029054]##link:jstl.htm#50561096_pgfId-999921[2.1
How Actions are Documented 3]

{empty}[#50561093_pgfId-1029056]##link:jstl.htm#50561096_pgfId-1000697[2.1.1
Attributes 4]

{empty}[#50561093_pgfId-1029058]##link:jstl.htm#50561096_pgfId-1001446[2.1.2
Syntax Notation 5]

{empty}[#50561093_pgfId-1029060]##link:jstl.htm#50561096_pgfId-1000202[2.2
Scoped Variables 5]

{empty}[#50561093_pgfId-1029062]##link:jstl.htm#50561096_pgfId-1000204[2.2.1
var and scope 6]

{empty}[#50561093_pgfId-1029064]##link:jstl.htm#50561096_pgfId-1000553[2.2.2
Visibility 6]

{empty}[#50561093_pgfId-1029066]##link:jstl.htm#50561096_pgfId-1001897[2.3
Static vs Dynamic Attribute Values 7]

{empty}[#50561093_pgfId-1029068]##link:jstl.htm#50561096_pgfId-1000680[2.4
White Spaces 7]

{empty}[#50561093_pgfId-1029070]##link:jstl.htm#50561096_pgfId-999865[2.5
Body Content 7]

{empty}[#50561093_pgfId-1029072]##link:jstl.htm#50561096_pgfId-1001007[2.6
Naming 8]

{empty}[#50561093_pgfId-1029074]##link:jstl.htm#50561096_pgfId-1001421[2.7
Errors and Exceptions 8]

{empty}[#50561093_pgfId-1029076]##link:jstl.htm#50561096_pgfId-1001603[2.8
Configuration Data 10]

{empty}[#50561093_pgfId-1029078]##link:jstl.htm#50561096_pgfId-1006147[2.9
Default Values 11]

======= [#50561093_pgfId-1029080]##link:jstl.htm#50561097_pgfId-1002514[Expression Language Overview 13]

{empty}[#50561093_pgfId-1029082]##link:jstl.htm#50561097_pgfId-1002635[3.1
Expressions and Attribute Values 13]

{empty}[#50561093_pgfId-1029084]##link:jstl.htm#50561097_pgfId-1002848[3.2
Accessing Application Data 14]

{empty}[#50561093_pgfId-1029086]##link:jstl.htm#50561097_pgfId-1003663[3.3
Nested Properties and Accessing Collections 15]

{empty}[#50561093_pgfId-1029088]##link:jstl.htm#50561097_pgfId-1002858[3.4
Operators 16]

{empty}[#50561093_pgfId-1029090]##link:jstl.htm#50561097_pgfId-1003221[3.5
Automatic Type Conversion 16]

{empty}[#50561093_pgfId-1029092]##link:jstl.htm#50561097_pgfId-1003833[3.6
Default Values 17]

======= [#50561093_pgfId-1029094]##link:jstl.htm#50561098_pgfId-1001185[General-Purpose Actions 19]

{empty}[#50561093_pgfId-1029096]##link:jstl.htm#50561098_pgfId-999293[4.1
Overview 19]

{empty}[#50561093_pgfId-1029098]##link:jstl.htm#50561098_pgfId-1003301[4.2
<c:out> 22]

{empty}[#50561093_pgfId-1029100]##link:jstl.htm#50561098_pgfId-1000972[4.3
<c:set> 24]

{empty}[#50561093_pgfId-1029102]##link:jstl.htm#50561098_pgfId-1002794[4.4
<c:remove> 27]

{empty}[#50561093_pgfId-1029104]##link:jstl.htm#50561098_pgfId-1003308[4.5
<c:catch> 28]

======= [#50561093_pgfId-1029106]##link:jstl.htm#50561099_pgfId-1001083[Conditional Actions 29]

{empty}[#50561093_pgfId-1029108]##link:jstl.htm#50561099_pgfId-999293[5.1
Overview 29]

{empty}[#50561093_pgfId-1029110]##link:jstl.htm#50561099_pgfId-1003483[5.2
Custom Logic Actions 31]

{empty}[#50561093_pgfId-1029112]##link:jstl.htm#50561099_pgfId-998144[5.3
<c:if> 32]

{empty}[#50561093_pgfId-1029114]##link:jstl.htm#50561099_pgfId-1000486[5.4
<c:choose> 33]

{empty}[#50561093_pgfId-1029116]##link:jstl.htm#50561099_pgfId-1000438[5.5
<c:when> 34]

{empty}[#50561093_pgfId-1029118]##link:jstl.htm#50561099_pgfId-1000243[5.6
<c:otherwise> 35]

======= [#50561093_pgfId-1029120]##link:jstl.htm#50561100_pgfId-1001083[Iterator Actions 37]

{empty}[#50561093_pgfId-1029122]##link:jstl.htm#50561100_pgfId-999293[6.1
Overview 37]

{empty}[#50561093_pgfId-1029124]##link:jstl.htm#50561100_pgfId-1003766[6.1.1
Collections of Objects to Iterate Over 38]

{empty}[#50561093_pgfId-1029126]##link:jstl.htm#50561100_pgfId-1001586[6.1.2
Map 39]

{empty}[#50561093_pgfId-1029128]##link:jstl.htm#50561100_pgfId-1001181[6.1.3
Iteration Status 39]

{empty}[#50561093_pgfId-1029130]##link:jstl.htm#50561100_pgfId-1001196[6.1.4
Range Attributes 40]

{empty}[#50561093_pgfId-1029132]##link:jstl.htm#50561100_pgfId-1003370[6.1.5
Tag Collaboration 40]

{empty}[#50561093_pgfId-1029134]##link:jstl.htm#50561100_pgfId-1008984[6.1.6
Deferred Values 41]

{empty}[#50561093_pgfId-1029136]##link:jstl.htm#50561100_pgfId-998144[6.2
<c:forEach> 42]

{empty}[#50561093_pgfId-1029138]##link:jstl.htm#50561100_pgfId-1009406[6.3
<c:forTokens> 46]

======= [#50561093_pgfId-1029140]##link:jstl.htm#50561101_pgfId-1008302[URL Related Actions 49]

{empty}[#50561093_pgfId-1029142]##link:jstl.htm#50561101_pgfId-1010193[7.1
Hypertext Links 49]

{empty}[#50561093_pgfId-1029144]##link:jstl.htm#50561101_pgfId-1010387[7.2
Importing Resources 50]

{empty}[#50561093_pgfId-1029146]##link:jstl.htm#50561101_pgfId-1010576[7.2.1
URL 51]

{empty}[#50561093_pgfId-1029148]##link:jstl.htm#50561101_pgfId-1010583[7.2.2
Exporting an object: String or Reader 51]

{empty}[#50561093_pgfId-1029150]##link:jstl.htm#50561101_pgfId-1010604[7.2.3
URL Encoding 52]

{empty}[#50561093_pgfId-1029152]##link:jstl.htm#50561101_pgfId-1010622[7.2.4
Networking Properties 52]

{empty}[#50561093_pgfId-1029154]##link:jstl.htm#50561101_pgfId-1010541[7.3
HTTP Redirect 53]

{empty}[#50561093_pgfId-1029156]##link:jstl.htm#50561101_pgfId-998144[7.4
<c:import> 54]

{empty}[#50561093_pgfId-1029158]##link:jstl.htm#50561101_pgfId-1003447[7.5
<c:url> 59]

{empty}[#50561093_pgfId-1029160]##link:jstl.htm#50561101_pgfId-1010744[7.6
<c:redirect> 61]

{empty}[#50561093_pgfId-1029162]##link:jstl.htm#50561101_pgfId-1012238[7.7
<c:param> 63]

======= [#50561093_pgfId-1029164]##link:jstl.htm#50561102_pgfId-1017219[Internationalization (i18n) Actions 65]

{empty}[#50561093_pgfId-1029166]##link:jstl.htm#50561102_pgfId-999293[8.1
Overview 66]

{empty}[#50561093_pgfId-1029168]##link:jstl.htm#50561102_pgfId-1010788[8.1.1
<fmt:message> 67]

{empty}[#50561093_pgfId-1029170]##link:jstl.htm#50561102_pgfId-1012801[8.2
I18n Localization Context 67]

{empty}[#50561093_pgfId-1029172]##link:jstl.htm#50561102_pgfId-1013382[8.2.1
Preferred Locales 68]

{empty}[#50561093_pgfId-1029174]##link:jstl.htm#50561102_pgfId-1013192[8.3
Determinining the Resource Bundle for an i18n Localization Context 70]

{empty}[#50561093_pgfId-1029176]##link:jstl.htm#50561102_pgfId-1015866[8.3.1
Resource Bundle Lookup 70]

{empty}[#50561093_pgfId-1029178]##link:jstl.htm#50561102_pgfId-1016122[8.3.2
Resource Bundle Determination Algorithm 71]

{empty}[#50561093_pgfId-1029180]##link:jstl.htm#50561102_pgfId-1010923[8.3.3
Examples 72]

{empty}[#50561093_pgfId-1029182]##link:jstl.htm#50561102_pgfId-1014177[8.4
Response Encoding 74]

{empty}[#50561093_pgfId-1029184]##link:jstl.htm#50561102_pgfId-1010952[8.5
<fmt:setLocale> 76]

{empty}[#50561093_pgfId-1029186]##link:jstl.htm#50561102_pgfId-1011010[8.6
<fmt:bundle> 78]

{empty}[#50561093_pgfId-1029188]##link:jstl.htm#50561102_pgfId-1017859[8.7
<fmt:setBundle> 80]

{empty}[#50561093_pgfId-1029190]##link:jstl.htm#50561102_pgfId-1011083[8.8
<fmt:message> 82]

{empty}[#50561093_pgfId-1029192]##link:jstl.htm#50561102_pgfId-1011177[8.9
<fmt:param> 85]

{empty}[#50561093_pgfId-1029194]##link:jstl.htm#50561102_pgfId-1016229[8.10
<fmt:requestEncoding> 87]

{empty}[#50561093_pgfId-1029196]##link:jstl.htm#50561102_pgfId-1011322[8.11
Configuration Settings 89]

{empty}[#50561093_pgfId-1029198]##link:jstl.htm#50561102_pgfId-1011325[8.11.1
Locale 89]

{empty}[#50561093_pgfId-1029200]##link:jstl.htm#50561102_pgfId-1018734[8.11.2
Fallback Locale 89]

{empty}[#50561093_pgfId-1029202]##link:jstl.htm#50561102_pgfId-1011345[8.11.3
I18n Localization Context 90]

======= [#50561093_pgfId-1029204]##link:jstl.htm#50561103_pgfId-1001083[Formatting Actions 91]

{empty}[#50561093_pgfId-1029206]##link:jstl.htm#50561103_pgfId-1013404[9.1
Overview 91]

{empty}[#50561093_pgfId-1029208]##link:jstl.htm#50561103_pgfId-1012540[9.1.1
Formatting Numbers, Currencies, and Percentages 91]

{empty}[#50561093_pgfId-1029210]##link:jstl.htm#50561103_pgfId-1012566[9.1.2
Formatting Dates and Times 92]

{empty}[#50561093_pgfId-1029212]##link:jstl.htm#50561103_pgfId-1013524[9.2
Formatting Locale 93]

{empty}[#50561093_pgfId-1029214]##link:jstl.htm#50561103_pgfId-1014251[9.3
Establishing a Formatting Locale 95]

{empty}[#50561093_pgfId-1029216]##link:jstl.htm#50561103_pgfId-1014314[9.3.1
Locales Available for Formatting Actions 95]

{empty}[#50561093_pgfId-1029218]##link:jstl.htm#50561103_pgfId-1013875[9.3.2
Locale Lookup 95]

{empty}[#50561093_pgfId-1029220]##link:jstl.htm#50561103_pgfId-1013881[9.3.3
Formatting Locale Lookup Algorithm 95]

{empty}[#50561093_pgfId-1029222]##link:jstl.htm#50561103_pgfId-1012615[9.4
Time Zone 96]

{empty}[#50561093_pgfId-1029224]##link:jstl.htm#50561103_pgfId-1014747[9.5
<fmt:timeZone> 97]

{empty}[#50561093_pgfId-1029226]##link:jstl.htm#50561103_pgfId-1021569[9.6
<fmt:setTimeZone> 98]

{empty}[#50561093_pgfId-1029228]##link:jstl.htm#50561103_pgfId-1014890[9.7
<fmt:formatNumber> 100]

{empty}[#50561093_pgfId-1029230]##link:jstl.htm#50561103_pgfId-1015079[9.8
<fmt:parseNumber> 104]

{empty}[#50561093_pgfId-1029232]##link:jstl.htm#50561103_pgfId-1015190[9.9
<fmt:formatDate> 107]

{empty}[#50561093_pgfId-1029234]##link:jstl.htm#50561103_pgfId-1015320[9.10
<fmt:parseDate> 110]

{empty}[#50561093_pgfId-1029236]##link:jstl.htm#50561103_pgfId-1021501[9.11
Configuration Settings 113]

{empty}[#50561093_pgfId-1029238]##link:jstl.htm#50561103_pgfId-1021464[9.11.1
TimeZone 113]

======= [#50561093_pgfId-1029240]##link:jstl.htm#50561104_pgfId-1004128[SQL Actions 115]

{empty}[#50561093_pgfId-1029242]##link:jstl.htm#50561104_pgfId-999293[10.1
Overview 115]

{empty}[#50561093_pgfId-1029244]##link:jstl.htm#50561104_pgfId-1010081[10.1.1
Data Source 115]

{empty}[#50561093_pgfId-1029246]##link:jstl.htm#50561104_pgfId-1016854[10.1.2
Querying a Database 116]

{empty}[#50561093_pgfId-1029248]##link:jstl.htm#50561104_pgfId-1005721[10.1.3
Updating a Database 118]

{empty}[#50561093_pgfId-1029250]##link:jstl.htm#50561104_pgfId-1006117[10.1.4
SQL Statement Parameters 118]

{empty}[#50561093_pgfId-1029252]##link:jstl.htm#50561104_pgfId-1016664[10.2
Database Access 120]

{empty}[#50561093_pgfId-1029254]##link:jstl.htm#50561104_pgfId-1016411[10.3
<sql:query> 121]

{empty}[#50561093_pgfId-1029256]##link:jstl.htm#50561104_pgfId-1016623[10.4
<sql:update> 124]

{empty}[#50561093_pgfId-1029258]##link:jstl.htm#50561104_pgfId-1006686[10.5
<sql:transaction> 127]

{empty}[#50561093_pgfId-1029260]##link:jstl.htm#50561104_pgfId-1002241[10.6
<sql:setDataSource> 130]

{empty}[#50561093_pgfId-1029262]##link:jstl.htm#50561104_pgfId-1002318[10.7
<sql:param> 132]

{empty}[#50561093_pgfId-1029264]##link:jstl.htm#50561104_pgfId-1018425[10.8
<sql:dateParam> 134]

{empty}[#50561093_pgfId-1029266]##link:jstl.htm#50561104_pgfId-1017232[10.9
Configuration Settings 136]

{empty}[#50561093_pgfId-1029268]##link:jstl.htm#50561104_pgfId-1019194[10.9.1
DataSource 136]

{empty}[#50561093_pgfId-1029270]##link:jstl.htm#50561104_pgfId-1017811[10.9.2
MaxRows 136]

======= [#50561093_pgfId-1029272]##link:jstl.htm#50561105_pgfId-1001083[XML Core Actions 137]

{empty}[#50561093_pgfId-1029274]##link:jstl.htm#50561105_pgfId-999293[11.1
Overview 137]

{empty}[#50561093_pgfId-1029276]##link:jstl.htm#50561105_pgfId-1008864[11.1.1
XPath Context 137]

{empty}[#50561093_pgfId-1029278]##link:jstl.htm#50561105_pgfId-1008981[11.1.2
XPath Variable Bindings 138]

{empty}[#50561093_pgfId-1029280]##link:jstl.htm#50561105_pgfId-1012122[11.1.3
Java to XPath Type Mappings 139]

{empty}[#50561093_pgfId-1029282]##link:jstl.htm#50561105_pgfId-1009625[11.1.4
XPath to Java Type Mappings 140]

[#50561093_pgfId-1029284]##link:jstl.htm#50561105_pgfId-1009720[11.1.5
The] _select_ Attribute 140

{empty}[#50561093_pgfId-1029286]##link:jstl.htm#50561105_pgfId-1013993[11.1.6
Default Context Node 140]

{empty}[#50561093_pgfId-1029288]##link:jstl.htm#50561105_pgfId-1013069[11.1.7
Resources Access 141]

{empty}[#50561093_pgfId-1029290]##link:jstl.htm#50561105_pgfId-1013095[11.1.8
Core Actions 141]

{empty}[#50561093_pgfId-1029292]##link:jstl.htm#50561105_pgfId-1007732[11.2
<x:parse> 143]

{empty}[#50561093_pgfId-1029294]##link:jstl.htm#50561105_pgfId-1008055[11.3
<x:out> 146]

{empty}[#50561093_pgfId-1029296]##link:jstl.htm#50561105_pgfId-1009375[11.4
<x:set> 148]

======= [#50561093_pgfId-1029298]##link:jstl.htm#50561106_pgfId-1001083[XML Flow Control Actions 149]

{empty}[#50561093_pgfId-1029300]##link:jstl.htm#50561106_pgfId-999293[12.1
Overview 149]

{empty}[#50561093_pgfId-1029302]##link:jstl.htm#50561106_pgfId-1009961[12.2
<x:if> 151]

{empty}[#50561093_pgfId-1029304]##link:jstl.htm#50561106_pgfId-1010016[12.3
<x:choose> 153]

{empty}[#50561093_pgfId-1029306]##link:jstl.htm#50561106_pgfId-1010036[12.4
<x:when> 154]

{empty}[#50561093_pgfId-1029308]##link:jstl.htm#50561106_pgfId-1010071[12.5
<x:otherwise> 155]

{empty}[#50561093_pgfId-1029310]##link:jstl.htm#50561106_pgfId-1010784[12.6
<x:forEach> 156]

======= [#50561093_pgfId-1029312]##link:jstl.htm#50561107_pgfId-1001083[XML Transform Actions 159]

{empty}[#50561093_pgfId-1029314]##link:jstl.htm#50561107_pgfId-1010049[13.1
Overview 159]

{empty}[#50561093_pgfId-1029316]##link:jstl.htm#50561107_pgfId-1007732[13.2
<x:transform> 161]

{empty}[#50561093_pgfId-1029318]##link:jstl.htm#50561107_pgfId-1009207[13.3
<x:param> 164]

======= [#50561093_pgfId-1029320]##link:jstl.htm#50561108_pgfId-1015868[Tag Library Validators 165]

{empty}[#50561093_pgfId-1029322]##link:jstl.htm#50561108_pgfId-1015872[14.1
Overview 165]

======= [#50561093_pgfId-1029324]##link:jstl.htm#50561109_pgfId-1004642[Functions 169]

{empty}[#50561093_pgfId-1029326]##link:jstl.htm#50561109_pgfId-1002635[15.1
Overview 169]

[#50561093_pgfId-1029328]##link:jstl.htm#50561109_pgfId-1004706[15.1.1
The] _length_ Function 169

{empty}[#50561093_pgfId-1029330]##link:jstl.htm#50561109_pgfId-1004754[15.1.2
String Manipulation Functions 170]

{empty}[#50561093_pgfId-1029332]##link:jstl.htm#50561109_pgfId-1008791[15.2
fn:contains 173]

{empty}[#50561093_pgfId-1029334]##link:jstl.htm#50561109_pgfId-1008862[15.3
fn:containsIgnoreCase 174]

{empty}[#50561093_pgfId-1029336]##link:jstl.htm#50561109_pgfId-1009332[15.4
fn:endsWith 175]

{empty}[#50561093_pgfId-1029338]##link:jstl.htm#50561109_pgfId-1006738[15.5
fn:escapeXml 176]

{empty}[#50561093_pgfId-1029340]##link:jstl.htm#50561109_pgfId-1005909[15.6
fn:indexOf 177]

{empty}[#50561093_pgfId-1029342]##link:jstl.htm#50561109_pgfId-1007919[15.7
fn:join 178]

{empty}[#50561093_pgfId-1029344]##link:jstl.htm#50561109_pgfId-1008415[15.8
fn:length 179]

{empty}[#50561093_pgfId-1029346]##link:jstl.htm#50561109_pgfId-1006747[15.9
fn:replace 180]

{empty}[#50561093_pgfId-1029348]##link:jstl.htm#50561109_pgfId-1007788[15.10
fn:split 181]

{empty}[#50561093_pgfId-1029350]##link:jstl.htm#50561109_pgfId-1008640[15.11
fn:startsWith 182]

{empty}[#50561093_pgfId-1029352]##link:jstl.htm#50561109_pgfId-1007222[15.12
fn:substring 183]

{empty}[#50561093_pgfId-1029354]##link:jstl.htm#50561109_pgfId-1008551[15.13
fn:substringAfter 184]

{empty}[#50561093_pgfId-1029356]##link:jstl.htm#50561109_pgfId-1008450[15.14
fn:substringBefore 185]

{empty}[#50561093_pgfId-1029358]##link:jstl.htm#50561109_pgfId-1005247[15.15
fn:toLowerCase 186]

{empty}[#50561093_pgfId-1029360]##link:jstl.htm#50561109_pgfId-1005347[15.16
fn:toUpperCase 187]

{empty}[#50561093_pgfId-1029362]##link:jstl.htm#50561109_pgfId-1005838[15.17
fn:trim 188]

======= [#50561093_pgfId-1029364]##link:jstl.htm#50561073_pgfId-999291[Java APIs 189]

======= [#50561093_pgfId-1029366]##link:jstl.htm#50561071_pgfId-20534[jakarta.servlet.jsp.jstl.core 191]

{empty}[#50561093_pgfId-1029368]##link:jstl.htm#50561071_pgfId-20549[ConditionalTagSupport
192]

{empty}[#50561093_pgfId-1029370]##link:jstl.htm#50561071_pgfId-20699[Config
195]

{empty}[#50561093_pgfId-1029372]##link:jstl.htm#50561071_pgfId-21113[IndexedValueExpression
201]

{empty}[#50561093_pgfId-1029374]##link:jstl.htm#50561071_pgfId-21287[IteratedExpression
204]

{empty}[#50561093_pgfId-1029376]##link:jstl.htm#50561071_pgfId-21369[IteratedValueExpression
206]

{empty}[#50561093_pgfId-1029378]##link:jstl.htm#50561071_pgfId-21555[LoopTag
209]

{empty}[#50561093_pgfId-1029380]##link:jstl.htm#50561071_pgfId-21635[LoopTagStatus
211]

{empty}[#50561093_pgfId-1029382]##link:jstl.htm#50561071_pgfId-21790[LoopTagSupport
213]

{empty}[#50561093_pgfId-1029384]##link:jstl.htm#50561071_pgfId-22276[StringTokenValueExpression
220]

======= [#50561093_pgfId-1029386]##link:jstl.htm#50561050_pgfId-628448[jakarta.servlet.jsp.jstl.fmt 223]

{empty}[#50561093_pgfId-1029388]##link:jstl.htm#50561050_pgfId-628463[LocaleSupport
224]

{empty}[#50561093_pgfId-1029390]##link:jstl.htm#50561050_pgfId-628635[LocalizationContext
227]

======= [#50561093_pgfId-1029392]##link:jstl.htm#50561052_pgfId-250309[jakarta.servlet.jsp.jstl.sql 229]

{empty}[#50561093_pgfId-1029394]##link:jstl.htm#50561052_pgfId-250324[Result
230]

{empty}[#50561093_pgfId-1029396]##link:jstl.htm#50561052_pgfId-250441[ResultSupport
232]

{empty}[#50561093_pgfId-1029398]##link:jstl.htm#50561052_pgfId-250541[SQLExecutionTag
234]

======= [#50561093_pgfId-1029400]##link:jstl.htm#50561054_pgfId-927144[jakarta.servlet.jsp.jstl.tlv 235]

{empty}[#50561093_pgfId-1029402]##link:jstl.htm#50561054_pgfId-927159[PermittedTaglibsTLV
236]

{empty}[#50561093_pgfId-1029404]##link:jstl.htm#50561054_pgfId-927233[ScriptFreeTLV
238]

{empty}[#50561093_pgfId-1029406]##link:jstl.htm#50561110_pgfId-10127[Compatibility
& Migration 241]

{empty}[#50561093_pgfId-1029408]##link:jstl.htm#50561111_pgfId-10196[Changes
245]

======= [#50561094_pgfId-2090]##

image:jstl-3.gif[image]

Preface

image:jstl-4.gif[image]

[#50561094_pgfId-2096]##This is the JavaServer Pagesâ¢ Standard Tag
Library 1.2 (JSTL 1.2) specification, developed by the JSR-52 expert
group under the Java Community Process. +
See http://www.jcp.org.

======= [#50561094_pgfId-374]##

image:jstl-5.gif[image]

Related Documentation

[#50561094_pgfId-2223]##Implementors of JSTL and authors of JSP pages
may find the following documents worth consulting for additional
information:.

[width="100%",cols="50%,50%",]
|===
|[#50561094_pgfId-1957]##JavaServer Pages (JSP)
|[#50561094_pgfId-1959]##http://java.sun.com/jsp

|[#50561094_pgfId-1961]##Java Servlet Technology
|[#50561094_pgfId-1963]##http://java.sun.com/servlet

|[#50561094_pgfId-1965]##Java 2 Platform, Standard Edition
|[#50561094_pgfId-1967]##http://java.sun.com/j2se

|[#50561094_pgfId-2275]##Java 2 Platform, Enterprise Edition
|[#50561094_pgfId-2283]##http://java.sun.com/j2ee

a|
======= [#50561094_pgfId-2295]##JavaBeans

|[#50561094_pgfId-2269]##http://java.sun.com/beans

a|
======= [#50561094_pgfId-2418]##JDBC

|[#50561094_pgfId-2428]##http://java.sun.com/jdbc

|[#50561094_pgfId-2905]##Java Technology and XML
|[#50561094_pgfId-2907]##http://java.sun.com/xml

|[#50561094_pgfId-2897]##XPath specification
|[#50561094_pgfId-2899]##http://www.w3.org/TR/xpath

|[#50561094_pgfId-2945]##XML home page at W3C
|[#50561094_pgfId-2947]##http://www.w3.org/XML

|[#50561094_pgfId-2259]##HTML home page at W3C
|[#50561094_pgfId-2261]##http://www.w3.org/MarkUp

|[#50561094_pgfId-2321]##XML.org home page
|[#50561094_pgfId-2323]##http://www.xml.org
|===

======= [#50561094_pgfId-3430]##

image:jstl-5.gif[image]

Typographical Conventions

[#50561094_pgfId-3559]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561094_pgfId-3510]##Font Style |[#50561094_pgfId-3512]##Uses
|[#50561094_pgfId-3514]##Italic |[#50561094_pgfId-3516]##Emphasis,
definition of term.

|[#50561094_pgfId-3518]## _Monospace_ |[#50561094_pgfId-3520]##Syntax,
code examples, attribute names, Java language types, API, enumerated
attribute values.
|===

======= [#50561094_pgfId-2843]##

image:jstl-5.gif[image]

Acknowledgments

[#50561094_pgfId-3097]##The JavaServer Pagesâ¢ Standard Tag Library
(JSTL) specification is the result of collaborative work involving many
individuals, all driven by a common goal of designing the best libraries
possible for the JSP page author community.

[#50561094_pgfId-3185]##We would like to thank all members of the JSR-52
expert group: Nathan Abramson, Shawn Bayern, Hans Bergsten, Paul
Bonfanti, Vince Bonfanti, David Brown, Larry Cable, Tim Dawson, Morgan
Delagrange, Bob Foster, David Geary, Scott Hasse, Hal Hildebrand, Jason
Hunter, Serge Knystautas, Mark Kolb, Wellington Lacerda, Jan Luehe, Geir
Magnusson Jr., Dan Malks, Craig McClanahan, Richard Morgan, Glenn
Nielsen, Rickard Oberg, Joseph B. Ottinger, Eduardo Pelegri-Llopart, Sam
Pullara, Tom Reilly, Brian Robinson, Russ Ryan, Pasi Salminen, Steven
Sargent, Allan Scott, Virgil Sealy, Magnus Stenman, Gael Stevens, James
Strachan, Christine Tomlinson, Norbert von Truchsess, Keyton Weissinger,
Clement Wong, Alex Yiu.

[#50561094_pgfId-3210]##This specification was first initiated by
Eduardo Pelegri-Llopart. Eduardo's leadership in making the Java
platform the best technology available for the web layer has been key in
shaping the vision behind the standard tag library.

[#50561094_pgfId-3221]##Shawn Bayern and Hans Bergsten deserve special
credit for being actively involved in all design issues of this
specification. Their vast expertise and commitment to excellence has had
a profound impact in every single aspect of this specification. Mille
mercis Shawn et Hans! Don't know how we would have done it without you
two.

[#50561094_pgfId-3249]##Many thanks to Jan Luehe for taking ownership of
the internationalization and formatting chapters of this specification
on short notice, and doing an incredible job.

[#50561094_pgfId-3129]##Special mention to Nathan Abramson for being a
driving force behind the expression language introduced in JSTL, to
James Strachan for leading the group in our understanding of XML for
page authors, and to Craig McClanahan for his help on servlet and J2EE
platform related issues.

[#50561094_pgfId-3132]##This specification has drawn a lot of its design
ideas from pioneers in the field of tag libraries. We are grateful to
the Jakarta project at Apache, as well as other efforts in the industry,
where projects led by Craig McClanahan (Struts), James Strachan (XTags),
Morgan Delagrange (DBTags), Tim Dawson (I18N), Glenn Nielsen (many
utility taglibs), Scott Hasse (JPath), Dmitri Plotnikov (JXPath), Pasi
Salminen (O&D Struts), have greatly influenced the design of the JSTL
libraries.

[#50561094_pgfId-3140]##The RI team composed of Shawn Bayern (lead),
Nathan Abramson, Justyna Horwat, and Jan Luehe has done a wonderful job
at turning code faster than the specification could be written.

[#50561094_pgfId-3144]##Quality has been in the capable hands of Ryan
Lubke, lead of the TCK team that also includes Lance Andersen. David
Gearyâs help in doing thorough reviews of the specification was also
greatly appreciated.

[#50561094_pgfId-3286]##We are also grateful to the product team at Sun
Microsystems who helped us sail efficiently through this specification:
Jim Driscoll, Karen Schaffer, George Grigoryev, Stephanie Bodoff,
Vanitha Venkatraman, Prasad Subramanian, and Xiaotan He.

[#50561094_pgfId-3152]##Finally, we'd like to thank the community at
large for their ever increasing interest in this technology. We sure
hope youâll enjoy the JSP Standard Tag Library.

======= [#50561094_pgfId-2845]##

image:jstl-5.gif[image]

Comments

[#50561094_pgfId-2025]##We are interested in improving this
specification and welcome your comments and suggestions. You can email
your comments to us at:

======= [#50561094_pgfId-470]## _jsr-52-comments@jcp.org_

======= [#50561095_pgfId-874]##Â 

======= [#50561095_pgfId-999291]##

image:jstl-6.gif[image]

Introduction

[#50561095_pgfId-1000803]##This is the JavaServer Pagesâ¢ Standard Tag
Library 1.2 (JSTL 1.2) specification, developed by the JSR-52 expert
group under the Java Community Process (http://www.jcp.org).

======= [#50561095_pgfId-999921]##

image:jstl-7.gif[image]

Goals

[#50561095_pgfId-999993]##The ultimate goal of JSTL is to help simplify
JavaServerâ¢ Pages (JSPâ¢) page authorsâ lives.

[#50561095_pgfId-1000718]##A page author is someone who is responsible
for the design of a web applicationâs presentation layer using JSP
pages. Many page authors are not fluent in any programming language.

[#50561095_pgfId-1000485]##One of the main difficulties a page author is
faced with is the need to use a scripting language (the default being
the Java programming language) to manipulate the dynamic data within a
JSP page. Unfortunately, page authors often see scripting languages as
complex and not very well adapted to their needs.

[#50561095_pgfId-1000514]##JSTL offers the following capabilities:

[#50561095_pgfId-1000725]##General-purpose actions

[#50561095_pgfId-1000738]##These actions complement the expression
language by allowing a page author to easily display expressions in the
expression language, set and remove the value of JSP scoped attributes,
as well as catch exceptions.

[#50561095_pgfId-1000736]##Control flow actions

[#50561095_pgfId-1000732]##Tag-based control flow structures
(conditionals, iterators), which are more natural to page authors.

[#50561095_pgfId-1000750]##Tag library validators (TLVs)

[#50561095_pgfId-1000757]##TLVs allow projects to only allow specific
tag libraries, as well as enforce JSP coding styles that are free of
scripting elements.

[#50561095_pgfId-1000552]##The other key aspect of JSTL is that it
provides standard actions and standard EL functions for functionality
most often needed by page authors. These cover the following topics:

[#50561095_pgfId-1000776]##Accessing URL-based resources

[#50561095_pgfId-1000781]##Internationalization (i18n) and text
formatting

[#50561095_pgfId-1000782]##Relational database access (SQL)

[#50561095_pgfId-1001357]##XML processing

[#50561095_pgfId-1002049]##String manipulation

======= [#50561095_pgfId-1000553]##

image:jstl-7.gif[image]

Multiple Tag Libraries

[#50561095_pgfId-1001712]##A tag library is a collection of actions that
encapsulates functionality to be used from within a JSP page. JSTL
includes a wide variety of actions that naturally fit into discrete
functional areas. This is why JSTL, although referred to as the standard
tag library (singular), is exposed via multiple tag libraries to clearly
identify the functional areas it covers, as well as to give each area
its own namespace. The tables below lists these functional areas along
with the URIs used to reference the libraries. The tables also show the
prefixes used in this specification (although page authors are free to
use any prefix they want).

[#50561095_pgfId-1001751]##JSTL Tag Libraries

[#50561095_pgfId-1001744]##Â 

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561095_pgfId-1001715]##Functional Area
|[#50561095_pgfId-1001717]##URI |[#50561095_pgfId-1001719]##Prefix
|[#50561095_pgfId-1001721]##core |[#50561095_pgfId-1001723]##
_http://java.sun.com/jsp/jstl/core_ |[#50561095_pgfId-1001725]## _c_

|[#50561095_pgfId-1001727]##XML processing |[#50561095_pgfId-1001729]##
_http://java.sun.com/jsp/jstl/xml_ |[#50561095_pgfId-1001731]## _x_

|[#50561095_pgfId-1001733]##I18N capable formatting
|[#50561095_pgfId-1001735]## _http://java.sun.com/jsp/jstl/fmt_
|[#50561095_pgfId-1001737]## _fmt_

|[#50561095_pgfId-1001739]##relational db access (SQL)
|[#50561095_pgfId-1001741]## _http://java.sun.com/jsp/jstl/sql_
|[#50561095_pgfId-1001743]## _sql_

|[#50561095_pgfId-1002036]##Functions |[#50561095_pgfId-1002038]##
_http://java.sun.com/jsp/jstl/functions_ |[#50561095_pgfId-1002040]##fn
|===

======= [#50561095_pgfId-1001283]##

image:jstl-7.gif[image]

Container Requirement

[#50561095_pgfId-1001287]##JSTL 1.2 requires a JSP 2.1 web container.
Please note that the expression language is part of the JSP
specification starting with JSP 2.0.

======= [#50561096_pgfId-874]##Â 

======= [#50561096_pgfId-999291]##

image:jstl-8.gif[image]

Conventions

[#50561096_pgfId-999314]##This chapter describes the conventions used in
this specification.

======= [#50561096_pgfId-999921]##

image:jstl-9.gif[image]

How Actions are Documented

[#50561096_pgfId-999923]##JSTL actions are grouped according to their
functionality. These functional groups of actions are documented in
their own chapter using the following structure:

[#50561096_pgfId-1000006]##Motivation

[#50561096_pgfId-1000110]##Describes the motivation for standardizing
the actions.

[#50561096_pgfId-1000139]##Overview

[#50561096_pgfId-1000143]##Provides an overview of the capabilities
provided by the actions. Sample code featuring these actions in their
most common use cases is also provided.

[#50561096_pgfId-1000085]##One section per action, with the following
structure:

[#50561096_pgfId-1000386]##Name

[#50561096_pgfId-1000390]##Tag library prefixes are used in this
specification for all references to JSTL actions (e.g.: <c:if> instead
of <if>).

[#50561096_pgfId-1000090]##Short Description

[#50561096_pgfId-1000096]##Syntax

[#50561096_pgfId-1000340]##The syntax notation is described in
link:jstl.htm#50561096_69027[See Syntax Notation].

[#50561096_pgfId-1000099]##Body Content

[#50561096_pgfId-1005566]##This section specifies which type of body
content is supported by the action. As defined by the JSP specification,
the body content type can be one of _empty_ , _JSP_ , or _tagdependent_
. The section also specifies if the body content is processed by the
action or is simply ignored by the action and just written to the
current _JspWriter_ . If the body content is processed, information is
given on whether or not the body content is trimmed before the action
begins processing it.

[#50561096_pgfId-1000286]##Attributes

[#50561096_pgfId-1000491]##Details in link:jstl.htm#50561096_68655[See
Attributes] below.

[#50561096_pgfId-1000725]##Constraints

[#50561096_pgfId-1000726]##List of additional constraints enforced by
the action.

[#50561096_pgfId-1002817]##Null & Error Handling

[#50561096_pgfId-1002818]##Details on how null and empty values are
processed, as well as on exceptions thrown by the action.

[#50561096_pgfId-1000727]##Description

[#50561096_pgfId-1000728]##This section provides more details on the
action.

[#50561096_pgfId-1000267]##Other sections

[#50561096_pgfId-1000482]##Other sections related to the group of
actions described in the chapter may exist. These include sections on
interfaces and classes exposed by these actions.

======= [#50561096_pgfId-1000697]##[#50561096_68655]##Attributes

[#50561096_pgfId-1000703]##For each attribute, the following information
is given: name, dynamic behavior, type, and description.

[#50561096_pgfId-1006286]##The _rtexprvalue_ element defined in a TLD is
covered in this specification with the column titled âDynamicâ that
captures the dynamic behavior of an attribute. The value can be either
true or false. A false value in the dynamic column means that only a
static string value can be specified for the attribute. A true value
means that a _request-time attribute value_ can be specified. As defined
in the JSP specification, a ârequest-time attribute valueâ can be either
a Java expression, an EL expression, or a value set by a
<jsp:attribute>.

======= [#50561096_pgfId-1001446]##[#50561096_69027]##Syntax Notation

[width="100%",cols="50%,50%",]
|===
|[#50561096_pgfId-1001475]## _[...]_ |[#50561096_pgfId-1001477]##What is
inside the square brackets is optional

|[#50561096_pgfId-1001479]## _\{option1|option2|option3|...}_
|[#50561096_pgfId-1001481]##Only one of the given options can be
selected

|[#50561096_pgfId-1001483]## _value_ |[#50561096_pgfId-1001485]##The
default value
|===

[#50561096_pgfId-1001469]##For example, in the syntax below:

{empty}[#50561096_pgfId-1001552]##<c:set var=âvarNameâ
[scope=â\{page|request|session|application}â]

[#50561096_pgfId-1005834]## value=âvalueâ/>

[#50561096_pgfId-1001471]##the attribute _scope_ is optional. If it is
specified, its value must be one of _page_ , _request_ , _session_ , or
_application_ . The default value is _page_ .

======= [#50561096_pgfId-1000202]##

image:jstl-9.gif[image]

Scoped Variables

[#50561096_pgfId-1000203]##Actions usually collaborate with their
environment in implicit or explicit ways, or both.

[#50561096_pgfId-1000253]##Implicit collaboration is often done via a
well defined interface that allows nested tags to work seamlessly with
the ancestor tag exposing that interface. The JSTL iterator tags support
this mode of collaboration.

[#50561096_pgfId-1000254]##Explicit collaboration happens when a tag
explicitly exposes information to its environment. Traditionally, this
has been done by exposing a scripting variable with a value assigned
from a JSP scoped attribute (which was saved by the tag handler).
Because of the expression language, the need for scripting variables is
significantly reduced. This is why all the JSTL tags expose information
only as JSP scoped attributes (no scripting variable exposed). These
exported JSP scoped attributes are referred to as scoped variables in
this specification; this helps in preventing too much overloading of the
term âattributeâ.

======= [#50561096_pgfId-1000204]##[#50561096_70227]##var and scope

[#50561096_pgfId-1000559]##The convention is to use the name _var_ for
attributes that export information. For example, the <c:forEach> action
exposes the current item of the customer collection it is iterating over
in the following way:

[width="100%",cols="100%",]
|===
a|
[#50561096_pgfId-1000207]##<c:forEach var=âcustomerâ
items=â$\{customers}â>

[#50561096_pgfId-1000208]## Current customer is <c:out
value=â$\{customer}â/>

[#50561096_pgfId-1000209]##</c:forEach>

|===

[#50561096_pgfId-1000664]##It is important to note that a name different
than _id_ was selected to stress the fact that only a scoped variable
(JSP scoped attribute) is exposed, without any scripting variable.

[#50561096_pgfId-1000665]##If the scoped variable has at-end visibility
(see link:jstl.htm#50561096_88078[See Visibility]), the convention also
establishes the attribute _scope_ to set the scope of the scoped
variable.

[#50561096_pgfId-1001781]##The _scope_ attribute has the semantics
defined in the JSP specification, and takes the same values as the ones
allowed in the <jsp:useBean> action; i.e. _page_ , _request_ , _session_
, _application_ . If no value is specified for _scope_ , _page_ scope is
the default unless otherwise specified.

[#50561096_pgfId-1001809]##It is also important to note, as per the JSP
specification, that specifying "session" scope is only allowed if the
page has sessions enabled.

[#50561096_pgfId-1000231]##If an action exposes more than one scoped
variable, the main one uses attribute names _var_ and _scope_ , while
secondary ones have a suffix added for unique identification. For
example, in the <c:forEach> action, the _var_ attribute exposes the
current item of the iteration (main variable exposed by the action),
while the _varStatus_ attribute exposes the current status of the
iteration (secondary variable).

======= [#50561096_pgfId-1000553]##[#50561096_88078]##Visibility

[#50561096_pgfId-1000554]##Scoped variables exported by JSTL actions are
categorized as either nested or at-end.

{empty}[#50561096_pgfId-1002005]##Nested scoped variables are only
visible within the body of the action and are stored in "page"
scopelink:#pgfId-1002046[1]. The action must create the variable
according to the semantics of _PageContext.setAttribute(varName,
PAGE_SCOPE)_ , and it must remove it at the end of the action according
to the semantics of _PageContext.removeAttribute(varName, PAGE_SCOPE)_
.link:#pgfId-1002058[2]

[#50561096_pgfId-1000596]##At-end scoped variables are only visible at
the end of the action. Their lifecycle is the one associated with their
associated scope.

[#50561096_pgfId-1000679]##In this specification, scoped variables
exposed by actions are considered at-end by default. If a scoped
variable is nested, it will be explicitly stated.

======= [#50561096_pgfId-1001897]##

image:jstl-9.gif[image]

Static vs Dynamic Attribute Values

[#50561096_pgfId-1005251]##Except for the two exceptions described
below, attribute values of JSTL actions can always be specified
dynamically (see link:jstl.htm#50561096_68655[See Attributes]).

[#50561096_pgfId-1005256]##The first exception to this convention is for
the _select_ attribute of XML actions. This attribute is reserved in
JSTL to specify a _String_ literal that represents an expression in the
XPath language.

[#50561096_pgfId-1005260]##The second exception is for attributes that
define the name and scope of scoped variables (as introduced in
link:jstl.htm#50561096_68655[See Attributes]) exported by JSTL actions.

[#50561096_pgfId-1006133]##Restricting these attributes to static values
should benefit development tools, without any impediment to page
authors.

======= [#50561096_pgfId-1000680]##

image:jstl-9.gif[image]

White Spaces

[#50561096_pgfId-999798]##Following the JSP specification (as well as
the XML and XSLT specifications), whitespace characters are _#x20_ ,
_#x9_ , _#xD,_ or _#xA_ .

======= [#50561096_pgfId-999865]##

image:jstl-9.gif[image]

Body Content

[#50561096_pgfId-999947]##If an action accepts a body content, an empty
body is always valid, unless explicitly stated otherwise.

[#50561096_pgfId-1001769]##If the body content is used to set the value
of an attribute, then an empty body content sets the attribute value to
an empty string.

[#50561096_pgfId-1000368]##If a body content is trimmed prior to being
processed by the action, it is trimmed as defined in method _trim()_ of
the class _java.lang.String_ .

======= [#50561096_pgfId-1001007]##

image:jstl-9.gif[image]

Naming

[#50561096_pgfId-1001008]##JSTL adopts capitalization conventions of
Java variables for compound words in action and attribute names.
Recommended tag prefixes are kept lowercase. Thus, we have
<sql:transaction> and <c:forEach>, as well as attributes such as
_docSystemId_ and _varDom_ .

[#50561096_pgfId-1005807]##In some cases, attribute names for JSTL
actions carry conventional meanings. For instance,
link:jstl.htm#50561096_70227[See var and scope] discussed the _var_ and
_scope_ attibutes. link:jstl.htm#50561105_97332[See The select
Attribute] discusses the _select_ attribute used in JSTL's
XML-processing tag library.

======= [#50561096_pgfId-1001421]##

image:jstl-9.gif[image]

[#50561096_85864]##Errors and Exceptions

[#50561096_pgfId-1005736]##All syntax errors (as defined in the syntax
section of each action, as well as the syntax of EL expressions as
defined in link:EL-152.htm#32725[See] ) must be reported at translation
time.

[#50561096_pgfId-1005770]##Constraints, as defined in the constraints
section of each action, must also be reported at translation time unless
they operate on a dynamic attribute value, in which case errors are
reported at runtime.

[#50561096_pgfId-1005975]##The conversion from a _String_ value to the
expected type of an attribute is handled according to the rules defined
in the JSP specification.

[#50561096_pgfId-1002270]##Since it is hard for a page author to deal
with exceptions, JSTL tries to avoid as many exception cases as
possible, without causing other problems.

[#50561096_pgfId-1002318]##For instance, if <c:forEach> were to throw an
exception when given a null value for the attribute _items_ , it would
be impossible to easily loop over a possibly missing string array that
represents check-box selection in an HTML form (retrieved with an EL
expression like _$\{paramValues.selections}_ ). A better choice is to do
nothing in this case.

[#50561096_pgfId-1002301]##The conventions used in JSTL with respect to
errors and exceptions are as follows:

[#50561096_pgfId-1002268]## _scope_

[#50561096_pgfId-1002668]##Invalid value â translation time validation
error

[#50561096_pgfId-1002375]## _var_

[#50561096_pgfId-1002467]##Empty â translation time validation error

[#50561096_pgfId-1002410]##Dynamic attributes with a fixed set of valid
String values:

[#50561096_pgfId-1002411]##null â use the default value

[#50561096_pgfId-1002424]##A null value can therefore be used to
dynamically (e.g. by request parameter), turn on or off special features
without too much work.

[#50561096_pgfId-1002479]##Invalid value â throw an exception

[#50561096_pgfId-1002480]##If a value is provided but is not valid, it's
likely a typo or another mistake.

[#50561096_pgfId-1002497]##Dynamic attributes without a fixed set of
valid values:

[#50561096_pgfId-1002727]##The rules below assume that if the type of
the value does not match the expected type, the EL will have applied
coercion rules to try to accomodate the input value. Moreover, if the
expected type is one of the types handled by the EL coercion rules, the
EL will in most cases coerce null to an approriate value. For instance,
if the expected type is a _Number_ , the EL will coerce a null value to
0, if it's _Boolean_ it will be coerced to false.

[#50561096_pgfId-1002550]##null â behavior specific to the action

[#50561096_pgfId-1002551]##If this rule is applied, itâs because the EL
could not coerce the null into an appropriate default value. It is
therefore up to the action to deal with the null value and is documented
in the âNull & Error Handlingâ section of the action.

[#50561096_pgfId-1002684]##Invalid type â throw an exception

[#50561096_pgfId-1002704]##Invalid value â throw an exception

[#50561096_pgfId-1002570]##Exceptions caused by the body content:

[#50561096_pgfId-1002571]##Always propagate, possibly after handling
them (e.g. <sql:transaction>).

[#50561096_pgfId-1002598]##Exceptions caused by the action itself:

[#50561096_pgfId-1002599]##Always propagate, possibly after handling
them.

[#50561096_pgfId-1002615]##Exceptions caused by the EL:

[#50561096_pgfId-1002616]##Always propagate.

[#50561096_pgfId-1005618]##Exceptions caused by XPath:

[#50561096_pgfId-1005619]##Always propagate.

[#50561096_pgfId-1002213]##Page authors may catch an exception using
<c:catch>, which exposes the exception through its _var_ attribute.
_var_ is removed if no exception has occurred.

[#50561096_pgfId-1006036]##When this specification requires an action to
throw an exception, this exception must be an instance of
_jakarta.servlet.jsp.JspException_ or a subclass. If an action catches any
exceptions that occur in its body, its tag handler must provide the
caught exception as the root cause of the _JspException_ it re-throws.

[#50561096_pgfId-1002651]##Also, by default, JSTL actions do not catch
or otherwise handle exceptions that occur during evaluation of their
body content. If they do, it is documented in their âNull & Error
Handlingâ or âDescriptionâ section.

======= [#50561096_pgfId-1001603]##

image:jstl-9.gif[image]

[#50561096_18174]##Configuration Data

[#50561096_pgfId-1003970]##Context initialization parameters (see
Servlet specification) are useful to configure the behavior of actions.
For example, it is possible in JSTL to define the resource bundle used
by I18N actions via the deployment descriptor (web.xml) as follows:

[width="100%",cols="100%",]
|===
a|
[#50561096_pgfId-1001613]##<web-app> +
...

[#50561096_pgfId-1001614]## <context-param>

[#50561096_pgfId-1001631]##
<param-name>jakarta.servlet.jsp.jstl.fmt.localizationContext</param-name>

[#50561096_pgfId-1001632]##
<param-value>com.acme.MyResources</param-value>

[#50561096_pgfId-1001617]## </context-param> +
...

[#50561096_pgfId-1001618]##</web-app>

|===

[#50561096_pgfId-1003995]##In many cases, it is also useful to allow
configuration data to be overridden dynamically for a particular JSP
scope (page, request, session, application) via a scoped variable. JSTL
refers to scoped variables used for that purpose as configuration
variables.

[#50561096_pgfId-1004001]##According to the JSP specification
(JSP.2.8.2), a scoped variable name should refer to a unique object at
all points in the execution. This means that all the different scopes
(page, request, session, and application) that exist within a
_PageContext_ really should behave as a single name space; setting a
scoped variable in any one scope overrides it in any of the other
scopes.

[#50561096_pgfId-1005062]##Given this constraint imposed by the JSP
specification, and in order to allow a configuration variable to be set
for a particular scope without affecting its settings in any of the
other scopes, JSTL provides the _Config_ class (see
link:jstl.htm#50561073_93849[See Java APIs]â). The _Config_ class
transparently manipulates the name of configuration variables so they
behave as if scopes had their own private name space. Details on the
name manipulations involved are voluntarily left unspecified and are
handled transparently by the _Config_ class. This ensures flexibility
should the âscope name spaceâ issue be addressed in the future by the
JSP specification.

[#50561096_pgfId-1005047]##When setting configuration data via the
deployment descriptor, the name associated with the context
initialization parameter (e.g.
jakarta.servlet.jsp.jstl.fmt.localizationContext) must be used and only
_String_ values may be specified. Configuration data that can be set
both through a context initialization parameter and configuration
variables is referred to as a configuration setting in this
specification.

[#50561096_pgfId-1005011]##As mentioned above, application developers
may access configuration data through class _Config (see_
link:jstl.htm#50561073_93849[See Java APIs]â _)_ . As a convenience,
constant _String_ values have been defined in the _Config_ class for
each configuration setting supported by JSTL. The values of these
constants are the names of the context intialization parameters.

[#50561096_pgfId-1005025]##Each configuration variable clearly specifies
the Java data type(s) it supports. If the type of the object used as the
value of a configuration variable does not match one of those supported
by the configuration variable, conversion is performed according to the
conversion rules defined in the expression language. Setting a
configuration variable is therefore exactly the same as setting an
attribute value of an action using the EL. A failure of these conversion
rules to determine an appropriate type coersion leads to a
_JspException_ at runtime.

======= [#50561096_pgfId-1006147]##

image:jstl-9.gif[image]

Default Values

[#50561096_pgfId-1006156]##It is often desirable to display a default
value if the output of an action yields a null value. This can be done
in a generic way in JSTL by exporting the output of an action via
attribute _var_ , and then displaying the value of that scoped variable
with action <c:out>.

[#50561096_pgfId-1006188]##For example:

[width="100%",cols="100%",]
|===
|[#50561096_pgfId-1006180]##<fmt:formatDate var=âformattedDateâ
value=â$\{reservationDate}â/> +
Date: <c:out value=â$\{formattedDate}â default=ânot specifiedâ/>
|===

======= [#50561097_pgfId-1000502]##[#50561097_78159]##Â 

======= [#50561097_pgfId-1002514]##

image:jstl-10.gif[image]

Expression Language Overview

======= [#50561097_pgfId-1002515]##

image:jstl-11.gif[image]

Â 

[#50561097_pgfId-1002516]##JSTL 1.0 introduced the notion of an
expression language (EL) to make it easy for page authors to access and
manipulate application data without having to master the complexity
associated with programming languages such as Java and JavaScript.

[#50561097_pgfId-1002543]##Starting with JSP 2.0 / JSTL 1.1, the EL has
become the responsibility of the JSP specification and is now formally
defined there.

[#50561097_pgfId-1002634]##This chapter provides a simple overview of
the key features of the expression language, it is therefore
non-normative. Please refer to the JSP specification for the formal
definition of the EL.

======= [#50561097_pgfId-1002635]##

image:jstl-12.gif[image]

Expressions and Attribute Values

[#50561097_pgfId-1002769]##The EL is invoked exclusively via the
construct _$\{expr}_ . In the sample code below, an EL expression is
used to set the value of attribute _test_ , while a second one is used
to display the title of a book.

[width="100%",cols="100%",]
|===
a|
[#50561097_pgfId-1002766]##<c:if test="$\{book.price <=
user.preferences.spendingLimit}">

[#50561097_pgfId-1002767]## The book $\{book.title} fits your budget!

[#50561097_pgfId-1002768]##</c:if>

|===

[#50561097_pgfId-1003906]##It is also possible for an attribute to
contain more than one EL expression, mixed with static text. For
example, the following would display âPrice of productName is
productPriceâ for a list of products.

[width="100%",cols="100%",]
|===
a|
[#50561097_pgfId-1003903]##<c:forEach var=âproduct"
items=â$\{products}â> +
<c:out value=âPrice of $\{product.name} is $\{product.price}â/>

[#50561097_pgfId-1003905]##</c:forEach>

|===

======= [#50561097_pgfId-1002848]##

image:jstl-12.gif[image]

Accessing Application Data

[#50561097_pgfId-1002960]##An identifier in the EL refers to the JSP
scoped variable returned by a call to
_PageContext.findAttribute(identifier)_ . This variable can therefore
reside in any of the four JSP scopes: page, request, session, or
application. A null value is returned if the variable does not exist in
any of the scopes.

[#50561097_pgfId-1003564]##The EL also defines implicit objects to
support easy access to application data that is of interest to a page
author. Implicit objects _pageScope_ , _requestScope_ , _session_ Scope,
and _applicationScope_ provide access to the scoped variables in each
one of these JSP scopes. It is also possible to access HTTP request
parameters via the implicit objects _param_ and _paramValues_ . _param_
is a _Map_ object where _param["foo"]_ returns the first string value
associated with request parameter _foo_ , while _paramValues["foo"]_
returns an array of all string values associated with that request
parameter.

[#50561097_pgfId-1003596]##The code below displays all request
parameters along with all their associated values.

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1003595]##<c:forEach var="aParam"
items="$\{paramValues}"> +
param: $\{aParam.key} +
values: +
<c:forEach var="aValue" items="$\{aParam.value}"> +
$\{aValue} +
</c:forEach> +
<br> +
</c:forEach>
|===

[#50561097_pgfId-1003942]##Request headers are also accessible in a
similar fashion via implicit objects _header_ and _headerValues_ .
_initParam_ gives access to context initialization parameters, while
_cookie_ exposes cookies received in the request.

[#50561097_pgfId-1004386]##Implicit object _pageContext_ is also
provided for advanced usage, giving access to all properties associated
with the _PageContext_ of a JSP page such as the _HttpServletRequest_ ,
_ServletContext_ , and _HttpSession_ objects and their properties.

======= [#50561097_pgfId-1003663]##

image:jstl-12.gif[image]

Nested Properties and Accessing Collections

[#50561097_pgfId-1002918]##The application data that a page author
manipulates in a JSP page usually consists of objects that comply with
the JavaBeans specification, or that represent collections such as
lists, maps, or arrays.

[#50561097_pgfId-1002982]##The EL recognizes the importance of these
data structures and provides two operators, â.â and â[]â, to make it
easy to access the data encapsulated in these objects.

[#50561097_pgfId-1003332]##The "." operator can be used as a convenient
shorthand for property access when the property name follows the
conventions of Java identifiers. For example:

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1003356]##Dear $\{user.firstName} +
from $\{user.address.city}, +
thanks for visiting our website!
|===

[#50561097_pgfId-1003416]##The â[]â operator allows for more generalized
access, as shown below:

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1003978]##<%-- âproductDirâ is a Map object containing
the description of +
products, âpreferencesâ is a Map object containing the preferences of a
user --%> +
product: +
$\{productDir[product.custId]} +
shipping preference: +
$\{user.preferences[âshippingâ]}
|===

======= [#50561097_pgfId-1002858]##

image:jstl-12.gif[image]

Operators

[#50561097_pgfId-1003044]##The operators supported in the EL handle the
most common data manipulations. The standard relational, arithmetic, and
logical operators are provided in the EL. A very useful âemptyâ operator
is also provided.

[#50561097_pgfId-1003235]##The six standard relational operators are
supported: _==_ (or _eq_ ), _!=_ (or _ne_ ), _<_ (or _lt_ ), _>_ (or
_gt_ ), _<=_ (or _le_ ), _>=_ (or _ge_ ). The second versions of the
last 4 operators are made available to avoid having to use entity
references in XML syntax.

[#50561097_pgfId-1003789]##Arithmetic operators consist of addition (
_+_ ), subtraction ( _-_ ), multiplication ( _*_ ), division ( _/_ or
_div_ ), and remainder/modulo ( _%_ or _mod_ ).

[#50561097_pgfId-1003811]##Logical operators consist of _&&_ (or _and_
), _||_ (or _or_ ), and _!_ (or _not_ ).

[#50561097_pgfId-1004420]##The _empty_ operator is a prefix operator
that can used to determine if a value is null or empty. For example:

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1004429]##<c:if test=â$\{empty param.name}â> +
Please specify your name. +
</c:if>
|===

======= [#50561097_pgfId-1003221]##

image:jstl-12.gif[image]

Automatic Type Conversion

[#50561097_pgfId-1003222]##The application data a page author has access
to may not always exactly match the type expected by the attribute of an
action or the type expected for an EL operator. The EL supports an
exhaustive set of rules to coerce the type of the resulting value to the
expected type.

[#50561097_pgfId-1003829]##For example, if request attributes
_beginValue_ and _endValue_ are _Integer_ objects, they will
automatically be coerced to _int_ s when used with the <c:forEach>
action.

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1003832]##<c:forEach
begin=â$\{requestScope.beginValue}â +
end=â$\{requestScope.endValue}â> +
... +
</c:forEach>
|===

[#50561097_pgfId-1004051]##In the example below, the parameter String
value _param.start_ is coerced to a number and is then added to 10 to
yield an int value for attribute _begin_ .

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1004050]##<c:forEach items=â$\{products}â
begin=â$\{param.start + 10}â> +
... +
</c:forEach>
|===

======= [#50561097_pgfId-1003833]##

image:jstl-12.gif[image]

Default Values

[#50561097_pgfId-1002847]##JSP pages are mostly used in presentation.
Experience suggests that it is important to be able to provide as good a
presentation as possible, even when simple errors occur in the page. To
satisfy this requirement, the EL provides default values rather than
errors when failure to evaluate an expression is deemed ârecoverableâ.
Default values are type-correct values that allow a page to easily
recover from these error conditions.

[#50561097_pgfId-1003461]##In the following example, the expression
â$\{user.address.city}â evaluates to _null_ rather than throwing a
_NullPointerException_ if there is no address associated with the _user_
object. This way, a sensible default value can be displayed without
having to worry about exceptions being thrown by the JSP page.

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1003471]##City: <c:out value=â$\{user.address.city}â
default=âN/Aâ/>
|===

[#50561097_pgfId-1004096]##In the following example, the addition
operator considers the value of _param.start_ to be 0 if it is not
defined, therefore evaluating the expression to 10.

[width="100%",cols="100%",]
|===
|[#50561097_pgfId-1004095]##<c:forEach items=â$\{products}â
begin=â$\{param.start + 10}â> +
... +
</c:forEach>
|===

======= [#50561098_pgfId-1000502]##[#50561098_78159]##Â 

======= [#50561098_pgfId-1001185]##

image:jstl-13.gif[image]

General-Purpose Actions

======= [#50561098_pgfId-1001425]##core tag library

image:jstl-14.gif[image]

[#50561098_pgfId-1003817]##This chapter introduces general purpose
actions to support the manipulation of scoped variables as well as to
handle error conditions.

======= [#50561098_pgfId-999293]##

image:jstl-15.gif[image]

Overview

[#50561098_pgfId-998042]##The <c:out> action provides a capability
similar to JSP expressions such as <%= scripting-language-expression %>
or $\{el-expression}. For example:

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1000673]##You have <c:out
value="$\{sessionScope.user.itemCount}"/> items.
|===

[#50561098_pgfId-1002938]##By default, <c:out> converts the characters
<, >, ', ", & to their corresponding character entity codes (e.g. < is
converted to &lt;). If these characters are not converted, the page may
not be rendered properly by the browser, and it could also open the door
for cross-site scripting attacks (e.g. someone could post JavaScript
code for closing the window to an online discussion forum). The
conversion may be bypassed by specifying false to the _escapeXml_
attribute.

[#50561098_pgfId-1002936]##The <c:out> action also supports the notion
of default values for cases where the value of an EL expression is null.
In the example below, the value âunknownâ will be displayed if the
property _city_ is not accessible.

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1000732]##<c:out value="$\{customer.address.city}"
default="unknown"/>
|===

[#50561098_pgfId-1000750]##The action <c:set> is used to set the value
of a JSP scoped attribute as follows:

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1000749]##<c:set var=âfooâ value=âvalueâ/>
|===

[#50561098_pgfId-1000772]##It is also possible to set the value of a
scoped variable (JSP scoped attribute) from the body of the <c:set>
action. This solves the problem associated with not being able to set an
attribute value from another action. In the past, a tag developer would
often implement extra "attributes as tags" so the value of these
attributes could be set from other actions.

[#50561098_pgfId-1001123]##For example, the action <acme:att1> was
created only to support setting the value of _att1_ of the parent tag
<acme:atag> from other actions .

[width="100%",cols="100%",]
|===
a|
[#50561098_pgfId-1000838]##<acme:atag>

[#50561098_pgfId-1000839]## <acme:att1>

[#50561098_pgfId-1000849]## <acme:foo>mumbojumbo</acme:foo>

[#50561098_pgfId-1000850]## </acme:att1>

[#50561098_pgfId-1000840]##</acme:atag>

|===

[#50561098_pgfId-1000875]##With the <c:set> tag, this can be handled
without requiring the extra <acme:att1> tag.

[width="100%",cols="100%",]
|===
a|
[#50561098_pgfId-1000870]##<c:set var=âatt1â>

[#50561098_pgfId-1000872]## <acme:foo>mumbojumbo</acme:foo>

[#50561098_pgfId-1000873]##</c:set>

[#50561098_pgfId-1000874]##<acme:atag att1=â$\{att1}â/>

|===

[#50561098_pgfId-1002762]##In the preceding example, the <c:set> action
sets the value of the _att1_ scoped variable to the output of the
<acme:foo> action. <c:set> â like all JSTL actions that create scoped
attributes â creates scoped attributes in âpageâ scope by default.

[#50561098_pgfId-1004135]##<c:set> may also be used to set the property
of a JavaBeans object, or add or set a specific element in a
_java.util.Map_ object. For example:.

[width="100%",cols="100%",]
|===
a|
[#50561098_pgfId-1004131]##<!-- set property in JavaBeans object --> +
<c:set target="$\{cust.address}" property="city" value="$\{city}"/> +

[#50561098_pgfId-1004158]##<!-- set/add element in Map object --> +
<c:set target="$\{preferences}" property="color" +
value="$\{param.color}"/>

|===

[#50561098_pgfId-1004117]##Finally, <c:set> may also be used to set a
deferred-value that can later be evaluated by a tag handler. In this
case, no scope can be specified. For example:

[#50561098_pgfId-1004733]##Â 

[width="100%",cols="100%",]
|===
a|
[#50561098_pgfId-1004737]##<!-- set deferred value --> +
<c:set var="d" value="#\{handler.everythingDisabled}"/> +
...

[#50561098_pgfId-1004738]##<h:inputText id="i1" disabled="#\{d}"/> +
<h:inputText id="i2" disabled="#\{d}"/> +

|===

[#50561098_pgfId-1002891]##Action <c:remove> is the natural companion to
<c:set>, allowing the explicit removal of scoped variables. For example:

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1002770]##<c:remove var="cachedResult"
scope="application"/>
|===

[#50561098_pgfId-1003288]##Finally, the <c:catch> action provides a
complement to the JSP error page mechanism. It is meant to allow page
authors to recover gracefully from error conditions that they can
control. For example:

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1004215]##<c:catch var=âexceptionâ> +
<!-- Execution we can recover from if exception occurs --> +
... +
</c:catch> +
<c:if test=â$\{exception != null}â> +
Sorry. Processing could not be performed because... +
</c:if>
|===

======= [#50561098_pgfId-1003301]##

image:jstl-15.gif[image]

[#50561098_85482]##<c:out>

[#50561098_pgfId-998728]##Evaluates an expression and outputs the result
of the evaluation to the current _JspWriter_ object.

======= [#50561098_pgfId-998729]##Syntax

image:jstl-16.gif[image]

[#50561098_pgfId-998128]## _Without a body_

[#50561098_pgfId-1000634]##<c:out value=âvalueâ
[escapeXml=â\{true|false}â] +
[default=âdefaultValueâ] />

[#50561098_pgfId-1000645]## _With a body_

[#50561098_pgfId-1000538]##<c:out value=âvalueâ
[escapeXml=â\{true|false}â]> +
default value

[#50561098_pgfId-999569]##</c:out>

======= [#50561098_pgfId-1000045]##Body Content

image:jstl-16.gif[image]

[#50561098_pgfId-1001554]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561098_pgfId-1000115]##Attributes

image:jstl-16.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561098_pgfId-1002618]##Name |[#50561098_pgfId-1002620]##Dyn
|[#50561098_pgfId-1002622]##Type |[#50561098_pgfId-1002624]##Description
|[#50561098_pgfId-1002626]## _value_ |[#50561098_pgfId-1002628]## _true_
|[#50561098_pgfId-1002630]## _Object_
|[#50561098_pgfId-1002632]##Expression to be evaluated.

|[#50561098_pgfId-1003046]## _escapeXml_ |[#50561098_pgfId-1003048]##
_true_ |[#50561098_pgfId-1003050]## _boolean_
|[#50561098_pgfId-1003052]##Deterrmines whether characters <,>,&,â,â in
the resulting string should be converted to their corresponding
character entity codes. Default value is true.

|[#50561098_pgfId-1002634]## _default_ |[#50561098_pgfId-1002636]##
_true_ |[#50561098_pgfId-1002638]## _Object_
|[#50561098_pgfId-1002640]##Default value if the resulting value is
null.
|===

======= [#50561098_pgfId-1003614]##Null & Error Handling

image:jstl-16.gif[image]

[#50561098_pgfId-1004577]##If _value_ is null, the default value takes
over. If no default value is specified, it itself defaults to an empty
string.

======= [#50561098_pgfId-1000117]##Description

image:jstl-16.gif[image]

[#50561098_pgfId-1002513]##The expression to be evaluated is specified
via the _value_ attribute.

[#50561098_pgfId-1004633]##If the result of the evaluation is not a
_java.io.Reader_ object, then it is coerced to a _String_ and is
subsequently emitted into the current _JspWriter_ object.

[#50561098_pgfId-1004642]##If the result of the evaluation is a
_java.io.Reader_ object, data is first read from the _Reader_ object and
then written into the current _JspWriter_ object. This special
processing associated with _Reader_ objects should help improve
performance when large amount of data must be read and then displayed to
the page.

[#50561098_pgfId-1003080]##If _escapeXml_ is true, the following
character conversions are applied:

[#50561098_pgfId-1003148]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561098_pgfId-1003092]##Character
|[#50561098_pgfId-1003094]##Character Entity Code
|[#50561098_pgfId-1003096]## _<_ |[#50561098_pgfId-1003098]## _&lt;_

|[#50561098_pgfId-1003100]## _>_ |[#50561098_pgfId-1003102]## _&gt;_

|[#50561098_pgfId-1003104]## _&_ |[#50561098_pgfId-1003106]## _&amp;_

|[#50561098_pgfId-1003129]##â |[#50561098_pgfId-1003131]##&#039;

|[#50561098_pgfId-1003108]##ââ |[#50561098_pgfId-1003139]##&#034;
|===

[#50561098_pgfId-1001135]##The default value can be specified either via
the _default_ attribute (using the syntax without a body), or within the
body of the tag (using the syntax with a body). It defaults to an empty
string.

======= [#50561098_pgfId-1000972]##

image:jstl-15.gif[image]

[#50561098_97330]##<c:set>

[#50561098_pgfId-1000973]##Sets the value of a scoped variable or a
property of a target object.

======= [#50561098_pgfId-1000984]##Syntax

image:jstl-16.gif[image]

[#50561098_pgfId-1000985]## _Syntax 1: Set the value of a scoped
variable using attribute value_

[#50561098_pgfId-1001008]##<c:set value=âvalueâ

[#50561098_pgfId-1002593]## var=âvarNameâ
[scope=â\{page|request|session|application}â]/>

[#50561098_pgfId-1001009]## _Syntax 2: Set the value of a scoped
variable using body content_

[#50561098_pgfId-1000988]##<c:set var=âvarNameâ
[scope=â\{page|request|session|application}â]> +
body content

[#50561098_pgfId-1003878]##</c:set>

[#50561098_pgfId-1003879]## _Syntax 3: Set a property of a target object
using attribute value_

[#50561098_pgfId-1003880]##<c:set value=âvalueâ

[#50561098_pgfId-1003867]## target=âtargetâ property=âpropertyNameâ/>

[#50561098_pgfId-1003868]## _Syntax 4: Set a property of a target object
using body content_

[#50561098_pgfId-1003869]##<c:set target=âtargetâ
property=âpropertyNameâ> +
body content

[#50561098_pgfId-1003870]##</c:set>

[#50561098_pgfId-1004769]## _Syntax 5: Set a deferred value_

[#50561098_pgfId-1004798]##<c:set var=âvarNameâ value="deferred-value"/>

======= [#50561098_pgfId-1004800]##Body Content

image:jstl-16.gif[image]

[#50561098_pgfId-1004793]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561098_pgfId-1001048]##Attributes

image:jstl-16.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561098_pgfId-1002645]##Name |[#50561098_pgfId-1002647]##Dyn
|[#50561098_pgfId-1002649]##Type |[#50561098_pgfId-1002651]##Description
|[#50561098_pgfId-1002653]## _value_ |[#50561098_pgfId-1002655]## _true_
|[#50561098_pgfId-1002657]## _Object_
|[#50561098_pgfId-1002659]##Expression to be evaluated.

|[#50561098_pgfId-1002661]## _var_ |[#50561098_pgfId-1002663]## _false_
|[#50561098_pgfId-1002665]## _String_ |[#50561098_pgfId-1002667]##Name
of the exported scoped variable to hold the value specified in the
action. The type of the scoped variable is whatever type the value
expression evaluates to.

|[#50561098_pgfId-1002669]## _scope_ |[#50561098_pgfId-1002671]##
_false_ |[#50561098_pgfId-1002673]## _String_
|[#50561098_pgfId-1002675]##Scope for var.

|[#50561098_pgfId-1003924]##target |[#50561098_pgfId-1003926]##true
|[#50561098_pgfId-1003928]##Object |[#50561098_pgfId-1003930]##Target
object whose property will be set. Must evaluate to a JavaBeans object
with setter property _property_ , or to a _java.util.Map_ object.

|[#50561098_pgfId-1003916]##property |[#50561098_pgfId-1003918]##true
|[#50561098_pgfId-1003920]##String |[#50561098_pgfId-1003922]##Name of
the property to be set in the target object.
|===

======= [#50561098_pgfId-1003654]##Null & Error Handling

image:jstl-16.gif[image]

[#50561098_pgfId-1004081]##Syntax 3 and 4: Throw an exception under any
of the following conditions:

[#50561098_pgfId-1004082]## _target_ evaluates to null

[#50561098_pgfId-1004083]## _target_ is not a _java.util.Map_ object and
is not a JavaBeans object that supports setting property _property_ .

[#50561098_pgfId-1003664]##If _value_ is null

[#50561098_pgfId-1004312]##Syntax 1: the scoped variable defined by
_var_ and _scope_ is removed.

[#50561098_pgfId-1004340]##If attribute _scope_ is specified, the scoped
variable is removed according to the semantics of
_PageContext.removeAttribute(varName, scope)_ .

[#50561098_pgfId-1004391]##Otherwise, there is no way to differentiate
between syntax 1 and syntax 5. The scoped variable is removed according
to the semantics of _PageContext.removeAttribute(varName)_ , and the
variable is removed from the VariableMapper as well.

[#50561098_pgfId-1003946]##Syntax 3:

[#50561098_pgfId-1003956]##if _target_ is a _Map_ , remove the entry
with the key identified by _property_ .

[#50561098_pgfId-1003991]##if _target_ is a JavaBean component, set the
property to null.

[#50561098_pgfId-1004899]##Syntax 5:

[#50561098_pgfId-1004900]##There is no way to differentiate between
syntax 1 (where scope is not specified) and syntax 5. The scoped
variable is removed according to the semantics of
_PageContext.removeAttribute(varName)_ , and the variable is removed
from the VariableMapper as well.

======= [#50561098_pgfId-1004903]##Description

image:jstl-16.gif[image]

[#50561098_pgfId-1001285]##Syntax 1 and 2 set the value of a the scoped
variable identified by _var_ and _scope_ .

[#50561098_pgfId-1004042]##Syntax 3 and 4:

[#50561098_pgfId-1004057]##If the target expression evaluates to a
_java.util.Map_ object, set the value of the element associated with the
key identified by _property_ . If the element does not exist, add it to
the _Map_ object.

[#50561098_pgfId-1004069]##Otherwise, set the value of the property
_property_ of the JavaBeans object _target_ . If the type of the value
to be set does not match the type of the bean property, conversion is
performed according to the conversion rules defined in the expression
language (see link:EL-152.htm#39918[See Type Conversion]). With the
exception of a null value, setting a bean property with <c:set> is
therefore exactly the same as setting an attribute value of an action
using the EL. A failure of these conversion rules to determine an
appropriate type coersion leads to a _JspException_ at runtime.

[#50561098_pgfId-1004813]##Syntax 5:

[#50561098_pgfId-1004814]##Map the deferred-value specified to the "var"
attribute into the EL VariableMapper.

[#50561098_pgfId-1004846]##Some implementation notes illustrating how
the <c:set> tag handler may process a deferred-value specified for the
"value" attribute.

[width="100%",cols="100%",]
|===
|[#50561098_pgfId-1004858]##doStartTag() +
... +
// 'value' is a deferred-value +
// Get the current EL VariableMapper +
VariableMapper vm = jspContext.getELContext().getVariableMapper(); +
// Assign the expression to the variable specified +
// in the 'var' attribute, so any reference to that +
// variable will be replaced by the expression is +
// subsequent EL evaluations. +
vm.setVariable(getVar(), (ValueExpression)getValue()); +
...
|===

======= [#50561098_pgfId-1002794]##

image:jstl-15.gif[image]

<c:remove>

[#50561098_pgfId-1002795]##Removes a scoped variable.

======= [#50561098_pgfId-1002796]##Syntax

image:jstl-16.gif[image]

[#50561098_pgfId-1002798]##<c:remove var=âvarNameâ

[#50561098_pgfId-1002859]##
[scope=â\{page|request|session|application}â]/>

======= [#50561098_pgfId-1002838]##Attributes

image:jstl-16.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561098_pgfId-1002807]##Name |[#50561098_pgfId-1002809]##Dynamic
|[#50561098_pgfId-1002811]##Type |[#50561098_pgfId-1002813]##Description
|[#50561098_pgfId-1002823]## _var_ |[#50561098_pgfId-1002825]## _false_
|[#50561098_pgfId-1002827]## _String_ |[#50561098_pgfId-1002829]##Name
of the scoped variable to be removed.

|[#50561098_pgfId-1002831]## _scope_ |[#50561098_pgfId-1002833]##
_false_ |[#50561098_pgfId-1002835]## _String_
|[#50561098_pgfId-1002837]##Scope for var.
|===

======= [#50561098_pgfId-1002839]##Description

image:jstl-16.gif[image]

[#50561098_pgfId-1002879]##The <c:remove> action removes a scoped
variable.

[#50561098_pgfId-1003181]##If attribute _scope_ is not specified, the
scoped variable is removed according to the semantics of
_PageContext.removeAttribute(varName)_ . If attribute _scope_ is
specified, the scoped variable is removed according to the semantics of
_PageContext.removeAttribute(varName, scope)_ .

======= [#50561098_pgfId-1003308]##

image:jstl-15.gif[image]

<c:catch>

[#50561098_pgfId-1003364]##Catches a _java.lang.Throwable_ thrown by any
of its nested actions.

======= [#50561098_pgfId-1003310]##Syntax

image:jstl-16.gif[image]

[#50561098_pgfId-1003312]##<c:catch [var=âvarNameâ]>

[#50561098_pgfId-1003391]## nested actions

[#50561098_pgfId-1003409]##</c:catch>

======= [#50561098_pgfId-1003317]##Body Content

image:jstl-16.gif[image]

[#50561098_pgfId-1003517]##JSP. The body content is processed by the JSP
container and the result is written to the current _JspWriter_ .

======= [#50561098_pgfId-1003352]##Attributes

image:jstl-16.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561098_pgfId-1003321]##Name |[#50561098_pgfId-1003323]##Dynamic
|[#50561098_pgfId-1003325]##Type |[#50561098_pgfId-1003327]##Description
|[#50561098_pgfId-1003337]## _var_ |[#50561098_pgfId-1003339]## _false_
|[#50561098_pgfId-1003341]## _String_ |[#50561098_pgfId-1003343]##Name
of the exported scoped variable for the exception thrown from a nested
action. The type of the scoped variable is the type of the exception
thrown.
|===

======= [#50561098_pgfId-1003353]##Description

image:jstl-16.gif[image]

[#50561098_pgfId-1003419]##The <c:catch> action allows page authors to
handle errors from any action in a uniform fashion, and allows for error
handling for multiple actions at once.

[#50561098_pgfId-1003460]##<c:catch> provides page authors with granular
error handling: Actions that are of central importance to a page should
not be encapsulated in a <c:catch>, so their exceptions will propagate
to an error page, whereas actions with secondary importance to the page
should be wrapped in a <c:catch>, so they never cause the error page
mechanism to be invoked.

[#50561098_pgfId-1003430]##The exception thrown is stored in the scoped
variable identified by _var_ , which always has page scope. If no
exception occurred, the scoped variable identified by _var_ is removed
if it existed.

[#50561098_pgfId-1003546]##If _var_ is missing, the exception is simply
caught and not saved.

[#50561098_pgfId-1003544]##Â 

======= [#50561099_pgfId-874]##Â 

======= [#50561099_pgfId-1001083]##

image:jstl-17.gif[image]

Conditional Actions

======= [#50561099_pgfId-1001084]##core tag library

image:jstl-18.gif[image]

[#50561099_pgfId-999292]##The output of a JSP page is often conditional
on the value of dynamic application data. A simple scriptlet with an
_if_ statement can be used in such situations, but this forces a page
author to use a scripting language whose syntax may be troublesome (e.g.
one may forget the curly braces).

[#50561099_pgfId-999314]##The JSTL conditional actions make it easy to
do conditional processing in a JSP page.

======= [#50561099_pgfId-999293]##

image:jstl-19.gif[image]

Overview

[#50561099_pgfId-998042]##The JSTL conditional actions are designed to
support the two most common usage patterns associated with conditional
processing: _simple_ conditional execution and _mutually exclusive_
conditional execution.

[#50561099_pgfId-998055]##A _simple_ conditional execution action
evaluates its body content only if the test condition associated with it
is true. In the following example, a special greeting is displayed only
if this is a userâs first visit to the site:

[width="100%",cols="100%",]
|===
a|
[#50561099_pgfId-999332]##<c:if test="$\{user.visitCount == 1}">

[#50561099_pgfId-999333]## This is your first visit. Welcome to the
site!

[#50561099_pgfId-999334]##</c:if>

|===

[#50561099_pgfId-998080]##With _mutually exclusive_ conditional
execution, only one among a number of possible alternative actions gets
its body content evaluated.

[#50561099_pgfId-999548]##For example, the following sample code shows
how the text rendered depends on a userâs membership category.

[width="100%",cols="100%",]
|===
a|
[#50561099_pgfId-999362]##<c:choose>

[#50561099_pgfId-999363]## <c:when test="$\{user.category == 'trial'}â>

[#50561099_pgfId-999364]## ...

[#50561099_pgfId-999365]## </c:when>

[#50561099_pgfId-999366]## <c:when test="$\{user.category == 'member'}â>

[#50561099_pgfId-999367]## ...

[#50561099_pgfId-999368]## </c:when>

[#50561099_pgfId-999700]## <c:when test="$\{user.category == 'vip'}â>

[#50561099_pgfId-999701]## ...

[#50561099_pgfId-999698]## </c:when> +
<c:otherwise>

[#50561099_pgfId-999369]## ...

[#50561099_pgfId-999370]## </c:otherwise>

[#50561099_pgfId-999371]##</c:choose>

|===

[#50561099_pgfId-999667]##An _if/then/else_ statement can be easily
achieved as follows:

[width="100%",cols="100%",]
|===
a|
[#50561099_pgfId-999670]##<c:choose>

[#50561099_pgfId-999671]## <c:when test="$\{count == 0}â>

[#50561099_pgfId-999672]## No records matched your selection.

[#50561099_pgfId-999673]## </c:when>

[#50561099_pgfId-999674]## <c:otherwise>

[#50561099_pgfId-999675]## $\{count} records matched your selection.

[#50561099_pgfId-999676]## </c:otherwise>

[#50561099_pgfId-999677]##</c:choose>

|===

======= [#50561099_pgfId-1003483]##

image:jstl-19.gif[image]

Custom Logic Actions

[#50561099_pgfId-1003484]##It is important to note that the <c:if> and
<c:when> actions have different semantics. A <c:if> action will always
process its body content if its test condition evaluates to true. A
<c:when> action will process its body content if it is the first one in
a series of <c:when> actions whose test condition evaluates to true.

[#50561099_pgfId-1003485]##These semantic differences are enforced by
the fact that only <c:when> actions can be used within the context of a
mutually exclusive conditional execution (<c:choose> action). This clean
separation of behavior also impacts the way custom logic actions (i.e.
actions who render their bodies depending on the result of a test
condition) should be designed. Ideally, the result associated with the
evaluation of a custom logic action should be usable both in the context
of a simple conditional execution, as well as in a mutually exclusive
conditional execution.

[#50561099_pgfId-1003486]##The proper way to enable this is by simply
having the custom logic action export the result of the test condition
as a scoped variable. This boolean result can then be used as the test
condition of a <c:when> action.

[#50561099_pgfId-1003487]##In the example below, the fictitious custom
action <acme:fullMoon> tells whether or not a page is accessed during a
full moon. The behavior of an _if/then/else_ statement is made possible
by having the result of the <acme:fullMoon> action exposed as a boolean
scoped variable that is then used as the test condition in the <c:when>
action.

[width="100%",cols="100%",]
|===
a|
[#50561099_pgfId-1003490]## <acme:fullMoon var="isFullMoon"/>

[#50561099_pgfId-1003491]## <c:choose>

[#50561099_pgfId-1003492]## <c:when test="$\{isFullMoon}">

[#50561099_pgfId-1003493]## ...

[#50561099_pgfId-1003494]## </c:when>

[#50561099_pgfId-1003495]## <c:otherwise>

[#50561099_pgfId-1003496]## ...

[#50561099_pgfId-1003497]## </c:otherwise>

[#50561099_pgfId-1003498]## </c:choose>

|===

[#50561099_pgfId-1003499]##To facilitate the implementation of
conditional actions where the boolean result is exposed as a JSP scoped
variable, class _ConditionalTagSupport_ (see
link:jstl.htm#50561073_93849[See Java APIs]â) has been defined in this
specification.

[#50561099_pgfId-999665]##Â 

======= [#50561099_pgfId-998144]##

image:jstl-19.gif[image]

<c:if>

[#50561099_pgfId-998728]##Evaluates its body content if the expression
specified with the _test_ attribute is true.

======= [#50561099_pgfId-998729]##Syntax

image:jstl-20.gif[image]

[#50561099_pgfId-1002770]## _Syntax 1: Without body content_

[#50561099_pgfId-1002757]##<c:if test=âtestConditionâ +
var=âvarNameâ [scope=â\{page|request|session|application}â]/>

[#50561099_pgfId-1002778]## _Syntax 2: With body content_

[#50561099_pgfId-998128]##<c:if test=âtestConditionâ +
[var=âvarNameâ] [scope=â\{page|request|session|application}â]>

[#50561099_pgfId-998166]## body content

[#50561099_pgfId-999569]##</c:if>

======= [#50561099_pgfId-1000045]##Body Content

image:jstl-20.gif[image]

[#50561099_pgfId-1001227]##JSP. If the test condition evaluates to true,
the JSP container processes the body content and then writes it to the
current _JspWriter_ .

======= [#50561099_pgfId-1000115]##Attributes

image:jstl-20.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561099_pgfId-1002922]##Name |[#50561099_pgfId-1002924]##Dyn
|[#50561099_pgfId-1002926]##Type |[#50561099_pgfId-1002928]##Description
|[#50561099_pgfId-1002930]## _test_ |[#50561099_pgfId-1002932]## _true_
|[#50561099_pgfId-1002934]## _boolean_ |[#50561099_pgfId-1002937]##The
test condition that determines whether or not the body content should be
processed.

|[#50561099_pgfId-1002939]## _var_ |[#50561099_pgfId-1002941]## _false_
|[#50561099_pgfId-1002943]## _String_ |[#50561099_pgfId-1002945]##Name
of the exported scoped variable for the resulting value of the test
condition. The type of the scoped variable is _Boolean_ .

|[#50561099_pgfId-1002947]## _scope_ |[#50561099_pgfId-1002949]##
_false_ |[#50561099_pgfId-1002951]## _String_
|[#50561099_pgfId-1002953]##Scope for var.
|===

======= [#50561099_pgfId-1000116]##Constraints

image:jstl-20.gif[image]

[#50561099_pgfId-1000120]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561099_pgfId-1000117]##Description

image:jstl-20.gif[image]

[#50561099_pgfId-999741]##If the test condition evaluates to true, the
body content is evaluated by the JSP container and the result is output
to the current _JspWriter_ .

======= [#50561099_pgfId-1000486]##

image:jstl-19.gif[image]

<c:choose>

[#50561099_pgfId-1000487]##Provides the context for mutually exclusive
conditional execution.

======= [#50561099_pgfId-1000488]##Syntax

image:jstl-20.gif[image]

[#50561099_pgfId-998741]##<c:choose>

[#50561099_pgfId-999575]## body content (<when> and <otherwise> subtags)

[#50561099_pgfId-999593]##</c:choose>

======= [#50561099_pgfId-1000280]##Body Content

image:jstl-20.gif[image]

[#50561099_pgfId-1001290]##JSP. The body content is processed by the JSP
container (at most one of the nested actions will be processed) and
written to the current _JspWriter_ .

======= [#50561099_pgfId-1000432]##Attributes

image:jstl-20.gif[image]

[#50561099_pgfId-1000433]##None.

======= [#50561099_pgfId-1000144]##Constraints

image:jstl-20.gif[image]

[#50561099_pgfId-1000145]##The body of the <c:choose> action can only
contain:

[#50561099_pgfId-999207]##White spaces

[#50561099_pgfId-1000171]##May appear anywhere around the <c:when> and
<c:otherwise> subtags.

[#50561099_pgfId-999208]##1 or more <c:when> actions

[#50561099_pgfId-1000193]##Must all appear before <c:otherwise>

[#50561099_pgfId-999209]##0 or 1 <c:otherwise> action

[#50561099_pgfId-1000197]##Must be the last action nested within
<c:choose>

======= [#50561099_pgfId-1000508]##Description

image:jstl-20.gif[image]

[#50561099_pgfId-1000512]##The <c:choose> action processes the body of
the first <c:when> action whose test condition evaluates to true. If
none of the test conditions of nested <c:when> actions evaluates to
true, then the body of an <c:otherwise> action is processed, if present.

======= [#50561099_pgfId-1000438]##

image:jstl-19.gif[image]

<c:when>

[#50561099_pgfId-1000439]##Represents an alternative within a <c:choose>
action.

======= [#50561099_pgfId-1000440]##Syntax

image:jstl-20.gif[image]

[#50561099_pgfId-998998]##<c:when test=âtestConditionâ> +
body content

[#50561099_pgfId-998924]##</c:when>

======= [#50561099_pgfId-1001244]##Body Content

image:jstl-20.gif[image]

[#50561099_pgfId-1001268]##JSP. If this is the first <c:when> action to
evaluate to true within <c:choose>, the JSP container processes the body
content and then writes it to the current _JspWriter_ .

======= [#50561099_pgfId-1001223]##Attributes

image:jstl-20.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561099_pgfId-1002961]##Name |[#50561099_pgfId-1002963]##Dynamic
|[#50561099_pgfId-1002965]##Type |[#50561099_pgfId-1002967]##Description
|[#50561099_pgfId-1002969]## _test_ |[#50561099_pgfId-1002971]## _true_
|[#50561099_pgfId-1002973]## _boolean_ |[#50561099_pgfId-1002976]##The
test condition that determines whether or not the body content should be
processed.
|===

======= [#50561099_pgfId-1000233]##Constraints

image:jstl-20.gif[image]

[#50561099_pgfId-1000234]##Must have _<c:choose>_ as an immediate
parent.

[#50561099_pgfId-1000351]##Must appear before an <c:otherwise> action
that has the same parent.

======= [#50561099_pgfId-1000302]##Description

image:jstl-20.gif[image]

[#50561099_pgfId-1000316]##Within a <c:choose> action, the body content
of the first <c:when> action whose test condition evaluates to true is
evaluated by the JSP container, and the result is output to the current
_JspWriter_ .

======= [#50561099_pgfId-1000243]##

image:jstl-19.gif[image]

<c:otherwise>

[#50561099_pgfId-999027]##Represents the last alternative within a
<c:choose> action.

======= [#50561099_pgfId-999028]##Syntax

image:jstl-20.gif[image]

[#50561099_pgfId-999010]##<c:otherwise>

[#50561099_pgfId-999011]## conditional block

[#50561099_pgfId-999012]##</c:otherwise>

======= [#50561099_pgfId-1000290]##Body Content

image:jstl-20.gif[image]

[#50561099_pgfId-1001296]##JSP. If no <c:when> action nested within
<c:choose> evaluates to true, the JSP container processes the body
content and then writes it to the current _JspWriter_ .

======= [#50561099_pgfId-1000411]##Attributes

image:jstl-20.gif[image]

[#50561099_pgfId-1000415]##None.

======= [#50561099_pgfId-1000253]##Constraints

image:jstl-20.gif[image]

[#50561099_pgfId-1000254]##Must have <c:choose> as an immediate parent.

[#50561099_pgfId-1000346]##Must be the last nested action within
<c:choose>.

======= [#50561099_pgfId-1000332]##Description

image:jstl-20.gif[image]

[#50561099_pgfId-1000333]##Within a <c:choose> action, if none of the
nested <c:when> test conditions evaluates to true, then the body content
of the <c:otherwise> action is evaluated by the JSP container, and the
result is output to the current _JspWriter_ .

======= [#50561100_pgfId-874]##Â 

======= [#50561100_pgfId-1001083]##

image:jstl-21.gif[image]

Iterator Actions

======= [#50561100_pgfId-1001084]##core tag library

image:jstl-22.gif[image]

[#50561100_pgfId-999292]##Iterating over a collection of objects is a
common occurrence in a JSP page. Just as with conditional processing, a
simple scriptlet can be used in such situations. However, this once
again forces a page author to be knowledgeable in many aspects of the
Java programming language (how to iterate on various collection types,
having to cast the returned object into the proper type, proper use of
the curly braces, etc.).

[#50561100_pgfId-999314]##The JSTL iterator actions simplify iterating
over a wide variety of collections of objects.

======= [#50561100_pgfId-999293]##

image:jstl-23.gif[image]

Overview

[#50561100_pgfId-1001280]##The <c:forEach> action repeats its nested
body content over the collection of objects specified by the _items_
attribute. For example, the JSP code below creates an HTML table with
one column that shows the default display value of each item in the
collection.

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1001283]##<table>

[#50561100_pgfId-1001284]## <c:forEach var=âcustomerâ
items=â$\{customers}â> +
<tr><td>$\{customer}</td></tr>

[#50561100_pgfId-1001431]## </c:forEach>

[#50561100_pgfId-1001285]##</table>

|===

[#50561100_pgfId-1001119]##The <c:forEach> action has the following
features:

[#50561100_pgfId-1001438]##Supports all standard J2SEâ¢ platform
collection types.

[#50561100_pgfId-1003610]##A page author therefore does not have to
worry about the specific type of the collection of objects to iterate
over (see link:jstl.htm#50561100_53454[See Collections of Objects to
Iterate Over]).

[#50561100_pgfId-1001446]##Exports an object that holds the current item
of the iteration.

[#50561100_pgfId-1003719]##Normally, each object exposed by <c:forEach>
is an item of the underlying collection being iterated over. There are
two exceptions to this to facilitate access to the information contained
in arrays of primitive types, as well as in _Map_ objects (see
link:jstl.htm#50561100_71524[See Map]).

[#50561100_pgfId-1003720]##Exports an object that holds information
about the status of the iteration (see link:jstl.htm#50561100_16832[See
Iteration Status]).

[#50561100_pgfId-1001456]##Supports range attributes to iterate over a
subset of the original collection (see link:jstl.htm#50561100_87220[See
Range Attributes]).

[#50561100_pgfId-1001461]##Exposes an interface as well as a base
implementation class.

[#50561100_pgfId-1003862]##Developers can easily implement collaborating
subtags as well as their own iteration tags (see
link:jstl.htm#50561100_22050[See Tag Collaboration]).

[#50561100_pgfId-1001131]##<c:forEach> is the base iteration action in
JSTL. It handles the most common iteration cases conveniently. Other
iteration actions are also provided in the tag library to support
specific, specialized functionality not handled by <c:forEach> (e.g.
<c:forTokens> (link:jstl.htm#50561100_50484[See <c:forTokens>]) and
<x:forEach> (link:jstl.htm#50561106_36700[See <x:forEach>])). Developers
can also easily extend the behavior of this base iteration action to
customize it according to an application's specific needs.

======= [#50561100_pgfId-1003766]##[#50561100_53454]##Collections of Objects to Iterate Over

[#50561100_pgfId-1003769]##A large number of collection types are
supported by <c:forEach>, including all implementations of
_java.util.Collection_ (includes _List_ , _LinkedList_ , _ArrayList_ ,
_Vector_ , _Stack_ , _Set),_ and _java.util.Map (_ includes _HashMap_ ,
_Hashtable_ , _Properties_ , _Provider_ , _Attributes_ ).

[#50561100_pgfId-1003810]##Arrays of objects as well as arrays of
primitive types (e.g. _int_ ) are also supported. For arrays of
primitive types, the current item for the iteration is automatically
wrapped with its standard wrapper class (e.g. _Integer_ for _int_ ,
_Float_ for _float_ , etc.).

[#50561100_pgfId-1003773]##Implementations of _java.util.Iterator_ and
_java.util.Enumeration_ are supported as well but these must be used
with caution. _Iterator_ and _Enumeration_ objects are not resettable so
they should not be used within more than one iteration tag.

{empty}[#50561100_pgfId-1003781]##Deprecated: Finally,
_java.lang.String_ objects can be iterated over if the string represents
a list of comma separated values (e.g.
âMonday,Tuesday,Wednesday,Thursday,Fridayâ).link:#pgfId-1008877[3]

[#50561100_pgfId-1007971]##Absent from the list of supported types is
_java.sql.ResultSet_ (which includes _jakarta.sql.RowSet_ ). The reason
for this is that the SQL actions described in
link:jstl.htm#50561104_47767[See Overview] use the
_jakarta.servlet.jsp.jstl.sql.Result_ interface to access the data
returned from an SQL query. Class
_jakarta.servlet.jsp.jstl.sql.ResultSupport_ (see
link:jstl.htm#50561073_93849[See Java APIs]") allows business logic
developers to easily convert a _ResultSet_ object into a
_jakarta.servlet.jsp.jstl.sql.Result_ object, making life much easier for
a page author that needs to manipulate the data returned from a SQL
query.

======= [#50561100_pgfId-1001586]##[#50561100_71524]##Map

[#50561100_pgfId-1001167]##If the _items_ attribute is of type
_java.util.Map_ , then the current item will be of type
_java.util.Map.Entry_ , which has the following two properties:

[#50561100_pgfId-1001169]## _key_ - the key under which this item is
stored in the underlying _Map_

[#50561100_pgfId-1001615]## _value_ - the value that corresponds to this
key

[#50561100_pgfId-1001175]##The following example uses <c:forEach> to
iterate over the values of a _Hashtable_ :

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1001627]##<c:forEach var="entry"
items="$\{myHashtable}">

[#50561100_pgfId-1001628]## Next element is $\{entry.value}/>

[#50561100_pgfId-1001638]##</c:forEach>

|===

======= [#50561100_pgfId-1001181]##[#50561100_16832]##Iteration Status

[#50561100_pgfId-1001665]##<c:forEach> also exposes information relative
to the iteration taking place. The example below creates an HTML table
with the first column containing the position of the item in the
collection, and the second containing the name of the product.

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1001675]##<table>

[#50561100_pgfId-1001682]## <c:forEach var=âproductâ
items=â$\{products}â

[#50561100_pgfId-1008221]## varStatus=âstatusâ>

[#50561100_pgfId-1001676]## <tr>

[#50561100_pgfId-1001689]## <td>$\{status.count}â</td>

[#50561100_pgfId-1001690]## <td>$\{product.name}â</td>

[#50561100_pgfId-1001691]## </tr>

[#50561100_pgfId-1001677]## </c:forEach>

[#50561100_pgfId-1001692]##</table>

|===

[#50561100_pgfId-1003695]##See link:jstl.htm#50561073_93849[See Java
APIs]" for details on the _LoopTagStatus_ interface exposed by the
_varStatus_ attribute.

======= [#50561100_pgfId-1001196]##[#50561100_87220]##Range Attributes

[#50561100_pgfId-1001198]##A set of range attributes is available to
iterate over a subset of the collection of items. The _begin_ and _end_
indices can be specified, along with a _step_ . If the _items_ attribute
is not specified, then the value of the current item is set to the
integer value of the current index. In this example, _i_ would take
values from 100 to 110 (inclusive).

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1001708]##<c:forEach var=âiâ begin=â100â end=â110â>

[#50561100_pgfId-1001709]## $\{i}

[#50561100_pgfId-1001710]##</c:forEach>

|===

======= [#50561100_pgfId-1003370]##[#50561100_22050]##Tag Collaboration

[#50561100_pgfId-1003371]##Custom actions give developers the power to
provide added functionality to a JSP application without requiring the
page author to use Java code. In this example, an item of the iteration
is processed differently depending upon whether it is an odd or even
element.

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1003374]##<c:forEach var="product" items="$\{products}"
varStatus="status">

[#50561100_pgfId-1003376]## <c:choose>

[#50561100_pgfId-1004915]## <c:when test="$\{status.count % 2 == 0}">

[#50561100_pgfId-1003378]## even item

[#50561100_pgfId-1003379]## </c:when>

[#50561100_pgfId-1003380]## <c:otherwise>

[#50561100_pgfId-1003381]## odd item

[#50561100_pgfId-1005022]## </c:otherwise>

[#50561100_pgfId-1003383]## </c:choose>

[#50561100_pgfId-1003384]##</c:forEach>

|===

[#50561100_pgfId-1003385]##If this type of processing is common, it
could be worth providing custom actions that yield simpler code, as
shown below.

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1003388]##<c:forEach var="product"
items="$\{products}">

[#50561100_pgfId-1003389]## <acme:even>

[#50561100_pgfId-1003390]## even item

[#50561100_pgfId-1003391]## </acme:even>

[#50561100_pgfId-1003392]## <acme:odd>

[#50561100_pgfId-1003393]## odd item

[#50561100_pgfId-1003394]## </acme:odd>

[#50561100_pgfId-1003395]##</c:forEach>

|===

[#50561100_pgfId-1003396]##In order to make this possible, custom
actions like <acme:odd> and <acme:even> leverage the fact that
<c:forEach> supports implicit collaboration via the interface _LoopTag_
(see link:jstl.htm#50561073_93849[See Java APIs]").

[#50561100_pgfId-1003409]##The fact that <c:forEach> exposes an
interface also means that other actions with iterative behavior can be
developed using the same interface and will collaborate in the same
manner with nested tags. Class _LoopTagSupport_ (see
link:jstl.htm#50561073_93849[See Java APIs]") provides a solid base for
doing this.

======= [#50561100_pgfId-1008984]##Deferred Values

[#50561100_pgfId-1001235]##As of JSP 2.1, the new unified Expression
Language supports the concept of deferred expressions (using the #\{}
syntax), i.e. expressions whose evaluation is deferred to application
code (as opposed to immediate evaluation (using the $\{} syntax) where
the expression is evaluated immediately by the container). Deferred
expressions are used mostly with JavaServer Faces, a component-based UI
framework for the webtier.

[#50561100_pgfId-1008990]##In order for JSTL iteration tags to support
nested actions that access the iteration variable as a deferred-value,
the _items_ attribute must be specified as a deferred-value as well.

[#50561100_pgfId-1008997]##For example:

[width="100%",cols="100%",]
|===
a|
[#50561100_pgfId-1009013]##<c:forEach var="child"
items="#\{customer.children}">

[#50561100_pgfId-1009014]## <h:inputText value="#\{child.name}"/>

[#50561100_pgfId-1009022]##</c:forEach>

|===

[#50561100_pgfId-1009005]##Because a deferred-value is specified for
items, the iteration tag has access to the original expression and can
make the iteration variable available as a deferred-value with the
proper index into the _items_ collection. This deferred value can then
be evaluated properly by the code associated with the <h:inputText>
component.

======= [#50561100_pgfId-998144]##

image:jstl-23.gif[image]

[#50561100_91064]##<c:forEach>

[#50561100_pgfId-998728]##Repeats its nested body content over a
collection of objects, or repeats it a fixed number of times.

======= [#50561100_pgfId-998729]##Syntax

image:jstl-24.gif[image]

[#50561100_pgfId-1001866]## _Syntax 1: Iterate over a collection of
objects_

[#50561100_pgfId-998128]##<c:forEach [var=âvarNameâ] items=âcollectionâ

{empty}[#50561100_pgfId-1001786]## [varStatus=âvarStatusNameâ]

[#50561100_pgfId-1001747]## [begin=âbeginâ] [end=âendâ] [step=âstepâ]>

[#50561100_pgfId-998166]## body content

[#50561100_pgfId-999569]##</c:forEach>

[#50561100_pgfId-1001872]## _Syntax 2: Iterate a fixed number of times_

{empty}[#50561100_pgfId-1001842]##<c:forEach [var=âvarNameâ]

{empty}[#50561100_pgfId-1001843]## [varStatus=âvarStatusNameâ]

[#50561100_pgfId-1001844]## begin=âbeginâ end=âendâ [step=âstepâ]>

[#50561100_pgfId-1001845]## body content

[#50561100_pgfId-1001846]##</c:forEach>

======= [#50561100_pgfId-1005031]##Body Content

image:jstl-24.gif[image]

[#50561100_pgfId-1005119]##JSP. As long as there are items to iterate
over, the body content is processed by the JSP container and written to
the current _JspWriter_ .

======= [#50561100_pgfId-1005115]##Attributes

image:jstl-24.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561100_pgfId-1007638]##Name |[#50561100_pgfId-1007640]##Dyn
|[#50561100_pgfId-1007642]##Type |[#50561100_pgfId-1007644]##Description
|[#50561100_pgfId-1007646]## _var_ |[#50561100_pgfId-1007648]## _false_
|[#50561100_pgfId-1007650]## _String_ |[#50561100_pgfId-1007652]##Name
of the exported scoped variable for the current item of the iteration.
This scoped variable has nested visibility. Its type depends on the
object of the underlying collection.

|[#50561100_pgfId-1007654]## _items_ |[#50561100_pgfId-1007656]## _true_
|[#50561100_pgfId-1007658]##Any of the supported types described in
Section âDescriptionâ below. __ |[#50561100_pgfId-1007660]##Collection
of items to iterate over.

|[#50561100_pgfId-1007662]## _varStatus_ |[#50561100_pgfId-1007664]##
_false_ |[#50561100_pgfId-1007666]## _String_
|[#50561100_pgfId-1007668]##Name of the exported scoped variable for the
status of the iteration. Object exported is of type
_jakarta.servlet.jsp.jstl.core.LoopTagStatus_ . This scoped variable has
nested visibility.

|[#50561100_pgfId-1007670]## _begin_ |[#50561100_pgfId-1007672]## _true_
|[#50561100_pgfId-1007674]## _int_ a|
[#50561100_pgfId-1007676]##If _items_ specified:

[#50561100_pgfId-1007677]##Iteration begins at the item located at the
specified index. First item of the collection has index 0.

[#50561100_pgfId-1007678]##If _items_ not specified:

[#50561100_pgfId-1007679]##Iteration begins with index set at the value
specified.

|[#50561100_pgfId-1007681]## _end_ |[#50561100_pgfId-1007683]## _true_
|[#50561100_pgfId-1007685]## _int_ a|
[#50561100_pgfId-1007687]##If _items_ specified:

[#50561100_pgfId-1007688]##Iteration ends at the item located at the
specified index (inclusive).

[#50561100_pgfId-1007689]##If _items_ not specified:

[#50561100_pgfId-1007690]##Iteration ends when index reaches the value
specified.

|[#50561100_pgfId-1007692]## _step_ |[#50561100_pgfId-1007694]## _true_
|[#50561100_pgfId-1007696]## _int_ |[#50561100_pgfId-1007698]##Iteration
will only process every _step_ items of the collection, starting with
the first one.
|===

======= [#50561100_pgfId-1007799]##Constraints

image:jstl-24.gif[image]

[#50561100_pgfId-1007800]##If specified, _begin_ must be >= 0.

[#50561100_pgfId-1007807]##If _end_ is specified and it is less than
_begin_ , the loop is simply not executed.

[#50561100_pgfId-1007822]##If specified, _step_ must be >= 1

======= [#50561100_pgfId-1008111]##Null & Error Handling

image:jstl-24.gif[image]

[#50561100_pgfId-1008116]##If _items_ is null, it is treated as an empty
collection, i.e., no iteration is performed.

======= [#50561100_pgfId-1007851]##Description

image:jstl-24.gif[image]

[#50561100_pgfId-1007852]##If _begin_ is greater than or equal to the
size of _items_ , no iteration is performed.

[#50561100_pgfId-1007856]##Collections Supported & Current Item

[#50561100_pgfId-1007853]##The data types listed below must be supported
for _items_ . With syntax 1, each object exposed via the _var_ attribute
is of the type of the object in the underlying collection, except for
arrays of primitive types and maps (see below). With syntax 2, the
object exported is of type _Integer_ .

[#50561100_pgfId-1003655]##Arrays

[#50561100_pgfId-1005545]##This includes arrays of objects as well as
arrays of primitive types. For arrays of primitive types, the current
item for the iteration is automatically wrapped with its standard
wrapper class (e.g. _Integer_ for _int_ , _Float_ for _float_ , etc.)

[#50561100_pgfId-1005546]##Elements are processed in their indexing
order.

[#50561100_pgfId-1005547]##Implementation of _java.util.Collection_ .

[#50561100_pgfId-1005484]##An _Iterator_ object is obtained from the
collection via the _iterator()_ method, and the items of the collection
are processed in the order returned by that _Iterator_ object.

[#50561100_pgfId-1003659]##Implementation of _java.util.Iterator_ .

[#50561100_pgfId-1005506]##Items of the collection are processed in the
order returned by the _Iterator_ object.

[#50561100_pgfId-1003661]##Implementation of _java.util.Enumeration_ .

[#50561100_pgfId-1005516]##Items of the collection are processed in the
order returned by the _Enumeration_ object.

[#50561100_pgfId-1003663]##Implementation of _java.util.Map_

[#50561100_pgfId-1003991]##The object exposed via the _var_ attribute is
of type _Map.Entry_ .

[#50561100_pgfId-1005528]##A _Set_ view of the mappings is obtained from
the _Map_ via the _entrySet()_ method, from which an _Iterator_ object
is obtained via the _iterator()_ method. The items of the collection are
processed in the order returned by that _Iterator_ object.

[#50561100_pgfId-1003667]## _String_

[#50561100_pgfId-1003668]##The string represents a list of comma
separated values, where the comma character is the token delimiter.
Tokens are processed in their sequential order in the string.

[#50561100_pgfId-1009108]##[#50561100_15137]##Deferred Values

[#50561100_pgfId-1009116]##When a deferred-value is specified for the
_items_ attribute, the tag handler now adds at each iteration a mapping
for the _var_ attribute into the EL _VariableMapper_ .

[#50561100_pgfId-1009117]##Â 

[#50561100_pgfId-1009118]##Â 

[#50561100_pgfId-1009119]##Â 

[#50561100_pgfId-1009120]##Below are some implementation notes
illustrating how an iteration tag handler may process a deferred-value
specified for the _items_ attribute.

[width="100%",cols="100%",]
|===
|[#50561100_pgfId-1009364]##doStartTag() +
... +
// 'items' is a deferred-value +
// Get the current EL VariableMapper +
VariableMapper vm = jspContext.getELContext().getVariableMapper(); +
// Create an expression to be assigned to the variable +
// specified in the 'var' attribute. +
// 'index' is an iteration counter kept by the tag handler. +
myimpl.IndexedExpression expr = +
new myimpl.IndexExpression(getItems(), index); +
// Assign the expression to the variable specified in +
// the 'var' attribute, so any reference to that variable +
// will be replaced by the expression in subsequent EL +
// evaluations. +
oldMapping = vm.setVariable(getVar(), expr); +
... +
 +
doEndTag() +
... +
// restore the original state of the VariableMapper +
jspContext.getELContext().getVariableMapper().setVariable( +
getVar(), oldMapping); +
...
|===

[#50561100_pgfId-1009404]##The number of items referred to by the
_items_ attribute must be the same when Faces creates the component tree
and when JSP executes the iteration tag. Undefined behavior will result
if this is not the case.

======= [#50561100_pgfId-1009406]##

image:jstl-23.gif[image]

[#50561100_50484]##<c:forTokens>

[#50561100_pgfId-1003179]##Iterates over tokens, separated by the
supplied delimiters.

======= [#50561100_pgfId-1003180]##Syntax

image:jstl-24.gif[image]

[#50561100_pgfId-1003182]##<c:forTokens items="stringOfTokens"
delims="delimiters"

{empty}[#50561100_pgfId-1005455]## [var="varName"]

{empty}[#50561100_pgfId-1005462]## [varStatus="varStatusName"]

[#50561100_pgfId-1005465]## [begin="begin"] [end="end"] [step="step"]>

[#50561100_pgfId-1003185]## body content

[#50561100_pgfId-1003186]##</c:forTokens>

======= [#50561100_pgfId-1003193]##Body Content

image:jstl-24.gif[image]

[#50561100_pgfId-1005163]##JSP. As long as there are items to iterate
over, the body content is processed by the JSP container and written to
the current _JspWriter_ .

======= [#50561100_pgfId-1003287]##Attributes

image:jstl-24.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561100_pgfId-1007701]##Name |[#50561100_pgfId-1007703]##Dynamic
|[#50561100_pgfId-1007705]##Type |[#50561100_pgfId-1007707]##Description
|[#50561100_pgfId-1007709]## _var_ |[#50561100_pgfId-1007711]## _false_
|[#50561100_pgfId-1007713]## _String_ |[#50561100_pgfId-1007715]##Name
of the exported scoped variable for the current item of the iteration.
This scoped variable has nested visibility.

|[#50561100_pgfId-1007717]## _items_ |[#50561100_pgfId-1007719]## _true_
|[#50561100_pgfId-1007721]## _String_ |[#50561100_pgfId-1007723]##String
of tokens to iterate over.

|[#50561100_pgfId-1007725]## _delims_ |[#50561100_pgfId-1007727]##
_true_ |[#50561100_pgfId-1007729]## _String_
|[#50561100_pgfId-1007731]##The set of delimiters (the characters that
separate the tokens in the string).

|[#50561100_pgfId-1007733]## _varStatus_ |[#50561100_pgfId-1007735]##
_false_ |[#50561100_pgfId-1007737]## _String_
|[#50561100_pgfId-1007739]##Name of the exported scoped variable for the
status of the iteration. Object exported is of type
_jakarta.servlet.jsp.jstl.core.LoopTagStatus_ . This scoped variable has
nested visibility.

|[#50561100_pgfId-1007741]## _begin_ |[#50561100_pgfId-1007743]## _true_
|[#50561100_pgfId-1007745]## _int_ |[#50561100_pgfId-1007747]##Iteration
begins at the token located at the specified index. First token has
index 0.

|[#50561100_pgfId-1007749]## _end_ |[#50561100_pgfId-1007751]## _true_
|[#50561100_pgfId-1007753]## _int_ |[#50561100_pgfId-1007755]##Iteration
ends at the token located at the specified index (inclusive).

|[#50561100_pgfId-1007757]## _step_ |[#50561100_pgfId-1007759]## _true_
|[#50561100_pgfId-1007761]## _int_ |[#50561100_pgfId-1007763]##Iteration
will only process every _step_ tokens of the string, starting with the
first one.
|===

======= [#50561100_pgfId-1007865]##Constraints

image:jstl-24.gif[image]

[#50561100_pgfId-1007866]##If specified, _begin_ must be >= 0.

[#50561100_pgfId-1008852]##If _end_ is specified and it is less than
_begin_ , the loop is simply not executed.

[#50561100_pgfId-1007868]##If specified, _step_ must be >= 1

======= [#50561100_pgfId-1008152]##Null & Error Handling

image:jstl-24.gif[image]

[#50561100_pgfId-1008153]##If _items_ is null, it is treated as an empty
collection, i.e., no iteration is performed.

[#50561100_pgfId-1008158]##If _delims_ is null, _items_ is treated as a
single monolithic token. Thus, when _delims_ is null, <c:forTokens>
iterates exactly zero (if _items_ is also null) or one time.

======= [#50561100_pgfId-1004119]##Description

image:jstl-24.gif[image]

[#50561100_pgfId-1005264]##The tokens of the string are retrieved using
an instance of _java.util.StringTokenizer_ with arguments _items_ (the
string to be tokenized) and _delims_ (the delimiters).

[#50561100_pgfId-1005268]##Delimiter characters separate tokens. A token
is a maximal sequence of consecutive characters that are not delimiters.

[#50561100_pgfId-1009429]##Deferred Values

[#50561100_pgfId-1009430]##See Section "Deferred Values" for
<c:forEach>. Same comments apply here.

======= [#50561101_pgfId-1008293]##Â 

======= [#50561101_pgfId-1008302]##

image:jstl-25.gif[image]

URL Related Actions

======= [#50561101_pgfId-1008303]##core tag library

image:jstl-26.gif[image]

[#50561101_pgfId-1004744]##Linking, importing, and redirecting to URL
resources are features often needed in JSP pages. Since dealing with
URLs can often be tricky, JSTL offers a comprehensive suite of
URL-related actions to simplify these tasks.

======= [#50561101_pgfId-1010193]##

image:jstl-27.gif[image]

Hypertext Links

[#50561101_pgfId-1010369]##By using the HTML <A> element, a page author
can set a hypertext link as follows:

[#50561101_pgfId-1010431]## _<a href="/register.jsp">Register</a>_

[#50561101_pgfId-1010389]##If the link refers to a local resource and
session tracking is enabled, it is necessary to rewrite the URL so
session tracking can be used as a fallback, should cookies be disabled
at the client.

[#50561101_pgfId-1010388]##Morevoer, if query string parameters are
added to the URL, it is important that they be properly URL encoded. URL
encoding refers to the process of encoding special characters in a
string, according to the rules defined in RFC 2396. For example, a space
must be encoded in a URL string as a '+':

[#50561101_pgfId-1010467]##
_http://acme.com/app/choose?country=Dominican+Republic_

[#50561101_pgfId-1010429]##As shown in the following example, the
combination of the <c:url> and <c:param> actions takes care of all
issues related to URL rewriting and encoding: <c:url> rewrites a URL if
necessary, and <c:param> transparently encodes query string parameters
(both name and value).

[width="100%",cols="100%",]
|===
a|
[#50561101_pgfId-1010408]##<c:url value="http://acme.com/exec/register"
var="myUrl">

[#50561101_pgfId-1010409]## <c:param name="name"
value="$\{param.name}"/>

[#50561101_pgfId-1010410]## <c:param name="country"
value="$\{param.country}"/>

[#50561101_pgfId-1010411]##</c:url>

[#50561101_pgfId-1010478]## _<a href=â<c:out
value="$\{myUrl}"/>â>Register</a>_

|===

[#50561101_pgfId-1012746]##Another important feature of <c:url> is that
it transparently prepends the context path to context-relative URLs.
Assuming a context path of "/foo", the following example

[width="100%",cols="100%",]
|===
|[#50561101_pgfId-1012741]##<c:url value="/ads/logo.html"/> __
|===

[#50561101_pgfId-1012733]##yields the URL _/foo/ads/logo.html_ .

======= [#50561101_pgfId-1010387]##

image:jstl-27.gif[image]

Importing Resources

[#50561101_pgfId-1010517]##There is a wide variety of resources that a
page author might be interested in including and/or processing within a
JSP page. For instance, the example below shows how the content of the
README file at the FTP site of acme.com could be included within the
page.

[width="100%",cols="100%",]
|===
|[#50561101_pgfId-1010520]##<c:import url=âftp://ftp.acme.com/READMEâ/>
|===

[#50561101_pgfId-1010370]##In the JSP specification, a <jsp:include>
action provides for the inclusion of static and dynamic resources
located in the same context as the current page. This is a very
convenient feature that is widely used by page authors.

[#50561101_pgfId-1010371]##However, <jsp:include> falls short in
flexibility when page authors need to get access to resources that
reside outside of the web application. In many situations, page authors
have the need to import the content of Internet resources specified via
an absolute URL. Moreover, as sites grow in size, they may have to be
implemented as a set of web applications where importing resources
across web applications is a requirement.

[#50561101_pgfId-1010372]##<jsp:include> also falls short in efficiency
when the content of the imported resource is used as the source for a
companion process/transformation action, because unnecessary buffering
occurs. In the example below, the <acme:transform> action uses the
content of the included resource as the input of its transformation.
<jsp:include> reads the content of the response, writes it to the body
content of the enclosing <acme:transform>, which then re-reads the exact
same content. It would be more efficient if <acme:transform> could
access the input source directly and avoid the buffering involved in the
body content of <acme:transform>.

[width="100%",cols="100%",]
|===
a|
[#50561101_pgfId-1010375]##<acme:transform>

[#50561101_pgfId-1010376]## <jsp:include page=â/exec/employeesListâ/> +
</acme:transform>

|===

[#50561101_pgfId-1010527]##The main motivation behind <c:import> is to
address these shortcomings by providing a simple, straightforward
mechanism to access resources that can be specified via a URL. If
accessing a resource requires specifying more arguments, then a protocol
specific action (e.g. an <http> action) should be used for that purpose.
JSTL does not currently address these protocol-specific elements but may
do so in future releases.

======= [#50561101_pgfId-1010576]##URL

[#50561101_pgfId-1010565]##The _url_ attribute is used to specify the
URL of the resource to import. It can either be an absolute URL (i.e.
one that starts with a protocol followed by a colon), a relative URL
used to access a resource within the same context, or a relative URL
used to access a resource within a foreign context. The three different
types of URL are shown in the sample code below.

[width="100%",cols="100%",]
|===
a|
[#50561101_pgfId-1010503]##<%-- import a resource with an absolute URL
--%>

[#50561101_pgfId-1010504]## _<c:import
url=âhttp://acme.com/exec/customers?country=Japan/>_

[#50561101_pgfId-1010505]##<%-- import a resource with a relative URL -
same context --%>

[#50561101_pgfId-1010506]##<c:import url=â/copyright.htmlâ/>

[#50561101_pgfId-1010507]##<%-- import a resource with a relative URL -
foreign context --%>

[#50561101_pgfId-1010508]##<c:import url=â/logo.htmlâ
context=â/masterâ/>

|===

======= [#50561101_pgfId-1010583]##Exporting an object: String or Reader

[#50561101_pgfId-1010584]##By default, the content of an imported
resource is included inline into the JSP page.

[#50561101_pgfId-1010585]##It is also possible to make the content of
the resource available in two different ways: as a _String_ object
(attribute _var_ ), or as a _Reader_ object (attribute _varReader_ ).
Process or Transform tags can then access the resource's content through
that exported object as shown in the following example.

[width="100%",cols="100%",]
|===
a|
[#50561101_pgfId-1010588]##<%-- Export the content of the URL resource
as a String --%>

[#50561101_pgfId-1010589]##<c:import
url=âhttp://acme.com/exec/customers?country=USA"

[#50561101_pgfId-1010590]## var="customers"/>

[#50561101_pgfId-1010591]##<acme:notify in=â$\{customers}â/>

[#50561101_pgfId-1010592]##<%-- Export the content of the URL resource
as a Reader --%>

[#50561101_pgfId-1010593]##<c:import
url=âhttp://acme.com/exec/customers?country=USA"

[#50561101_pgfId-1010594]## varReader="customers">

[#50561101_pgfId-1010595]## <acme:notify in=â$\{customers}â/>

[#50561101_pgfId-1010596]##</c:import>

|===

[#50561101_pgfId-1010597]##Exporting the resource as a _String_ object
caches its content and makes it reusable.

[#50561101_pgfId-1010598]##If the imported content is large, some
performance benefits may be achieved by exporting it as a _Reader_
object since the content can be accessed directly without any buffering.
However, the performance benefits are not guaranteed since the readerâs
support is implementation dependent. It is also important to note that
the _varReader_ scoped variable has nested visibility; it can only be
accessed within the body content of <c:import>.

======= [#50561101_pgfId-1010604]##URL Encoding

[#50561101_pgfId-1010605]##Just as with <c:url>, <c:param> can be nested
within <c:import> to encode query string parameters.

======= [#50561101_pgfId-1010622]##Networking Properties

[#50561101_pgfId-1010623]##If the web container executes behind a
firewall, some absolute URL resources may be inaccessible when using
<c:import>. To provide access to these resources, the JVM of the
container should be started with the proper networking properties (e.g.
_proxyHost_ , _proxyPort_ ). More details can be found in the Java 2
SDK, Standard Edition Documentation (Networking Features â Networking
Properties).

[#50561101_pgfId-1010564]##Â 

======= [#50561101_pgfId-1010541]##

image:jstl-27.gif[image]

HTTP Redirect

[#50561101_pgfId-1012778]##<c:redirect> completes the arsenal of URL
related actions to support an HTTP redirect to a specific URL. For
example:

[width="100%",cols="100%",]
|===
|[#50561101_pgfId-1012777]##<c:redirect url="http://acme.com/register"/>
|===

======= [#50561101_pgfId-998144]##

image:jstl-27.gif[image]

<c:import>

[#50561101_pgfId-998728]##Imports the content of a URL-based resource.

======= [#50561101_pgfId-998729]##Syntax

image:jstl-28.gif[image]

[#50561101_pgfId-1005546]## _Syntax 1: Resource content inlined or
exported as a String object_

{empty}[#50561101_pgfId-998128]##<c:import url=âurlâ [context=âcontextâ]

{empty}[#50561101_pgfId-1004975]## [var=âvarNameâ]
[scope=â\{page|request|session|application}â]

[#50561101_pgfId-1005533]## [charEncoding=âcharEncodingâ]>

[#50561101_pgfId-1007508]## optional body content for <c:param> subtags

[#50561101_pgfId-1007509]##</c:import>

[#50561101_pgfId-1005550]## _Syntax 2: Resource content exported as a
Reader object_

{empty}[#50561101_pgfId-1005526]##<c:import url=âurlâ
[context=âcontextâ]

[#50561101_pgfId-1005527]## varReader=âvarReaderNameâ

[#50561101_pgfId-1007381]## [charEncoding=âcharEncodingâ]>

[#50561101_pgfId-1005540]## body content where varReader is consumed by
another action

[#50561101_pgfId-1005541]##</c:import>

======= [#50561101_pgfId-1000045]##Body Content

image:jstl-28.gif[image]

[#50561101_pgfId-1006823]##JSP. The body content is processed by the JSP
container and the result is written to the current _JspWriter_ .

======= [#50561101_pgfId-1000115]##Attributes

image:jstl-28.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561101_pgfId-1009846]##Name |[#50561101_pgfId-1009848]##Dynamic
|[#50561101_pgfId-1009850]##Type |[#50561101_pgfId-1009852]##Description
|[#50561101_pgfId-1009854]## _url_ |[#50561101_pgfId-1009856]## _true_
|[#50561101_pgfId-1009858]## _String_ |[#50561101_pgfId-1009860]##The
URL of the resource to import.

|[#50561101_pgfId-1009862]## _context_ |[#50561101_pgfId-1009864]##
_true_ |[#50561101_pgfId-1009866]## _String_
|[#50561101_pgfId-1009868]##Name of the context when accessing a
relative URL resource that belongs to a foreign context.

|[#50561101_pgfId-1009870]## _var_ |[#50561101_pgfId-1009872]## _false_
|[#50561101_pgfId-1009874]## _String_ |[#50561101_pgfId-1009876]##Name
of the exported scoped variable for the resourceâs content. The type of
the scoped variable is _String_ .

|[#50561101_pgfId-1009878]## _scope_ |[#50561101_pgfId-1009880]##
_false_ |[#50561101_pgfId-1009882]## _String_
|[#50561101_pgfId-1009884]##Scope for var.

|[#50561101_pgfId-1009886]## _charEncoding_ |[#50561101_pgfId-1009888]##
_true_ |[#50561101_pgfId-1009890]## _String_
|[#50561101_pgfId-1009892]##Character encoding of the content at the
input resource.

|[#50561101_pgfId-1009894]## _varReader_ |[#50561101_pgfId-1009896]##
_false_ |[#50561101_pgfId-1009898]## _String_
|[#50561101_pgfId-1009900]##Name of the exported scoped variable for the
resourceâs content. The type of the scoped variable is _Reader_ .
|===

======= [#50561101_pgfId-1010317]##Null & Error Handling

image:jstl-28.gif[image]

[#50561101_pgfId-1010318]##If _url_ is null, empty, or invalid, a
_JspException_ is thrown.

[#50561101_pgfId-1011156]##If _charEncoding_ is null or empty, it is
considered missing.

[#50561101_pgfId-1011512]##For internal resources:

[#50561101_pgfId-1011555]##If a _RequestDispatcher_ cannot be found for
the resource, throw a _JspException_ with the resource path included in
the message.

[#50561101_pgfId-1011591]##Otherwise, if the
_RequestDispatcher.include()_ method throws an _IOException_ or
_RuntimeException_ , throw a _JspException_ with the caught exception as
the root cause.

[#50561101_pgfId-1011634]##Otherwise, if the
_RequestDispatcher.include()_ method throws a _ServletException_ , look
for a root cause.

[#50561101_pgfId-1011671]##If there's a root cause, throw a
_JspException_ with the root cause message included in the message and
the original root cause as the _JspException_ root cause.

[#50561101_pgfId-1011692]##Otherwise, same as b).

[#50561101_pgfId-1011971]##Otherwise, if the resource invoked through
_RequestDispatcher.include()_ method sets a response status code other
than 2xx (i.e. 200-299, the range of success codes in the HTTP response
codes), throw a _JspException_ with the path and status code in the
message.

[#50561101_pgfId-1011730]##For external resources

[#50561101_pgfId-1011741]##If the _URLConnection_ class throws an
_IOException_ or a _RuntimeException_ , throw a _JspException_ with the
message from the original exception included in the message and the
original exception as the root cause.

[#50561101_pgfId-1011781]##For an _HttpURLConnection_ , if the response
status code is other than 2xx (i.e. 200-299, the range of success codes
in the HTTP response codes), throw a _JspException_ with the path and
status code in the message.

======= [#50561101_pgfId-1003445]##Description

image:jstl-28.gif[image]

[#50561101_pgfId-1003969]##Using syntax 1, the content of the resource
is by default written to the current _JspWriter_ . If _var_ is
specified, the content of the resource is instead exposed as a _String_
object.

[#50561101_pgfId-1010019]##Using syntax 2, the content of the resource
is exported as a _Reader_ object. The use of the _varReader_ attribute
comes with some restrictions.

[#50561101_pgfId-1010059]##It is the responsibility of the <c:import>
tag handler to ensure that if it exports a _Reader_ , this _Reader_ is
properly closed by the time the end of the page is
reachedlink:#pgfId-1010105[4]. Because of this requirement, JSTL defines
the exported _Reader_ as having nested visibility: it may not currently
be accessed after the end-tag for the <c:import>
actionlink:#pgfId-1010114[5]. Implementations that use JSP 1.2
tag-extension API will likely need to implement _TryCatchFinally_ with
their <c:import> tag handlers and close the exported Reader in
_doFinally()_ .

[#50561101_pgfId-1010015]##It is also illegal to use nested <c:param>
tags with syntax 2. Since the exposed _Reader_ must be immediately
available to the action's body, the connection to the resource must be
established within the start element of the action. It is therefore
impossible for nested <c:param> actions to modify the URL of the
resource to be accessed, thus their illegality with syntax 2. In such a
situation, <c:url> may be used to build a URL with query string
parameterslink:#pgfId-1013210[6]. <c:import> will remove any session id
information if necessary (see link:jstl.htm#50561101_50484[See
<c:url>]).

[#50561101_pgfId-1003970]##Character Encoding

[#50561101_pgfId-1013069]##<c:import> exposes a _String_ or _Reader_
object, both of which are sequences of text characters. It is possible
to specify the character encoding of the input resource via the
_charEncoding_ attribute. The values supported for _charEncoding_ are
the same as the ones supported by the constructor of the Java class
_InputStreamReader_ .

[#50561101_pgfId-1007345]##If the character encoding is not specified,
the following rules apply:

[#50561101_pgfId-1013111]##If _URLConnection.getContentType()_ has a
non-null result, the character set is retrieved from
_URLConnection.getContentType()_ by parsing this method's result
according to RFC 2045 (section 5.1).

[#50561101_pgfId-1013114]##If this method's result does not include a
character set, or if the character set causes
_InputStreamReader(InputStream in, String charsetName)_ to throw an
_UnsupportedEncodingException_ , then use ISO-8859-1 (which is the
default value of _charset_ for the _contentType_ attribute of the JSP
_page_ directive).

[#50561101_pgfId-1007296]##Note that the _charEncoding_ attribute should
normally only be required when accessing absolute URL resources where
the protocol is not HTTP, and where the encoding is not ISO-8859-1.

[#50561101_pgfId-1005819]##Also, when dealing with relative URLs and the
HTTP protocol, if the target resource declares a content encoding but
proceeds to write a character invalid in that encoding, the treatment of
that character is undefined.

[#50561101_pgfId-1005693]##Relative and Absolute URLs

[#50561101_pgfId-1005699]##The exact semantics of the <c:import> tag
depends on what type of URL is being accessed.

[#50561101_pgfId-1005701]##Relative URL â same context

[#50561101_pgfId-1005703]##This is processed in the exact same way as
the include action of the JSP specification (<jsp:include>). The
resource belongs to the same web application as the including page and
it is specified as a relative URL.

[#50561101_pgfId-1007488]##As specified in the JSP specification, a
relative URL may either be a context-relative path, or a page-relative
path. A context-relative path is a path that starts with a "/". It is to
be interpreted as relative to the application to which the JSP page
belongs. A page-relative path is a path that does not start with a "/".
It is to be interpreted as relative to the current JSP page, as defined
by the rules of inclusion of the <jsp:include> action in the JSP
specification.

[#50561101_pgfId-1012332]##The semantics of importing a resource
specified with a relative URL in the same context are the same as an
include performed by a _RequestDispatcher_ as defined in the Servlet
specification. This means that the whole environment of the importing
page is available to the target resource (including request and session
attributes, as well as request parameters of the importing page).

[#50561101_pgfId-1005711]##Relative URL â foreign context

[#50561101_pgfId-1005714]##The resource belongs to a foreign context
(web application) hosted under the same container as the importing page.
The context name for the resource is specified via attribute _context_ .

[#50561101_pgfId-1005782]##The relative URL must be context-relative
(i.e. must start with a "/") since the including page does not belong to
the same context. Similarly, the context name must also start with a
"/".

[#50561101_pgfId-1005720]##The semantics of importing a resource
specified with a relative URL in a foreign context are the same as an
include performed by a _RequestDispatcher_ on a foreign context as
defined in the Servlet specification. This means that only the request
environment of the importing page is available to the target resource.

[#50561101_pgfId-1005722]##It is important to note that importing
resources in foreign contexts may not work in all containers. A security
conscious environment may not allow access to foreign contexts. As a
workaround, a foreign context resource can also be accessed using an
absolute URL. However, it is more efficient to use a relative URL
because the resource is then accessed using _RequestDispatcher_ defined
by the Servlet API.

[#50561101_pgfId-1012933]##Relative URL â query parameter aggregation
rules

[#50561101_pgfId-1013023]##The query parameter aggregation rules work
the same way they do with <jsp:include>; the original parameters are
augmented with the new parameters, with new values taking precedence
over existing values when applicable. The scope of the new parameters is
the import call; the new parameters (and values) will not apply after
the import. The behavior is therefore the same as the one defined for
the _include()_ method of _RequestDispatcher_ in the Servlet
specification.

[#50561101_pgfId-1005728]##Absolute URL

[#50561101_pgfId-1011201]##Absolute URLs are retrieved as defined by the
_java.net.URL_ and _java.net.URLConnection_ classes. The <c:import>
action therefore supports at a minimum the protocols offered in the J2SE
1.2 platform for absolute URLs. More protocols can be available to a web
application, but this will depend on the the class libraries made
available to the web application by the platform the container runs on.

[#50561101_pgfId-1005660]##When using an absolute URL to import a
resource, none of the current execution environment (e.g. request and
session attributes) is made available to the target resource, even if
that absolute URL resolves to the same host and context path. Therefore,
the request parameters of the importing page are not propagated to the
target absolute URL.

[#50561101_pgfId-1012989]##When importing an external resource using the
HTTP protocol, <c:import> behaves according to the semantics of a GET
request sent via the _java.net.HttpURLConnection_ class, with
_setFollowRedirects_ set to true.

======= [#50561101_pgfId-1003447]##

image:jstl-27.gif[image]

[#50561101_50484]##<c:url>

[#50561101_pgfId-1003179]##Builds a URL with the proper rewriting rules
applied.

======= [#50561101_pgfId-1010640]##Syntax

image:jstl-28.gif[image]

[#50561101_pgfId-1010641]## _Syntax 1: Without body content_

{empty}[#50561101_pgfId-1010642]##<c:url value=âvalueâ
[context=âcontextâ]

[#50561101_pgfId-1006413]## [var=âvarNameâ]
[scope=â\{page|request|session|application}â]/>

[#50561101_pgfId-1005862]## _Syntax 2: With body content to specify
query string parameters_

{empty}[#50561101_pgfId-1012191]##<c:url value=âvalueâ
[context=âcontextâ]

[#50561101_pgfId-1006673]## [var=âvarNameâ]
[scope=â\{page|request|session|application}â]>

[#50561101_pgfId-1007553]## <c:param> subtags

[#50561101_pgfId-1005866]##</c:url>

======= [#50561101_pgfId-1006855]##Body Content

image:jstl-28.gif[image]

[#50561101_pgfId-1007138]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561101_pgfId-1006899]##Attributes

image:jstl-28.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561101_pgfId-1009916]##Name |[#50561101_pgfId-1009918]##Dynamic
|[#50561101_pgfId-1009920]##Type |[#50561101_pgfId-1009922]##Description
|[#50561101_pgfId-1009924]## _value_ |[#50561101_pgfId-1009926]## _true_
|[#50561101_pgfId-1009928]## _String_ |[#50561101_pgfId-1009930]##URL to
be processed.

|[#50561101_pgfId-1012217]## _context_ |[#50561101_pgfId-1012219]##
_true_ |[#50561101_pgfId-1012221]## _String_
|[#50561101_pgfId-1012223]##Name of the context when specifying a
relative URL resource that belongs to a foreign context.

|[#50561101_pgfId-1009932]## _var_ |[#50561101_pgfId-1009934]## _false_
|[#50561101_pgfId-1009936]## _String_ |[#50561101_pgfId-1009938]##Name
of the exported scoped variable for the processed url. The type of the
scoped variable is _String_ .

|[#50561101_pgfId-1009940]## _scope_ |[#50561101_pgfId-1009942]##
_false_ |[#50561101_pgfId-1009944]## _String_
|[#50561101_pgfId-1009946]##Scope for var.
|===

======= [#50561101_pgfId-1010692]##Description

image:jstl-28.gif[image]

[#50561101_pgfId-1011030]##<c:url> processes a URL and rewrites it if
necessary. Only relative URLs are rewritten. Absolute URLs are not
rewritten to prevent situations where an external URL could be rewritten
and expose the session ID. A consequence is that if a page author wants
session tracking, only relative URLs must be used with <c:url> to link
to local resources.

[#50561101_pgfId-1011020]##The rewriting must be performed by calling
method _encodeURL()_ of the Servlet API.

[#50561101_pgfId-1010967]##If the URL contains characters that should be
encoded (e.g. space), it is the user's responsibility to encode them.

[#50561101_pgfId-1012451]##The URL must be either an absolute URL
starting with a scheme (e.g. "http://server/context/page.jsp") or a
relative URL as defined by JSP 1.2 in JSP.2.2.1 "Relative URL
Specification". As a consequence, an implementation must prepend the
context path to a URL that starts with a slash (e.g. "/page2.jsp") so
that such URLs can be properly interpreted by a client browser.

[#50561101_pgfId-1012166]##Specifying a URL in a foreign context is
possible through the _context_ attribute. The URL specified must must
start with a / (since this is a context-relative URL). The context name
must also start with a / (since this is a standard way to identify a
context).

[#50561101_pgfId-1011010]##Because the URL built by this action may
include session information as a path parameter, it may fail if used
with _RequestDispatcher_ of the Servlet API. The consumer of the
rewritten URL should therefore remove the session ID information prior
to calling _RequestDispatcher_ . This situation is properly handled in
<c:import>.

[#50561101_pgfId-1005910]##By default, the result of the URL processing
is written to the current _JspWriter_ . It is also possible to export
the result as a JSP scoped variable defined via the _var_ and _scope_
attributes.

[#50561101_pgfId-1007583]##<c:param> subtags can also be specified
within the body of <c:url> for adding to the URL query string
parameters, which will be properly encoded if necessary.

======= [#50561101_pgfId-1010744]##

image:jstl-27.gif[image]

<c:redirect>

[#50561101_pgfId-1010745]##Sends an HTTP redirect to the client.

======= [#50561101_pgfId-1010746]##Syntax

image:jstl-28.gif[image]

[#50561101_pgfId-1010747]## _Syntax 1: Without body content_

[#50561101_pgfId-1010748]##<c:redirect url=âvalueâ [context=âcontextâ]/>

[#50561101_pgfId-1010752]## _Syntax 2: With body content to specify
query string parameters_

[#50561101_pgfId-1010840]##<c:redirect url=âvalueâ [context=âcontextâ]>

[#50561101_pgfId-1010841]## <c:param> subtags

[#50561101_pgfId-1010842]##</c:redirect>

======= [#50561101_pgfId-1010758]##Body Content

image:jstl-28.gif[image]

[#50561101_pgfId-1010759]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561101_pgfId-1010793]##Attributes

image:jstl-28.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561101_pgfId-1010762]##Name |[#50561101_pgfId-1010764]##Dyn
|[#50561101_pgfId-1010766]##Type |[#50561101_pgfId-1010768]##Description
|[#50561101_pgfId-1010770]## _url_ |[#50561101_pgfId-1010772]## _true_
|[#50561101_pgfId-1010774]## _String_ |[#50561101_pgfId-1010776]##The
URL of the resource to redirect to.

|[#50561101_pgfId-1012079]## _context_ |[#50561101_pgfId-1012081]##
_true_ |[#50561101_pgfId-1012083]## _String_
|[#50561101_pgfId-1012085]##Name of the context when redirecting to a
relative URL resource that belongs to a foreign context.
|===

======= [#50561101_pgfId-1010802]##Description

image:jstl-28.gif[image]

[#50561101_pgfId-1011995]##This action sends an HTTP redirect response
to the client and aborts the processing of the page by returning
_SKIP_PAGE_ from _doEndTag()_ .

[#50561101_pgfId-1012487]##The URL must be either an absolute URL
starting with a scheme (e.g. "http://server/context/page.jsp") or a
relative URL as defined by JSP 1.2 in JSP.2.2.1 "Relative URL
Specification". As a consequence, an implementation must prepend the
context path to a URL that starts with a slash (e.g. "/page2.jsp") if
the behavior is implemented using the
_HttpServletResponse.sendRedirect()_ method.

[#50561101_pgfId-1012096]##Redirecting to a resource in a foreign
context is possible through the _context_ attribute. The URL specified
must must start with a "/" (since this is a context-relative URL). The
context name must also start with a "/" (since this is a standard way to
identify a context).

[#50561101_pgfId-1012326]##<c:redirect> follows the same rewriting rules
as defined for <c:url>.

======= [#50561101_pgfId-1012238]##

image:jstl-27.gif[image]

<c:param>

[#50561101_pgfId-1012239]##Adds request parameters to a URL. Nested
action of <c:import>, <c:url>, <c:redirect>.

======= [#50561101_pgfId-1012240]##Syntax

image:jstl-28.gif[image]

[#50561101_pgfId-1012241]## _Syntax 1: Parameter value specified in
attribute âvalueâ_

[#50561101_pgfId-1012242]##<c:param name=ânameâ value=â _value_ â/>

[#50561101_pgfId-1012243]## _Syntax 2: Parameter value specified in the
body content_

[#50561101_pgfId-1012244]##<c:param name=ânameâ>

[#50561101_pgfId-1012245]## parameter value

[#50561101_pgfId-1012246]##</c:param>

======= [#50561101_pgfId-1012247]##Body Content

image:jstl-28.gif[image]

[#50561101_pgfId-1012248]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561101_pgfId-1012274]##Attributes

image:jstl-28.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561101_pgfId-1012251]##Name |[#50561101_pgfId-1012253]##Dynamic
|[#50561101_pgfId-1012255]##Type |[#50561101_pgfId-1012257]##Description
|[#50561101_pgfId-1012259]## _name_ |[#50561101_pgfId-1012261]## _true_
|[#50561101_pgfId-1012263]## _String_ |[#50561101_pgfId-1012265]##Name
of the query string parameter.

|[#50561101_pgfId-1012267]## _value_ |[#50561101_pgfId-1012269]## _true_
|[#50561101_pgfId-1012271]## _String_ |[#50561101_pgfId-1012273]##Value
of the parameter.
|===

======= [#50561101_pgfId-1012275]##Null & Error Handling

image:jstl-28.gif[image]

[#50561101_pgfId-1012276]##If _name_ is null or empty, no action is
performed. It is not an error.

[#50561101_pgfId-1012277]##If _value_ is null, it is processed as an
empty value.

======= [#50561101_pgfId-1012278]##Description

image:jstl-28.gif[image]

[#50561101_pgfId-1012279]##Nested action of <c:import>, <c:url>,
<c:redirect> to add request parameters to a URL. <c:param> also URL
encodes both _name_ and _value_ .

[#50561101_pgfId-1012280]##One might argue that this is redundant given
that a URL can be constructed to directly specify the query string
parameters. For example:

[width="100%",cols="100%",]
|===
a|
[#50561101_pgfId-1012283]##<c:import url=â/exec/doItâ>

[#50561101_pgfId-1012284]## <c:param name=âactionâ value=âregisterâ/>

[#50561101_pgfId-1012285]##</c:import>

|===

[#50561101_pgfId-1012289]##is the same as:

[width="100%",cols="100%",]
|===
|[#50561101_pgfId-1012288]##<c:import url=â/exec/doIt?action=registerâ/>
|===

[#50561101_pgfId-1012290]##It is indeed redundant, but is consistent
with <jsp:include>, which supports nested <jsp:param> sub-elements.
Moreover, it has been designed such that the attributes _name_ and
_value_ are automatically URL encoded.

[#50561101_pgfId-1012061]##Â 

[#50561101_pgfId-1012004]##Â 

[#50561101_pgfId-1011993]##Â 

======= [#50561102_pgfId-1017218]##Â 

======= [#50561102_pgfId-1017219]##

image:jstl-29.gif[image]

Internationalization (i18n) Actions

======= [#50561102_pgfId-1001084]##I18n-capable formatting tag library

image:jstl-30.gif[image]

[#50561102_pgfId-1010690]##With the explosion of application development
based on web technologies, and the deployment of such applications on
the Internet, applications must be able to adapt to the languages and
formatting conventions of their clients. This means that page authors
must be able to tailor page content according to the clientâs language
and cultural formatting conventions. For example, the number 345987.246
should be formatted as 345 987,246 for France, 345.987,246 for Germany,
and 345,987.246 for the U.S.

[#50561102_pgfId-1010691]##The process of designing an application (or
page content) so that it can be adapted to various languages and regions
without requiring any engineering changes is known as
internationalization, or i18n for short. Once a web application has been
internationalized, it can be adapted for a number of regions or
languages by adding locale-specific components and text. This process is
known as localization.

[#50561102_pgfId-1010696]##There are two approaches to
internationalizing a web application:

[#50561102_pgfId-1010697]##Provide a version of the JSP pages in each of
the target locales and have a controller servlet dispatch the request to
the appropriate page (depending on the requested locale). This approach
is useful if large amounts of data on a page or an entire web
application need to be internationalized.

[#50561102_pgfId-1010698]##Isolate any locale-sensitive data on a page
(such as error messages, string literals, or button labels) into
resource bundles, and access the data via i18n actions, so that the
corresponding translated message is fetched automatically and inserted
into the page.

[#50561102_pgfId-1010699]##The JSTL i18n-capable formatting actions
support either approach: They assist page authors with creating
internationalized page content that can be localized into any locale
available in the JSP container (this addresses the second approach), and
allow various data elements such as numbers, currencies, dates and times
to be formatted and parsed in a locale-sensitive or customized manner
(this may be used in either approach).

[#50561102_pgfId-1010703]##JSTLâs i18n actions are covered in this
chapter. The formatting actions are covered in
link:jstl.htm#50561103_22536[See] .

[#50561102_pgfId-1010694]##Â 

======= [#50561102_pgfId-999293]##

image:jstl-31.gif[image]

Overview

[#50561102_pgfId-1007239]##There are three key concepts associated with
internationalization: locale, resource bundle, and basename.

[#50561102_pgfId-1010726]##A locale represents a specific geographical,
political, or cultural region. A locale is identified by a language
code, along with an optional country codelink:#pgfId-1014741[7].

[#50561102_pgfId-1010738]##Language code

[#50561102_pgfId-1010753]##The language code is the lower-case
two-letter code as defined by ISO-639 (e.g. âcaâ for Catalan, âzhâ for
Chinese). The full list of these codes can be found at a number of
sites, such as: +
http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt

[#50561102_pgfId-1010743]##Country code

[#50561102_pgfId-1011692]##The country code is the upper-case two-letter
code as defined by ISO-3166 (e.g. âITâ for Italy, âCRâ for Costa Rica).
The full list of these codes can be found at a number of sites, such
as: +
http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html.

[#50561102_pgfId-1020089]##Note that the semantics of locales in JSTL
are the same as the ones defined by the class _java.util.Locale_ . A
consequence of this is that, as of J2SE 1.4, new language codes defined
in ISO 639 (e.g. _he_ , _yi_ , _id_ ) will be returned as the old codes
(e.g. _iw_ , _ji_ , _in_ ). See the documentation of the
_java.util.Locale_ class for more details.

[#50561102_pgfId-1017749]##A resource bundle contains locale-specific
objects. Each message in a resource bundle is associated with a key.
Since the set of messages contained in a resource bundle can be
localized for many locales, the resource bundles that translate the same
set of messages are identified by the same basename. A specific resource
bundle is therefore uniquely identified by combining its basename with a
locale.

[#50561102_pgfId-1012937]##For instance, a web application could define
the registration resource bundles with basename _Registration_ to
contain the messages associated with the registration portion of the
application. Assuming that French and English are the only languages
supported by the application, there will be two resource bundles:
_Registration_fr_ (French language) and _Registration_en_ (English
language). Depending on the locale associated with the client request,
the key âgreetingâ could be mapped to the message âBonjourâ (French) or
âHelloâ (English).

======= [#50561102_pgfId-1010788]##<fmt:message>

[#50561102_pgfId-1012532]##It is possible to internationalize the JSP
pages of a web application simply by using the <fmt:message> action as
shown below:

[width="100%",cols="100%",]
|===
|[#50561102_pgfId-1011802]##<fmt:message key="greeting"/>
|===

[#50561102_pgfId-1012965]##In this case, <fmt:message> leverages the
default i18n localization context, making it extremely simple for a page
author to internationalize JSP pages.

[#50561102_pgfId-1010814]##<fmt:message> also supports compound
messages, i.e. messages that contain one or more variables. Parameter
values for these variables may be supplied via one or more <fmt:param>
subtags (one for each parameter value). This procedure is referred to as
parametric replacement.

[width="100%",cols="100%",]
|===
a|
[#50561102_pgfId-1011739]##<fmt:message key="athletesRegistered">

[#50561102_pgfId-1011740]##<fmt:param>

[#50561102_pgfId-1011741]##<fmt:formatNumber value=â$\{athletesCount}â/>

[#50561102_pgfId-1011742]##</fmt:param>

[#50561102_pgfId-1011743]##</fmt:message>

|===

[#50561102_pgfId-1011858]##Depending on the locale, this example could
print the following messages:

[width="100%",cols="100%",]
|===
a|
[#50561102_pgfId-1011877]## french: Il y a 10 582 athletes enregistres.

[#50561102_pgfId-1011906]## english: There are 10,582 athletes
registered.

|===

======= [#50561102_pgfId-1012801]##

image:jstl-31.gif[image]

[#50561102_34784]##I18n Localization Context

[#50561102_pgfId-1015399]##I18n actions use an i18n localization context
to localize their data. An i18n localization context contains two pieces
of information: a resource bundle and the locale for which the resource
bundle was found.

[#50561102_pgfId-1018761]##An i18n action determine its i18n
localization context in one of several ways, which are described in
order of precedence:

[#50561102_pgfId-1015426]##<fmt:message> _bundle_ attribute

[#50561102_pgfId-1015437]##If attribute _bundle_ is specified in
<fmt:message>, the i18n localization context associated with it is used
for localization.

[#50561102_pgfId-1015443]##<fmt:bundle> action

[#50561102_pgfId-1015455]##If <fmt:message> actions are nested inside a
<fmt:bundle> action, the i18n localization context of the enclosing
<fmt:bundle> action is used for localization. The <fmt:bundle> action
determines the resource bundle of its i18n localization context
according to the resource bundle determination algorithm in
link:jstl.htm#50561102_94840[See Determinining the Resource Bundle for
an i18n Localization Context], using the basename attribute as the
resource bundle basename.

[#50561102_pgfId-1018336]##I18n default localization context

[#50561102_pgfId-1018412]##The i18n localization context whose resource
bundle is to be used for localization is specified via the
jakarta.servlet.jsp.jstl.fmt.localizationContext configuration setting
(see link:jstl.htm#50561102_37988[See I18n Localization Context]). If
the configuration setting is of type _LocalizationContext_ (see
link:jstl.htm#50561073_93849[See Java APIs]â) its resource bundle
component is used for localization. Otherwise, the configuration setting
is of type _String_ , and the action establishes its own i18n
localization context whose resource bundle component is determined
according to the resource bundle determination algorithm in
link:jstl.htm#50561102_94840[See Determinining the Resource Bundle for
an i18n Localization Context], using the configuration setting as the
resource bundle basename.

[#50561102_pgfId-1015447]##The example below shows how the various
localization contexts can be established to define the resource bundle
used for localization.

[width="100%",cols="100%",]
|===
a|
[#50561102_pgfId-1013460]##<%-- Use configuration setting --%> +
<fmt:message key="Welcome" />

[#50561102_pgfId-1013462]##Â 

[#50561102_pgfId-1013463]##<fmt:setBundle basename="Errors"
var="errorBundle" />

[#50561102_pgfId-1013464]##<fmt:bundle basename="Greetings">

[#50561102_pgfId-1013465]##<%-- Localization context established by

[#50561102_pgfId-1014321]## parent <fmt:bundle> tag --%>

[#50561102_pgfId-1013466]##<fmt:message key="Welcome" />

[#50561102_pgfId-1013467]##<%-- Localization context established by
attribute _bundle_ --%>

[#50561102_pgfId-1013468]##<fmt:message key="WrongPassword"
bundle="$\{errorBundle}" />

[#50561102_pgfId-1013469]##</fmt:bundle>

|===

======= [#50561102_pgfId-1013382]##[#50561102_10405]##Preferred Locales

[#50561102_pgfId-1018491]##If the resource bundle of an i18n
localization context needs to be determined, it is retrieved from the
web applicationâs resources according to the algorithm described in
section Section 8.3. This algorithm requires two pieces of information:
the basename of the resource bundle (as described in the previous
section) and the preferred locales.

[#50561102_pgfId-1013388]##The method for setting the preferred locales
is characterized as either application-based or browser-based.

[#50561102_pgfId-1013389]##Application-based locale setting has priority
over browser-based locale setting. In this mode, the locale is set via
the _jakarta.servlet.jsp.jstl.fmt.locale_ configuration setting (see
link:jstl.htm#50561102_62564[See Locale]). Setting the locale this way
is useful in situations where an application lets its users pick their
preferred locale and then sets the scoped variable accordingly. This may
also be useful in the case where a clientâs preferred locale is
retrieved from a database and installed for the page using the
<fmt:setLocale> action.

[#50561102_pgfId-1013396]##The <fmt:setLocale> action may be used to set
the _jakarta.servlet.jsp.jstl.fmt.locale_ configuration variable as
follows:

[width="100%",cols="100%",]
|===
|[#50561102_pgfId-1013395]##<fmt:setLocale value=âen_USâ />
|===

[#50561102_pgfId-1013398]##In the browser-based locale setting, the
client determines via its browser settings which locale(s) should be
used by the web application. The action retrieves the clientâs locale
preferences by calling _ServletRequest.getLocales()_ on the incoming
request. This returns a list of the locales (in order of preference)
that the client wants to use.

[#50561102_pgfId-1014348]##Whether application- or browser-based locale
setting is used, an ordered list of preferred locales is fed into the
algorithm described in section link:jstl.htm#50561102_94840[See
Determinining the Resource Bundle for an i18n Localization Context] to
determine the resource bundle for an i18n localization context.

======= [#50561102_pgfId-1013192]##

image:jstl-31.gif[image]

[#50561102_94840]##Determinining the Resource Bundle for an i18n
Localization Context

[#50561102_pgfId-1014512]##Given a basename and an ordered set of
preferred locales, the resource bundle for an i18n localization context
is determined according to the algorithm described in this section.

[#50561102_pgfId-1019977]##Tthis algorithm is also exposed as a general
convenience method in the _LocaleSupport_ class (see
link:jstl.htm#50561073_93849[See Java APIs]â) so that it may be used by
any tag handler implementation that needs to produce localized messages.
For example, this is useful for exception messages that are intended
directly for user consumption on an error page.

======= [#50561102_pgfId-1015866]##[#50561102_30600]##Resource Bundle Lookup

[#50561102_pgfId-1016185]##Localization in JSTL is based on the same
mechanisms offered in the J2SE platform. Resource bundles contain
locale-specific objects, and when an i18n action requires a
locale-specific resource, it simply loads it from the appropriate
resource bundle.

[#50561102_pgfId-1016186]##The algorithm of
link:jstl.htm#50561102_49805[See Resource Bundle Determination
Algorithm] describes how the proper resource bundle is determined. This
algorithm calls for a resource bundle lookup, where an attempt is made
at fetching a resource bundle associated with a specific basename and
locale.

[#50561102_pgfId-1016089]##JSTL leverages the semantics of the
java.util.ResourceBundle method

[#50561102_pgfId-1015928]##getBundle(String basename, _java.util.Locale
locale)_

[#50561102_pgfId-1015931]##for resource bundle lookup, with one
important modification.

[#50561102_pgfId-1015973]##As stated in the documentation for
_ResourceBundle_ , a resource bundle lookup searches for classes and
properties files with various suffixes on the basis of:

======= [#50561102_pgfId-1015992]##The specified locale

[#50561102_pgfId-1016023]##The current default locale as returned by
_Locale.getDefault()_

[#50561102_pgfId-1016026]##The root resource bundle (basename)

[#50561102_pgfId-1017604]##In JSTL, the search is limited to the first
level; i.e. the specified locale. Steps 2 and 3 are removed so that
other locales may be considered before applying the JSTL fallback
mechanism described in link:jstl.htm#50561102_49805[See Resource Bundle
Determination Algorithm]. Only if no fallback mechanism exists, or the
fallback mechanism fails to determine a resource bundle, is the root
resource bundle considered.

[#50561102_pgfId-1016097]##Resource bundles are therefore searched in
the following order:

[#50561102_pgfId-1015976]##basename + "_" + language + "_" + country +
"_" + variant

[#50561102_pgfId-1016046]##basename + "_" + language + "_" + country

[#50561102_pgfId-1016052]##basename + "_" + language

======= [#50561102_pgfId-1016122]##[#50561102_49805]##Resource Bundle Determination Algorithm

[#50561102_pgfId-1016123]##Notes:

[#50561102_pgfId-1016135]##When there are multiple preferred locales,
they are processed in the order they were returned by
_ServletRequest.getLocales()_ .

[#50561102_pgfId-1016124]##The algorithm stops as soon as a resource
bundle has been selected for the localization context.

[#50561102_pgfId-1016125]##Step 1: Find a match within the ordered set
of preferred locales

[#50561102_pgfId-1016126]##A resource bundle lookup (see
link:jstl.htm#50561102_30600[See Resource Bundle Lookup]) is performed
for each one of the preferred locales until a match is found. If a match
is found, the locale that led to the match and the matched resource
bundle are stored in the i18n localization context.

[#50561102_pgfId-1016127]##Step 2: Find a match with the fallback locale

[#50561102_pgfId-1016128]##A resource bundle lookup (see
link:jstl.htm#50561102_30600[See Resource Bundle Lookup]) is performed
for the fallback locale specified in the
_jakarta.servlet.jsp.jstl.fmt.fallbackLocale_ configuration setting. If a
match is found, the fallback locale and the matched resource bundle are
stored in the i18n localization context.

[#50561102_pgfId-1017005]##If no match is found following the above two
steps, an attempt is made to load the root resource bundle with the
given basename. If such a resource bundle exists, it is used as the
resource bundle of an i18n localization context that does not have any
locale. Otherwise, the established i18n localization context contains
neither a resource bundle nor a locale. It is then up to the i18n action
relying on this i18n localization context for the localization of its
data to take a proper corrective action.

[#50561102_pgfId-1016130]##It is important to note that this algorithm
gives higher priority to a language match over an exact match that would
have occurred further down the list of preferred locales. For example,
if the browser-based locale settings are âenâ and âfr_CAâ, with resource
bundles âMessages_enâ and âMessages_fr_CAâ, the Messages_en bundle will
be selected as the resource bundle for the localization context.

[#50561102_pgfId-1016131]##The definition of a fallback locale along
with its associated resource bundles is the only portable way a web
application can ensure the proper localization of all its
internationalized pages. The algorithm of this section never considers
the default locale associated with the Java runtime of the container
because this would result in a non-portable behavior.

[#50561102_pgfId-1016132]##The behavior is implementation-specific if
the set of available resource bundles changes during execution of the
page. Implementations may thus cache whatever information they deem
necessary to improve the performance of the algorithm presented in this
section.

======= [#50561102_pgfId-1010923]##Examples

[#50561102_pgfId-1010924]##The following examples demonstrate how the
resource bundle is determined for an i18n localization context.

[#50561102_pgfId-1015085]##Example 1

image:jstl-32.gif[image]

[#50561102_pgfId-1015086]##Settings

[#50561102_pgfId-1015087]##Basename: _Resources_

[#50561102_pgfId-1015088]##Ordered preferred locales: _en_GB, fr_CA_

[#50561102_pgfId-1015089]##Fallback locale: _fr_CA_

[#50561102_pgfId-1015091]##Resource bundles: _Resources_en,
Resources_fr_CA_

[#50561102_pgfId-1015092]##Algorithm Trace

[#50561102_pgfId-1015093]##Step 1: Find a match within the ordered set
of preferred locales

[#50561102_pgfId-1015094]## _en_GB_ match with _Resources_en_

[#50561102_pgfId-1016390]##Result

[#50561102_pgfId-1016405]##Resource bundle selected: _Resources_en_

[#50561102_pgfId-1016413]##Locale: _en_GB_

[#50561102_pgfId-1019699]##Example 2

image:jstl-32.gif[image]

[#50561102_pgfId-1015118]##Settings

[#50561102_pgfId-1015119]##Basename: _Resources_

[#50561102_pgfId-1015120]##Ordered preferred locales: _de, fr_

[#50561102_pgfId-1015121]##Fallback locale: _en_

[#50561102_pgfId-1015122]##Resource bundles: _Resources_en_

[#50561102_pgfId-1015123]##Algorithm Trace

[#50561102_pgfId-1015124]##Step 1: Find a match within the ordered set
of preferred locales

[#50561102_pgfId-1015125]## _de_ no match

[#50561102_pgfId-1015140]## _fr_ no match

[#50561102_pgfId-1015151]##Step 2: Find a match with the fallback locale

[#50561102_pgfId-1015152]## _en_ exact match with _Resources_en_

[#50561102_pgfId-1016420]##Result

[#50561102_pgfId-1016421]##Resource bundle selected: _Resources_en_

[#50561102_pgfId-1016422]##Locale: en

[#50561102_pgfId-1019712]##Example 3

image:jstl-32.gif[image]

[#50561102_pgfId-1019713]##Settings

[#50561102_pgfId-1014042]##Basename: _Resources_

[#50561102_pgfId-1014043]##Ordered preferred locales: _ja, en_GB, en_US,
en_CA, fr_

[#50561102_pgfId-1014044]##Fallback locale: _en_

[#50561102_pgfId-1014046]##Resource bundles: _Resources_en,
Resources_fr, Resources_en_US_

[#50561102_pgfId-1015328]##Algorithm Trace

[#50561102_pgfId-1015329]##Step 1: Find a match within the ordered set
of preferred locales

[#50561102_pgfId-1015330]## _ja_ no match

[#50561102_pgfId-1015331]## _en_GB_ match with _Resources_en_

[#50561102_pgfId-1016427]##Result

[#50561102_pgfId-1016428]##Resource bundle selected: _Resources_en_

[#50561102_pgfId-1016429]##Locale: _en_GB_

[#50561102_pgfId-1019719]##Example 4

image:jstl-32.gif[image]

[#50561102_pgfId-1019720]##Settings

[#50561102_pgfId-1016368]##Basename: _Resources_

[#50561102_pgfId-1016369]##Ordered preferred locales: _fr, sv_

[#50561102_pgfId-1016370]##Fallback locale: _en_

[#50561102_pgfId-1016371]##Resource bundles: _Resources_fr_CA,
Resources_sv, Resources_en_

[#50561102_pgfId-1016372]##Algorithm Trace

[#50561102_pgfId-1016373]##Step 1: Find a match within the ordered set
of preferred locales

[#50561102_pgfId-1016374]## _fr_ no match

[#50561102_pgfId-1016375]## _sv_ match with _Resources_sv_

[#50561102_pgfId-1016443]##Result

[#50561102_pgfId-1016444]##Resource bundle selected: _Resources_sv_

[#50561102_pgfId-1016445]##Locale: _sv_

[#50561102_pgfId-1017782]##This example shows that whenever possible, a
resource bundle for a specific language and country ( _Resources_fr_CA_
) should be backed by a resource bundle covering just the language (
_Resources_fr_ ). If the country-specific differences of a language are
too significant for there to be a language-only resource bundle, it is
expected that clients will specify both a language and a country as
their preferred language, in which case an exact resource bundle match
will be found.

======= [#50561102_pgfId-1014177]##

image:jstl-31.gif[image]

[#50561102_49986]##Response Encoding

[#50561102_pgfId-1019945]##Any i18n action that establishes a
localization context is responsible for setting the responseâs locale of
its page, unless the localization context that was established does not
have any locale. This is done by calling method
_ServletResponse.setLocale()_ with the locale of the localization
context. Unless a response character encoding has been explicitly
defined by other JSP elements (or by direct calls to the Servlet API),
calling _setLocale()_ also sets the character encoding for the response
(see the JSP and Servlet specifications for details).

[#50561102_pgfId-1014212]##This assumes that the response is buffered
with a big enough buffer size, since _ServletResponse.setLocale()_ must
be called before _ServletResponse.getWriter()_ in order for the
specified locale to affect the construction of the writer.

[#50561102_pgfId-1014185]##More specifically, the responseâs
_setLocale()_ method is always called by the <fmt:setLocale> action (see
link:jstl.htm#50561102_72123[See <fmt:setLocale>]). In addition, it is
called by the following actions:

[#50561102_pgfId-1014192]##Any <fmt:bundle> (see
link:jstl.htm#50561102_39557[See <fmt:bundle>]) and <fmt:setBundle> (see
link:jstl.htm#50561102_65666[See <fmt:setBundle>]) action.

[#50561102_pgfId-1014193]##Any <fmt:message> action that establishes an
i18n localization context

[#50561102_pgfId-1019768]##Any formatting action that establishes a
formatting locale on its own (see link:jstl.htm#50561103_80223[See
Establishing a Formatting Locale]).

[#50561102_pgfId-1020078]##After an action has called
_ServletResponse.setLocale()_ , if a session exists and has not been
invalidated, it must determine the character encoding associated with
the response locale (by calling _ServletResponse.getCharacterEncoding()_
) and store it in the scoped variable
_jakarta.servlet.jsp.jstl.fmt.request.charset_ in session scope. This
attribute may be used by the <fmt:requestEncoding> action (see
link:jstl.htm#50561102_36816[See <fmt:requestEncoding>]) in a page
invoked by a form included in the response to set the request charset to
the same as the response charset. This makes it possible for the
container to decode the form parameter values properly, since browsers
typically encode form field values using the responseâs charset.

[#50561102_pgfId-1019891]##The rules related to the setting of an HTTP
response character encoding, Content-Language header, and Content-Type
header are clearly defined in the Servlet specification. To avoid any
ambiguity, the JSTL and JSP specifications define behavior related to a
response's locale and character encoding exclusively in terms of Servlet
API calls.

[#50561102_pgfId-1019921]##It is therefore important to note that, as
defined in the Servlet spec, a call to _ServletResponse.setLocale()_
modifies the character encoding of the response only if it has not
already been set explicitely by calls to
_ServletResponse.setContentType()_ (with CHARSET specified) or
_ServletResponse.setCharacterEncoding()_ .

[#50561102_pgfId-1019932]##Page authors should consult the JSP
specification to understand how page directives related to locale and
character encoding setting translate into Servlet API calls, and how
they impact the final response settings.

======= [#50561102_pgfId-1010952]##

image:jstl-31.gif[image]

[#50561102_72123]##<fmt:setLocale>

[#50561102_pgfId-1010953]##Stores the specified locale in the
_jakarta.servlet.jsp.jstl.fmt.locale_ configuration variable.

======= [#50561102_pgfId-1010954]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1010955]##<fmt:setLocale value=âlocaleâ

{empty}[#50561102_pgfId-1010956]##[variant=âvariantâ]

[#50561102_pgfId-1010957]##[scope=â\{page|request|session|application}â]/>

======= [#50561102_pgfId-1010958]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1010959]##Empty.

======= [#50561102_pgfId-1011002]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1016776]##Name |[#50561102_pgfId-1016778]##Dynamic
|[#50561102_pgfId-1016780]##Type |[#50561102_pgfId-1016782]##Description
|[#50561102_pgfId-1016784]## _value_ |[#50561102_pgfId-1016786]## _true_
a|
[#50561102_pgfId-1016788]## _String or_

[#50561102_pgfId-1018756]##java.util.Locale

|[#50561102_pgfId-1016790]##A _String_ value is interpreted as the
printable representation of a locale, which must contain a two-letter
(lower-case) language code (as defined by ISO-639), and may contain a
two-letter (upper-case) country code (as defined by ISO-3166). Language
and country codes must be separated by hyphen (â-â) or underscore (â_â).

|[#50561102_pgfId-1016792]## _variant_ |[#50561102_pgfId-1016794]##
_true_ |[#50561102_pgfId-1016796]## _String_ a|
[#50561102_pgfId-1016798]##Vendor- or browser-specific variant.

[#50561102_pgfId-1016799]##See the _java.util.Locale_ javadocs for more
information on variants.

|[#50561102_pgfId-1016801]## _scope_ |[#50561102_pgfId-1016803]##
_false_ |[#50561102_pgfId-1016805]## _String_
|[#50561102_pgfId-1016807]##Scope of the locale configuration variable.
|===

======= [#50561102_pgfId-1017228]##Null & Error Handling

image:jstl-32.gif[image]

[#50561102_pgfId-1017239]##If _value_ is null or empty, use the runtime
default locale.

======= [#50561102_pgfId-1011005]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1011006]##The <fmt:setLocale> action stores the locale
specified by the _value_ attribute in the
_jakarta.servlet.jsp.jstl.fmt.locale_ configuration variable in the scope
given by the _scope_ attribute. If _value_ is of type _java.util.Locale_
, _variant_ is ignored.

[#50561102_pgfId-1011007]##Â 

[#50561102_pgfId-1011008]##As a result of using this action,
browser-based locale setting capabilities are disabled. This means that
if this action is used, it should be declared at the beginning of a
page, before any other i18n-capable formatting actions.

======= [#50561102_pgfId-1011010]##

image:jstl-31.gif[image]

[#50561102_39557]##<fmt:bundle>

[#50561102_pgfId-1017974]##Creates an i18n localization context to be
used by its body content.

======= [#50561102_pgfId-1011012]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1017484]##<fmt:bundle basename=âbasenameâ

[#50561102_pgfId-1017992]## [prefix=âprefixâ]>

[#50561102_pgfId-1017488]## body content

[#50561102_pgfId-1017489]##</fmt:bundle>

======= [#50561102_pgfId-1011019]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1015747]##JSP. The JSP container processes the body
content and then writes it to the current _JspWriter._ The action
ignores the body content.

======= [#50561102_pgfId-1011072]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1016811]##Name |[#50561102_pgfId-1016813]##Dynamic
|[#50561102_pgfId-1016815]##Type |[#50561102_pgfId-1016817]##Description
|[#50561102_pgfId-1016819]## _basename_ |[#50561102_pgfId-1016821]##
_true_ |[#50561102_pgfId-1016823]## _String_
|[#50561102_pgfId-1018572]##Resource bundle base name. This is the
bundleâs fully-qualified resource name, which has the same form as a
fully-qualified class name, that is, it uses "." as the package
component separator and does not have any file type (such as ".class" or
".properties") suffix.

|[#50561102_pgfId-1016827]##prefix |[#50561102_pgfId-1016829]## _true_
|[#50561102_pgfId-1016831]##String |[#50561102_pgfId-1017994]##Prefix to
be prepended to the value of the message key of any nested <fmt:message>
action.
|===

======= [#50561102_pgfId-1017308]##Null & Error Handling

image:jstl-32.gif[image]

[#50561102_pgfId-1018212]##If _basename_ is null or empty, or a resource
bundle cannot be found, the _null_ resource bundle is stored in the i18n
localization context.

======= [#50561102_pgfId-1011075]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1018070]##The <fmt:bundle> action creates an i18n
localization context and loads its resource bundle into that context.
The name of the resource bundle is specified with the _basename_
attribute.

[#50561102_pgfId-1018081]##The specific resource bundle that is loaded
is determined according to the algorithm presented in
link:jstl.htm#50561102_49805[See Resource Bundle Determination
Algorithm].

[#50561102_pgfId-1018105]##The scope of the i18n localization context is
limited to the actionâs body content.

[#50561102_pgfId-1011081]##The _prefix_ attribute is provided as a
convenience for very long message key names. Its value is prepended to
the value of the message _key_ of any nested <fmt:message> actions.

[#50561102_pgfId-1018118]##For example, using the _prefix_ attribute,
the key names in:

[width="100%",cols="100%",]
|===
a|
[#50561102_pgfId-1015765]##<fmt:bundle basename="Labels">

[#50561102_pgfId-1015766]##<fmt:message
key="com.acme.labels.firstName"/>

[#50561102_pgfId-1015767]##<fmt:message key="com.acme.labels.lastName"/>

[#50561102_pgfId-1015768]##</fmt:bundle>

|===

[#50561102_pgfId-1015775]##may be abbreviated to:

[width="100%",cols="100%",]
|===
a|
[#50561102_pgfId-1015771]##<fmt:bundle basename="Labels"
prefix="com.acme.labels.">

[#50561102_pgfId-1015772]##<fmt:message key="firstName"/>

[#50561102_pgfId-1015773]##<fmt:message key="lastName"/>

[#50561102_pgfId-1015774]##</fmt:bundle>

|===

[#50561102_pgfId-1015760]##Â 

======= [#50561102_pgfId-1017859]##

image:jstl-31.gif[image]

[#50561102_65666]##<fmt:setBundle>

[#50561102_pgfId-1017963]##Creates an i18n localization context and
stores it in the scoped variable or the
_jakarta.servlet.jsp.jstl.fmt.localizationContext_ configuration variable.

======= [#50561102_pgfId-1017861]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1017866]##<fmt:setBundle basename=âbasenameâ +
[var=âvarNameâ] [scope=â\{page|request|session|application}â]/>

======= [#50561102_pgfId-1017874]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1017875]##Empty.

======= [#50561102_pgfId-1017917]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1017878]##Name |[#50561102_pgfId-1017880]##Dynamic
|[#50561102_pgfId-1017882]##Type |[#50561102_pgfId-1017884]##Description
|[#50561102_pgfId-1017886]## _basename_ |[#50561102_pgfId-1017888]##
_true_ |[#50561102_pgfId-1017890]## _String_
|[#50561102_pgfId-1018589]##Resource bundle base name. This is the
bundleâs fully-qualified resource name, which has the same form as a
fully-qualified class name, that is, it uses "." as the package
component separator and does not have any file type (such as ".class" or
".properties") suffix.

|[#50561102_pgfId-1017902]## _var_ |[#50561102_pgfId-1017904]## _false_
|[#50561102_pgfId-1017906]## _String_ |[#50561102_pgfId-1017908]##Name
of the exported scoped variable which stores the i18n localization
context of type _jakarta.servlet.jsp.jstl.fmt.LocalizationContext_ .

|[#50561102_pgfId-1017910]## _scope_ |[#50561102_pgfId-1017912]##
_false_ |[#50561102_pgfId-1017914]## _String_
|[#50561102_pgfId-1017916]##Scope of _var_ or the localization context
configuration variable.
|===

======= [#50561102_pgfId-1017918]##Null & Error Handling

image:jstl-32.gif[image]

[#50561102_pgfId-1018232]##If _basename_ is null or empty, or a resource
bundle cannot be found, the _null_ resource bundle is stored in the i18n
localization context.

======= [#50561102_pgfId-1017920]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1018254]##The <fmt:setBundle> action creates an i18n
localization context and loads its resource bundle into that context.
The name of the resource bundle is specified with the _basename_
attribute.

[#50561102_pgfId-1018554]##The specific resource bundle that is loaded
is determined according to the algorithm presented in
link:jstl.htm#50561102_49805[See Resource Bundle Determination
Algorithm].

[#50561102_pgfId-1018180]##The i18n localization context is stored in
the scoped variable whose name is given by _var_ . If _var_ is not
specified, it is stored in the
_jakarta.servlet.jsp.jstl.fmt.localizationContext_ configuration variable,
thereby making it the new default i18n localization context in the given
scope.

======= [#50561102_pgfId-1011083]##

image:jstl-31.gif[image]

[#50561102_22924]##<fmt:message>

[#50561102_pgfId-1011084]##Looks up a localized message in a resource
bundle.

======= [#50561102_pgfId-1011085]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1016557]## _Syntax 1: without body content_

[#50561102_pgfId-1011086]##<fmt:message key=âmessageKeyâ

{empty}[#50561102_pgfId-1011087]##[bundle=âresourceBundleâ]

{empty}[#50561102_pgfId-1011089]##[var=âvarNameâ]

[#50561102_pgfId-1011090]##[scope=â\{page|request|session|application}â]/>

[#50561102_pgfId-1016561]## _Syntax 2: with a body to specify message
parameters_

[#50561102_pgfId-1016547]##<fmt:message key=âmessageKeyâ

{empty}[#50561102_pgfId-1016696]## [bundle=âresourceBundleâ]

{empty}[#50561102_pgfId-1016550]##[var=âvarNameâ]

[#50561102_pgfId-1016578]##[scope=â\{page|request|session|application}â]>

[#50561102_pgfId-1016579]## <fmt:param> subtags

[#50561102_pgfId-1016580]##</fmt:message>

[#50561102_pgfId-1016646]## _Syntax 3: with a body to specify key and
optional message parameters_

{empty}[#50561102_pgfId-1016647]##<fmt:message [bundle=âresourceBundleâ]

{empty}[#50561102_pgfId-1016649]##[var=âvarNameâ]

[#50561102_pgfId-1016650]##[scope=â\{page|request|session|application}â]>

[#50561102_pgfId-1016676]## key

[#50561102_pgfId-1016680]## optional <fmt:param> subtags

[#50561102_pgfId-1016652]##</fmt:message>

[#50561102_pgfId-1016644]##Â 

[#50561102_pgfId-1016545]##Â 

======= [#50561102_pgfId-1011093]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1015782]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561102_pgfId-1011156]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1016855]##Name |[#50561102_pgfId-1016857]##Dyn
|[#50561102_pgfId-1016859]##Type |[#50561102_pgfId-1016861]##Description
|[#50561102_pgfId-1016863]## _key_ |[#50561102_pgfId-1016865]## _true_
|[#50561102_pgfId-1016867]## _String_
|[#50561102_pgfId-1016869]##Message key to be looked up.

|[#50561102_pgfId-1016871]##bundle |[#50561102_pgfId-1016873]## _true_
|[#50561102_pgfId-1016875]##LocalizationContext
|[#50561102_pgfId-1016877]##Localization context in whose resource
bundle the message key is looked up.

|[#50561102_pgfId-1016887]## _var_ |[#50561102_pgfId-1016889]## _false_
|[#50561102_pgfId-1016891]## _String_ |[#50561102_pgfId-1016893]##Name
of the exported scoped variable which stores the localized message.

|[#50561102_pgfId-1016895]## _scope_ |[#50561102_pgfId-1016897]##
_false_ |[#50561102_pgfId-1016899]## _String_
|[#50561102_pgfId-1016901]##Scope of var.
|===

======= [#50561102_pgfId-1011157]##Constraints

image:jstl-32.gif[image]

[#50561102_pgfId-1011158]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561102_pgfId-1017256]##Null & Error Handling

image:jstl-32.gif[image]

[#50561102_pgfId-1017265]##If _key_ is null or empty, the message is
processed as if undefined; that is, an error message of the form
"??????" is produced.

[#50561102_pgfId-1019191]##If the i18n localization context that this
action determines does not have any resource bundle, an error message of
the form â???<key>???â is produced

======= [#50561102_pgfId-1011161]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1011162]##The <fmt:message> action looks up the
localized message corresponding to the given message key.

[#50561102_pgfId-1011163]##Â 

[#50561102_pgfId-1011164]##The message key may be specified via the
_key_ attribute or from the tagâs body content. If this action is nested
inside a <fmt:bundle> action, and the parent <fmt:bundle> action
contains a _prefix_ attribute, the specified prefix is prepended to the
message key.

[#50561102_pgfId-1017041]##<fmt:message> uses the resource bundle of the
i18n localization context determined according to
link:jstl.htm#50561102_34784[See I18n Localization Context].

[#50561102_pgfId-1017049]##Â 

[#50561102_pgfId-1011171]##If the given key is not found in the resource
bundle, or the i18n localization context does not contain any resource
bundle, the result of the lookup is an error message of the form
"???<key>???" (where <key> is the name of the undefined message key).

[#50561102_pgfId-1011172]##Â 

[#50561102_pgfId-1011173]##If the message corresponding to the given key
is compound, that is, contains one or more variables, it may be supplied
with parameter values for these variables via one or more <fmt:param>
subtags (one for each parameter value). This procedure is referred to as
parametric replacement. Parametric replacement takes place in the order
of the <fmt:param> subtags.

[#50561102_pgfId-1018596]##In the presence of one or more <fmt:param>
subtags, the message is supplied to the _java.text.MessageFormat_ method
_applyPattern()_ , and the values of the <fmt:param> tags are collected
in an _Object[]_ and supplied to the _java.text.MessageFormat_ method
_format()_ . The locale of the _java.text.MessageFormat_ is set to the
appropriate localization context locale before _applyPattern()_ is
called. If the localization context does not have any locale, the locale
of the _java.text.MessageFormat_ is set to the locale returned by the
formatting locale lookup algorithm of link:jstl.htm#50561103_80223[See
Establishing a Formatting Locale], except that the available formatting
locales are given as the intersection of the number- and date-
formatting locales. If this algorithm does not yield any locale, the
locale of the _java.text.MessageFormat_ is set to the runtime's default
locale.

[#50561102_pgfId-1018651]##Â 

[#50561102_pgfId-1018652]##If the message is compound and no <fmt:param>
subtags are specified, it is left unmodified (that is,
_java.text.MessageFormat_ is not used).

[#50561102_pgfId-1011174]##Â 

[#50561102_pgfId-1011175]##The <fmt:message> action outputs its result
to the current _JspWriter_ object, unless the _var_ attribute is
specified, in which case the result is stored in the named JSP
attribute.

======= [#50561102_pgfId-1011177]##

image:jstl-31.gif[image]

[#50561102_92098]##<fmt:param>

[#50561102_pgfId-1011178]##Supplies a single parameter for parametric
replacement to a containing <fmt:message> (see
link:jstl.htm#50561102_22924[See <fmt:message>]) action.

======= [#50561102_pgfId-1011185]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1016596]## _Syntax 1: value specified via attribute
âvalueâ_

[#50561102_pgfId-1011186]##<fmt:param value=âmessageParameterâ/>

[#50561102_pgfId-1016607]## _Syntax 2: value specified via body content_

[#50561102_pgfId-1016601]##<fmt:param>

[#50561102_pgfId-1016602]## body content

[#50561102_pgfId-1016603]##</fmt:param>

======= [#50561102_pgfId-1011189]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1015789]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561102_pgfId-1011212]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1016904]##Name |[#50561102_pgfId-1016906]##Dynamic
|[#50561102_pgfId-1016908]##Type |[#50561102_pgfId-1016910]##Description
|[#50561102_pgfId-1016912]## _value_ |[#50561102_pgfId-1016914]## _true_
|[#50561102_pgfId-1016916]## _Object_
|[#50561102_pgfId-1016918]##Argument used for parametric replacement.
|===

======= [#50561102_pgfId-1011213]##Constraints

image:jstl-32.gif[image]

[#50561102_pgfId-1011214]##Must be nested inside a <fmt:message> action.

======= [#50561102_pgfId-1011216]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1011217]##The <fmt:param> action supplies a single
parameter for parametric replacement to the compound message given by
its parent <fmt:message> action.

[#50561102_pgfId-1017674]##Parametric replacement takes place in the
order of the <fmt:param> tags. The semantics of the replacement are
defined as in the class _java.text.MessageFormat_ :

[#50561102_pgfId-1017718]##the compound message given by the parent
<fmt:message> action is used as the argument to the _applyPattern()_
method of a _java.text.MessageFormat_ instance, and the values of the
<fmt:param> tags are collected in an _Object[]_ and supplied to that
instance's _format()_ method.

[#50561102_pgfId-1017693]##The argument value may be specified via the
_value_ attribute or inline via the tagâs body content.

======= [#50561102_pgfId-1016229]##

image:jstl-31.gif[image]

[#50561102_36816]##<fmt:requestEncoding>

[#50561102_pgfId-1011284]##Sets the requestâs character encoding.

======= [#50561102_pgfId-1011285]##Syntax

image:jstl-32.gif[image]

[#50561102_pgfId-1011286]##<fmt:requestEncoding [value=âcharsetNameâ]/>

======= [#50561102_pgfId-1011287]##Body Content

image:jstl-32.gif[image]

[#50561102_pgfId-1011288]##Empty.

======= [#50561102_pgfId-1011310]##Attributes

image:jstl-32.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561102_pgfId-1016951]##Name |[#50561102_pgfId-1016953]##Dynamic
|[#50561102_pgfId-1016955]##Type |[#50561102_pgfId-1016957]##Description
|[#50561102_pgfId-1016959]## _value_ |[#50561102_pgfId-1016961]## _true_
|[#50561102_pgfId-1016963]## _String_ |[#50561102_pgfId-1016965]##Name
of character encoding to be applied when decoding request parameters.
|===

======= [#50561102_pgfId-1011313]##Description

image:jstl-32.gif[image]

[#50561102_pgfId-1011314]##The <fmt:requestEncoding> action may be used
to set the requestâs character encoding, in order to be able to
correctly decode request parameter values whose encoding is different
from ISO-8859-1.

[#50561102_pgfId-1011315]##This action is needed because most browsers
do not follow the HTTP specification and fail to include a
_Content-Type_ header in their requests.

[#50561102_pgfId-1011316]##More specifically, the purpose of the
<fmt:requestEncoding> action is to set the request encoding to be the
same as the encoding used for the response containing the form that
invokes this page.

[#50561102_pgfId-1011320]##This action calls the
_setCharacterEncoding()_ method on the servlet request with the
character encoding name specified in the _value_ attribute. It must be
used before any parameters are retrieved, either explicitly or through
the use of an EL expression.

[#50561102_pgfId-1011321]##If the character encoding of the request
parameters is not known in advance (since the locale and thus character
encoding of the page that generated the form collecting the parameter
values was determined dynamically), the _value_ attribute must not be
specified. In this case, the <fmt:requestEncoding> action first checks
if there is a charset defined in the request _Content-Type_ header. If
not, it uses the character encoding from the
_jakarta.servlet.jsp.jstl.fmt.request.charset_ scoped variable which is
searched in session scope. If this scoped variable is not found, the
default character encoding (ISO-8859-1) is used.

======= [#50561102_pgfId-1011322]##

image:jstl-31.gif[image]

Configuration Settings

[#50561102_pgfId-1011323]##This section describes the i18n-related
configuration settings. Refer to link:jstl.htm#50561096_18174[See
Configuration Data] for more information on how JSTL processes
configuration data.

======= [#50561102_pgfId-1011325]##[#50561102_62564]##Locale

[#50561102_pgfId-1011326]##[#50561102_42399]##Â 

[width="100%",cols="50%,50%",]
|===
|[#50561102_pgfId-1018704]## _Variable name_
|[#50561102_pgfId-1018706]## _jakarta.servlet.jsp.jstl.fmt.locale_

|[#50561102_pgfId-1018708]##Java Constant |[#50561102_pgfId-1018710]##
_Config.FMT_LOCALE_

|[#50561102_pgfId-1018712]##Type |[#50561102_pgfId-1018714]##String or
java.util.Locale

|[#50561102_pgfId-1018912]##Set by
|[#50561102_pgfId-1018914]##<fmt:setLocale>

|[#50561102_pgfId-1018716]##Used by
|[#50561102_pgfId-1018718]##<fmt:bundle>, <fmt:setBundle>,
<fmt:message>, <fmt:formatNumber>, <fmt:parseNumber>, <fmt:formatDate>,
<fmt:parseDate>
|===

[#50561102_pgfId-1018890]##Specifies the locale to be used by the
i18n-capable formatting actions, thereby disabling browser-based
locales. A _String_ value is interpreted as defined in action
<fmt:setLocale> (see link:jstl.htm#50561102_72123[See <fmt:setLocale>]).

======= [#50561102_pgfId-1018734]##Fallback Locale

[#50561102_pgfId-1018753]##Â 

[width="100%",cols="50%,50%",]
|===
|[#50561102_pgfId-1018737]## _Variable name_
|[#50561102_pgfId-1018739]## _jakarta.servlet.jsp.jstl.fmt.fallbackLocale_

|[#50561102_pgfId-1018741]##Java Constant |[#50561102_pgfId-1018743]##
_Config.FMT_FALLBACK_LOCALE_

|[#50561102_pgfId-1018745]##Type |[#50561102_pgfId-1018747]##String or
java.util.Locale

|[#50561102_pgfId-1018924]##Set by |[#50561102_pgfId-1018926]##Â 

|[#50561102_pgfId-1018749]##Used by
|[#50561102_pgfId-1018957]##<fmt:bundle>, <fmt:setBundle>,
<fmt:message>, <fmt:formatNumber>, <fmt:parseNumber>, <fmt:formatDate>,
<fmt:parseDate>
|===

[#50561102_pgfId-1018731]##Specifies the fallback locale to be used by
the i18n-capable formatting actions if none of the preferred match any
of the available locales. A _String_ value is interpreted as defined in
action <fmt:setLocale> (see link:jstl.htm#50561102_72123[See
<fmt:setLocale>]).

======= [#50561102_pgfId-1011345]##[#50561102_37988]##I18n Localization Context

[#50561102_pgfId-1019014]##Â 

[width="100%",cols="50%,50%",]
|===
|[#50561102_pgfId-1018995]## _Variable name_
|[#50561102_pgfId-1019022]##
_jakarta.servlet.jsp.jstl.fmt.localizationContext_

|[#50561102_pgfId-1018999]##Java Constant |[#50561102_pgfId-1019028]##
_Config.FMT_LOCALIZATION_CONTEXT_

|[#50561102_pgfId-1019003]##Type |[#50561102_pgfId-1019034]##String or
jakarta.servlet.jsp.jstl.fmt.LocalizationContext

|[#50561102_pgfId-1019007]##Set by
|[#50561102_pgfId-1019009]##<fmt:setBundle>

|[#50561102_pgfId-1019011]##Used by
|[#50561102_pgfId-1019013]##<fmt:message>, <fmt:formatNumber>,
<fmt:parseNumber>, <fmt:formatDate>, <fmt:parseDate>
|===

[#50561102_pgfId-1019044]##Specifies the default i18n localization
context to be used by the i18n-capable formatting actions. A _String_
value is interpreted as a resource bundle basename.

======= [#50561102_pgfId-1019081]##Â 

======= [#50561103_pgfId-874]##[#50561103_22536]##Â 

======= [#50561103_pgfId-1001083]##

image:jstl-33.gif[image]

Formatting Actions

======= [#50561103_pgfId-1001084]##I18n-capable formatting tag library

image:jstl-34.gif[image]

[#50561103_pgfId-1012510]##The JSTL formatting actions allow various
data elements in a JSP page, such as numbers, dates and times, to be
formatted and parsed in a locale-sensitive or customized manner.

======= [#50561103_pgfId-1013404]##

image:jstl-35.gif[image]

Overview

======= [#50561103_pgfId-1012540]##Formatting Numbers, Currencies, and Percentages

[#50561103_pgfId-1012541]##The <fmt:formatNumber> action allows page
authors to format numbers, currencies, and percentages according to the
clientâs cultural formatting conventions.

[#50561103_pgfId-1012545]##For example, the output of:

[width="100%",cols="100%",]
|===
|[#50561103_pgfId-1012544]##<fmt:formatNumber value="9876543.21"
type="currency"/>
|===

[#50561103_pgfId-1012546]##varies with the pageâs locale (given in
parentheses), as follows:

[#50561103_pgfId-1012547]## _SFr. 9â876â543.21 (fr_CH)_

[#50561103_pgfId-1012549]## _$9,876,543.21 (en_US)_

[#50561103_pgfId-1012550]##While the previous example uses the default
formatting pattern (for currencies) of the pageâs locale, it is also
possible to specify a customized formatting pattern. For example, a
pattern of ".000" will cause any numeric value formatted with it to be
represented with 3 fraction digits, adding trailing zeros if necessary,
so that:

[width="100%",cols="100%",]
|===
|[#50561103_pgfId-1012553]##<fmt:formatNumber value="12.3"
pattern=".000"/>
|===

[#50561103_pgfId-1012554]##will output "12.300".

[#50561103_pgfId-1012555]##Likewise, a pattern of "#,#00.0#" specifies
that any numeric value formatted with it will be represented with a
minimum of 2 integer digits, 1 fraction digit, and a maximum of 2
fraction digits, with every 3 integer digits grouped. Applied to
"123456.7891", as in:

[width="100%",cols="100%",]
|===
|[#50561103_pgfId-1012558]##<fmt:formatNumber value="123456.7891"
pattern="#,#00.0#"/>
|===

[#50561103_pgfId-1012559]##the formatted output will be "123,456.79"
(note that rounding is handled automatically).

[#50561103_pgfId-1012560]##The following example formats a numeric value
as a currency, stores it in a scoped variable, parses it back in, and
outputs the parsed result (which is the same as the original numeric
value):

[width="100%",cols="100%",]
|===
a|
[#50561103_pgfId-1012563]##<fmt:formatNumber value="123456789"
type="currency" var="cur"/>

[#50561103_pgfId-1012564]##<fmt:parseNumber value="$\{cur}"
type="currency"/>

|===

[#50561103_pgfId-1012565]##A similar sequence of actions could have been
used to retrieve a currency-formatted value from a database, parse its
numeric value, perform an arithmetic operation on it, reformat it as a
currency, and store it back to the database.

======= [#50561103_pgfId-1012566]##Formatting Dates and Times

[#50561103_pgfId-1012567]##The <fmt:formatDate> action allows page
authors to format dates and times according to the clientâs cultural
formatting conventions.

[#50561103_pgfId-1012568]##For example, assuming a current date of _Oct
22,_ _2001_ and a current time of _4:05:53PM_ , the following action:

[width="100%",cols="100%",]
|===
a|
[#50561103_pgfId-1012571]##<jsp:useBean id="now" class="java.util.Date"
/>

[#50561103_pgfId-1022378]## _<fmt:formatDate value=â$\{now}â
timeStyle="long" dateStyle="long"/>_

|===

[#50561103_pgfId-1012572]##will output

[#50561103_pgfId-1012573]## _October 22, 2001 4:05:53 PM PDT_

[#50561103_pgfId-1012574]##for the U.S. and

[#50561103_pgfId-1012575]## _22 octobre 2001 16:05:53 GMT-07:0_

[#50561103_pgfId-1012576]##for the French locale.

[#50561103_pgfId-1012577]##Page authors may also specify a customized
formatting style for their dates and times. Assuming the same current
date and time as in the above example, this action:

[width="100%",cols="100%",]
|===
|[#50561103_pgfId-1012580]## _<fmt:formatDate value=â$\{now}â
pattern="dd.MM.yy"/>_
|===

[#50561103_pgfId-1012581]##will output

[#50561103_pgfId-1012582]## _22.10.01_

[#50561103_pgfId-1012583]##for the U.S. locale.

[#50561103_pgfId-1012584]##Time information on a page may be tailored to
the preferred time zone of a client. This is useful if the server
hosting the page and its clients reside in different time zones. If time
information is to be formatted or parsed in a time zone different from
that of the JSP container, the <fmt:formatDate> and <fmt:parseDate>
action may be nested inside a <fmt:timeZone> action or supplied with a
_timeZone_ attribute.

[#50561103_pgfId-1012585]##In the following example, the current date
and time are formatted in the âGMT+1:00â time zone:

[width="100%",cols="100%",]
|===
a|
[#50561103_pgfId-1012588]##<fmt:timeZone value="GMT+1:00">

[#50561103_pgfId-1012589]##<fmt:formatDate _value=â$\{now}â_ type="both"
dateStyle="full" timeStyle="full"/>

[#50561103_pgfId-1012590]##</fmt:timeZone>

|===

======= [#50561103_pgfId-1013524]##

image:jstl-35.gif[image]

[#50561103_23402]##Formatting Locale

[#50561103_pgfId-1022519]##A formatting actionlink:#pgfId-1014130[8] may
leverage an i18n localization context to determine its formatting locale
or establish a formatting locale on its own, by following these steps:

[#50561103_pgfId-1014137]##<fmt:bundle> action

[#50561103_pgfId-1022055]##If a formatting action is nested inside a
<fmt:bundle> action (see link:jstl.htm#50561102_39557[See
<fmt:bundle>]), the locale of the i18n localization context of the
enclosing <fmt:bundle> action is used as the formatting locale. The
<fmt:bundle> action determines the resource bundle of its i18n
localization context according to the resource bundle determination
algorithm in link:jstl.htm#50561102_94840[See Determinining the Resource
Bundle for an i18n Localization Context], using the basename attribute
as the resource bundle basename. If the i18n localization context of the
enclosing <fmt:bundle> action does not contain any locale, go to the
next step.

[#50561103_pgfId-1022220]##I18n default localization context

[#50561103_pgfId-1022234]##The default i18n localization context may be
specified via the jakarta.servlet.jsp.jstl.fmt.localizationContext
configuration setting. If such a configuration setting exists, and its
value is of type _LocalizationContext_ , its locale is used as the
formatting locale. Otherwise, if the configuration setting is of type
_String_ , the formatting action establishes its own i18n localization
context and uses its locale as the formatting locale (in this case, the
resource bundle component of the i18n localization context is determined
according to the resource bundle determination algorithm in
link:jstl.htm#50561102_94840[See Determinining the Resource Bundle for
an i18n Localization Context], using the configuration setting as the
resource bundle basename). If the i18n localization context determined
in this step does not contain any locale, go to the next step.

[#50561103_pgfId-1014173]##[#50561103_82066]##Formatting locale lookup

[#50561103_pgfId-1013779]##The formatting action establishes a locale
according to the algorithm described in link:jstl.htm#50561103_80223[See
Establishing a Formatting Locale]. This algorithm requires the preferred
locales. The way the preferred locales are set is exactly the same as
with i18n actions and is described in link:jstl.htm#50561102_10405[See
Preferred Locales].

[#50561103_pgfId-1014217]##The following example shows how the various
localization contexts can be established to define the formatting
locale.

[width="100%",cols="100%",]
|===
a|
[#50561103_pgfId-1014220]##<jsp:useBean id="now" class="java.util.Date"
/>

[#50561103_pgfId-1022444]##<%-- Formatting locale lookup --%> +
<fmt:formatDate value=â$\{now}â />

[#50561103_pgfId-1014221]##Â 

[#50561103_pgfId-1014223]##<fmt:bundle basename="Greetings">

[#50561103_pgfId-1014224]##<%-- I18n localization context from parent
<fmt:bundle> tag --%>

[#50561103_pgfId-1014226]##<fmt:message key="Welcome" />

[#50561103_pgfId-1014228]##<fmt:formatDate value=â$\{now}â />

[#50561103_pgfId-1014229]##</fmt:bundle>

|===

[#50561103_pgfId-1014212]##Â 

======= [#50561103_pgfId-1014251]##

image:jstl-35.gif[image]

[#50561103_80223]##Establishing a Formatting Locale

[#50561103_pgfId-1022533]##If a formatting action fails to leverage an
i18n localization context for its formatting locale â either because the
formatting action has no way of referring to an i18n localization
context, or the i18n localization context does not have any locale â it
must establish the formatting locale on its own, given an ordered set of
preferred locales, according to the formatting locale lookup algorithm
described in this section.

======= [#50561103_pgfId-1014314]##Locales Available for Formatting Actions

[#50561103_pgfId-1014048]##The algorithm described in
link:jstl.htm#50561103_98183[See Formatting Locale Lookup Algorithm]
compares preferred locales against the set of locales that are available
for a specific formatting action.

[#50561103_pgfId-1014329]##The locales available for actions
<fmt:formatNumber> and <fmt:parseNumber> are determined by a call to
_java.text.NumberFormat.getAvailableLocales()_ .

[#50561103_pgfId-1014049]##The locales available for <fmt:formatDate>
and <fmt:parseDate> are determined by a call to
_java.text.DateFormat.getAvailableLocales()_ .

======= [#50561103_pgfId-1013875]##[#50561103_56713]##Locale Lookup

[#50561103_pgfId-1020758]##The algorithm of
link:jstl.htm#50561103_98183[See Formatting Locale Lookup Algorithm]
describes how the proper locale is determined. This algorithm calls for
a locale lookup: it attempts to find among the available locales, a
locale that matches the specified one.

[#50561103_pgfId-1013876]##The locale lookup is similar to the resource
bundle lookup described in link:jstl.htm#50561102_30600[See Resource
Bundle Lookup], except that instead of trying to match a resource
bundle, the locale lookup tries to find a match in a list of available
locales. A match of the specified locale against an available locale is
therefore attempted in the following order:

[#50561103_pgfId-1019041]##Language, country, and variant are the same

[#50561103_pgfId-1019089]##Language and country are the same

[#50561103_pgfId-1019043]##Language is the same and the available locale
does not have a country

======= [#50561103_pgfId-1013881]##[#50561103_98183]##Formatting Locale Lookup Algorithm

[#50561103_pgfId-1018987]##Notes:

[#50561103_pgfId-1013882]##When there are multiple preferred locales,
they are processed in the order they were returned by a call to
_ServletRequest.getLocales()_ .

[#50561103_pgfId-1013883]##The algorithm stops as soon as a locale has
been selected for the localization context.

[#50561103_pgfId-1013884]##Step 1: Find a match within the ordered set
of preferred locales

[#50561103_pgfId-1018996]##A locale lookup (see
link:jstl.htm#50561103_56713[See Locale Lookup]) is performed for each
one of the preferred locales until a match is found. The first match is
used as the formatting locale.

[#50561103_pgfId-1019115]##Step 2: Find a match with the fallback locale

[#50561103_pgfId-1019126]##A locale lookup (see
link:jstl.htm#50561103_56713[See Locale Lookup]) is performed for the
fallback locale specified in the
_jakarta.servlet.jsp.jstl.fmt.fallbackLocale_ configuration setting. If a
match exists, it is used as the formatting locale.

[#50561103_pgfId-1019144]##If no match is found after the above two
steps, it is up to the formatting action to take a corrective action.

[#50561103_pgfId-1022561]##The result of the formatting locale lookup
algorithm may be cached, so that subsequent formatting actions that need
to establish the formatting locale on their own may leverage it.

======= [#50561103_pgfId-1012615]##

image:jstl-35.gif[image]

[#50561103_95693]##Time Zone

[#50561103_pgfId-1012616]##Time information on a page may be tailored to
the preferred time zone of a client. This is useful if the server
hosting the page and its clients reside in different time zones (page
authors could be advised to always use the "long" time format which
includes the time zone, but that would still require clients to convert
the formatted time into their own time zone).

[#50561103_pgfId-1021067]##When formatting time information using the
<fmt:formatDate> action (see Section 9.8), or parsing time information
that does not specify a time zone using the <fmt:parseDate> action (see
Section 9.9), the time zone to use is determined as follows and in this
order:

[#50561103_pgfId-1021072]##Use the time zone from the action's
_timeZone_ attribute.

[#50561103_pgfId-1021121]##If attribute _timeZone_ is not specified and
the action is nested inside an <fmt:timeZone> action, use the time zone
from the enclosing <fmt:timeZone> action.

[#50561103_pgfId-1021147]##Use the time zone given by the
_jakarta.servlet.jsp.jstl.fmt.timeZone_ configuration setting.

[#50561103_pgfId-1021163]##Use the JSP containerâs time zone.

======= [#50561103_pgfId-1014747]##

image:jstl-35.gif[image]

[#50561103_29598]##<fmt:timeZone>

[#50561103_pgfId-1021650]##Specifies the time zone in which time
information is to be formatted or parsed in its body content.

======= [#50561103_pgfId-1014749]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1014750]##<fmt:timeZone value=âtimeZoneâ>

[#50561103_pgfId-1014753]## body content

[#50561103_pgfId-1014754]##</fmt:timeZone>

======= [#50561103_pgfId-1014755]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1015521]##JSP. The JSP container processes the body
content and then writes it to the current _JspWriter_ . The action
ignores the body content.

======= [#50561103_pgfId-1014798]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1019561]##Name |[#50561103_pgfId-1019563]##Dyn
|[#50561103_pgfId-1019565]##Type |[#50561103_pgfId-1019567]##Description
|[#50561103_pgfId-1019569]## _value_ |[#50561103_pgfId-1019571]## _true_
a|
[#50561103_pgfId-1019573]## _String_ or

[#50561103_pgfId-1021556]##java.util.TimeZone

|[#50561103_pgfId-1019575]##The time zone. A _String_ value is
interpreted as a time zone ID. This may be one of the time zone IDs
supported by the Java platform (such as "America/Los_Angeles") or a
custom time zone ID (such as "GMT-8"). See _java.util.TimeZone_ for more
information on supported time zone formats.
|===

======= [#50561103_pgfId-1020582]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1020591]##If _value_ is null or empty, the GMT timezone
is used.

======= [#50561103_pgfId-1021364]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1021661]##The <fmt:timeZone> action specifies the time
zone in which to format or parse the time information of any nested time
formatting (see Section 9.8) or parsing (see Section 9.9) actions.

[#50561103_pgfId-1022572]##If the time zone is given as a string, it is
parsed using _java.util.TimeZone.getTimeZone()_ .

======= [#50561103_pgfId-1021569]##

image:jstl-35.gif[image]

<fmt:setTimeZone>

[#50561103_pgfId-1021685]##Stores the specified time zone in a scoped
variable or the time zone configuration variable.

======= [#50561103_pgfId-1021571]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1021572]##<fmt:setTimeZone value=âtimeZoneâ

{empty}[#50561103_pgfId-1021709]## [var=âvarNameâ]

[#50561103_pgfId-1021712]##
[scope=â\{page|request|session|application}â]/>

======= [#50561103_pgfId-1021577]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1021578]##Empty.

======= [#50561103_pgfId-1021613]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1021581]##Name |[#50561103_pgfId-1021583]##Dyn
|[#50561103_pgfId-1021585]##Type |[#50561103_pgfId-1021587]##Description
|[#50561103_pgfId-1021589]## _value_ |[#50561103_pgfId-1021591]## _true_
a|
[#50561103_pgfId-1021593]## _String_ or

[#50561103_pgfId-1021594]##java.util.TimeZone

|[#50561103_pgfId-1021596]##The time zone. A _String_ value is
interpreted as a time zone ID. This may be one of the time zone IDs
supported by the Java platform (such as "America/Los_Angeles") or a
custom time zone ID (such as "GMT-8"). See java.util.TimeZone for more
information on supported time zone formats.

|[#50561103_pgfId-1021598]## _var_ |[#50561103_pgfId-1021600]## _false_
|[#50561103_pgfId-1021602]## _String_ |[#50561103_pgfId-1021604]##Name
of the exported scoped variable which stores the time zone of type
_java.util.TimeZone_ .

|[#50561103_pgfId-1021606]## _scope_ |[#50561103_pgfId-1021608]##
_false_ |[#50561103_pgfId-1021610]## _String_
|[#50561103_pgfId-1021612]##Scope of _var_ or the time zone
configuration variable.
|===

======= [#50561103_pgfId-1021614]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1021615]##If _value_ is null or empty, the GMT timezone
is used.

======= [#50561103_pgfId-1021616]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1021714]##The <fmt:setTimeZone> action stores the given
time zone in the scoped variable whose name is given by _var_ . If _var_
is not specified, the time zone is stored in the
_jakarta.servlet.jsp.jstl.fmt.timeZone_ configuration variable, thereby
making it the new default time zone in the given scope.

[#50561103_pgfId-1022573]##If the time zone is given as a string, it is
parsed using _java.util.TimeZone.getTimeZone()_ .

======= [#50561103_pgfId-1014890]##

image:jstl-35.gif[image]

<fmt:formatNumber>

[#50561103_pgfId-1014891]##Formats a numeric value in a locale-sensitive
or customized manner as a number, currency, or percentage.

======= [#50561103_pgfId-1014892]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1019363]## _Syntax 1: without a body_

[#50561103_pgfId-1014893]##<fmt:formatNumber value=ânumericValueâ

{empty}[#50561103_pgfId-1014894]##[type=â\{number|currency|percent}â]

{empty}[#50561103_pgfId-1014895]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1014897]##[currencyCode=âcurrencyCodeâ]

{empty}[#50561103_pgfId-1014898]##[currencySymbol=âcurrencySymbolâ]

{empty}[#50561103_pgfId-1014899]##[groupingUsed=â\{true|false}â]

{empty}[#50561103_pgfId-1014900]##[maxIntegerDigits=âmaxIntegerDigitsâ]

{empty}[#50561103_pgfId-1014901]##[minIntegerDigits=âminIntegerDigitsâ]

{empty}[#50561103_pgfId-1014902]##[maxFractionDigits=âmaxFractionDigitsâ]

{empty}[#50561103_pgfId-1014903]##[minFractionDigits=âminFractionDigitsâ]

{empty}[#50561103_pgfId-1014904]##[var=âvarNameâ]

[#50561103_pgfId-1014905]##[scope=â\{page|request|session|application}â]/>

[#50561103_pgfId-1019367]## _Syntax 2: with a body to specify the
numeric value to be formatted_

{empty}[#50561103_pgfId-1019343]##<fmt:formatNumber
[type=â\{number|currency|percent}â]

{empty}[#50561103_pgfId-1019345]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1019347]##[currencyCode=âcurrencyCodeâ]

{empty}[#50561103_pgfId-1019348]##[currencySymbol=âcurrencySymbolâ]

{empty}[#50561103_pgfId-1019349]##[groupingUsed=â\{true|false}â]

{empty}[#50561103_pgfId-1019350]##[maxIntegerDigits=âmaxIntegerDigitsâ]

{empty}[#50561103_pgfId-1019351]##[minIntegerDigits=âminIntegerDigitsâ]

{empty}[#50561103_pgfId-1019352]##[maxFractionDigits=âmaxFractionDigitsâ]

{empty}[#50561103_pgfId-1019353]##[minFractionDigits=âminFractionDigitsâ]

{empty}[#50561103_pgfId-1019354]##[var=âvarNameâ]

[#50561103_pgfId-1019376]##[scope=â\{page|request|session|application}â]>

[#50561103_pgfId-1019377]## numeric value to be formatted

[#50561103_pgfId-1019378]##</fmt:formatNumber>

======= [#50561103_pgfId-1014908]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1015535]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561103_pgfId-1015051]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1019640]##Name |[#50561103_pgfId-1019642]##Dyn
|[#50561103_pgfId-1019644]##Type |[#50561103_pgfId-1019646]##Description
|[#50561103_pgfId-1019648]## _value_ |[#50561103_pgfId-1019650]## _true_
|[#50561103_pgfId-1019652]## _String or Number_
|[#50561103_pgfId-1019654]##Numeric value to be formatted.

|[#50561103_pgfId-1019656]##type |[#50561103_pgfId-1019658]## _true_
|[#50561103_pgfId-1019660]##String |[#50561103_pgfId-1019662]##Specifies
whether the value is to be formatted as number, currency, or percentage.

|[#50561103_pgfId-1019664]##pattern |[#50561103_pgfId-1019666]## _true_
|[#50561103_pgfId-1019668]##String |[#50561103_pgfId-1019670]##Custom
formatting pattern.

|[#50561103_pgfId-1019680]##currencyCode
|[#50561103_pgfId-1019682]##true |[#50561103_pgfId-1019684]##String
|[#50561103_pgfId-1019686]##ISO 4217 currency code. Applied only when
formatting currencies (i.e. if _type_ is equal to "currency"); ignored
otherwise.

|[#50561103_pgfId-1019688]##currencySymbol
|[#50561103_pgfId-1019690]##true |[#50561103_pgfId-1019692]##String
|[#50561103_pgfId-1019694]##Currency symbol. Applied only when
formatting currencies (i.e. if _type_ is equal to "currency"); ignored
otherwise.

|[#50561103_pgfId-1019696]##groupingUsed
|[#50561103_pgfId-1019698]##true |[#50561103_pgfId-1019700]##boolean
|[#50561103_pgfId-1019702]##Specifies whether the formatted output will
contain any grouping separators.

|[#50561103_pgfId-1019704]##maxIntegerDigits
|[#50561103_pgfId-1019706]##true |[#50561103_pgfId-1019708]##int
|[#50561103_pgfId-1019710]##Maximum number of digits in the integer
portion of the formatted output.

|[#50561103_pgfId-1019712]##minIntegerDigits
|[#50561103_pgfId-1019714]##true |[#50561103_pgfId-1019716]##int
|[#50561103_pgfId-1019718]##Minimum number of digits in the integer
portion of the formatted output.

|[#50561103_pgfId-1019720]##maxFractionDigits
|[#50561103_pgfId-1019722]##true |[#50561103_pgfId-1019724]##int
|[#50561103_pgfId-1019726]##Maximum number of digits in the fractional
portion of the formatted output.

|[#50561103_pgfId-1019728]##minFractionDigits
|[#50561103_pgfId-1019730]##true |[#50561103_pgfId-1019732]##int
|[#50561103_pgfId-1019734]##Minimum number of digits in the fractional
portion of the formatted output.

|[#50561103_pgfId-1019736]## _var_ |[#50561103_pgfId-1019738]## _false_
|[#50561103_pgfId-1019740]## _String_ |[#50561103_pgfId-1019742]##Name
of the exported scoped variable which stores the formatted result as a
String.

|[#50561103_pgfId-1019744]## _scope_ |[#50561103_pgfId-1019746]##
_false_ |[#50561103_pgfId-1019748]## _String_
|[#50561103_pgfId-1019750]##Scope of var.
|===

======= [#50561103_pgfId-1015052]##Constraints

image:jstl-36.gif[image]

[#50561103_pgfId-1015053]##If _scope_ is specified, _var_ must also be
specified.

[#50561103_pgfId-1015055]##The value of the _currencyCode_ attribute
must be a valid ISO 4217 currency code.

======= [#50561103_pgfId-1020533]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1020859]##If _value_ is null or empty, nothing is
written to the current JspWriter object and the scoped variable is
removed if it is specified (see attributes _var_ and _scope_ ).

[#50561103_pgfId-1022481]##If this action fails to determine a
formatting locale, it uses _Number.toString()_ as the output format.

[#50561103_pgfId-1022909]##If the attribute _pattern_ is null or empty,
it is ignored.

[#50561103_pgfId-1022586]##If an exception occurs during the parsing of
a string value, it must be caught and rethrown as a _JspException_ . The
message of the rethrown _JspException_ must include the string value,
and the caught exception must be provided as the root cause.

======= [#50561103_pgfId-1015059]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1015060]##The numeric value to be formatted may be
specified via the _value_ attribute; if missing, it is read from the
tagâs body content.

[#50561103_pgfId-1022914]##The formatting pattern may be specified via
the _pattern_ attribute, or is looked up in a locale-dependent fashion.

[#50561103_pgfId-1022917]##A pattern string specified via the _pattern_
attribute must follow the pattern syntax specified by the class
_java.text.DecimalFormat_ .

[#50561103_pgfId-1023324]##If looked up in a locale-dependent fashion,
the formatting pattern is determined via a combination of the formatting
locale, which is determined according to
link:jstl.htm#50561103_23402[See Formatting Locale], and the _type_
attribute. Depending on the value of the _type_ attribute, the given
numeric value is formatted as a number, currency, or percentage. The
locale's default formatting pattern for numbers, currencies, or
percentages is determined by calling the _java.text.NumberFormat_ method
_getNumberInstance_ , _getCurrencyInstance_ , or _getPercentInstance_ ,
respectively, with the formatting locale.

[#50561103_pgfId-1022929]##The _pattern_ attribute takes precedence over
_type_ . In either case, the formatting symbols (such as decimal
separator and grouping separator) are given by the formatting locale.

[#50561103_pgfId-1022933]##The (specified or locale-dependent)
formatting pattern may be further fine-tuned using the formatting
options described below.

[#50561103_pgfId-1022937]##If the numeric value is given as a string
literal, it is first parsed into a _java.lang.Number_ . If the string
does not contain any decimal point, it is parsed using
_java.lang.Long.valueOf()_ , or _java.lang.Double.valueOf()_ otherwise.

[#50561103_pgfId-1022942]##The formatted result is output to the current
_JspWriter_ object, unless the _var_ attribute is given, in which case
it is stored in the named scoped variable.

[#50561103_pgfId-1015070]##Formatting Options

[#50561103_pgfId-1015071]##The _groupingUsed_ attribute specifies
whether the formatted ouput will contain any grouping separators. See
the _java.text.NumberFormat_ method _setGroupingUsed()_ for more
information.

[#50561103_pgfId-1015072]##The minimum and maximum number of digits in
the integer and fractional portions of the formatted output may be given
via the _minIntegerDigits_ , _maxIntegerDigits_ , _minFractionDigits_ ,
and _maxFractionDigits_ attributes, respectively. See the
_java.text.NumberFormat_ methods _setMinimumIntegerDigits()_ ,
_setMaximumIntegerDigits()_ , _setMinimumFractionDigits()_ , and
_setMaximumFractionDigits()_ for more information.

[#50561103_pgfId-1015075]##Formatting Currencies

[#50561103_pgfId-1023072]##When formatting currencies using the
specified or locale-dependent formatting pattern for currencies, the
currency symbol of the formatting locale is used by default. It can be
overridden by using the _currencySymbol_ or _currencyCode_ attributes,
which specify the currency symbol or currency code, respectively, of the
currency to use.

[#50561103_pgfId-1015077]##If both _currencyCode_ and _currencySymbol_
are present, _currencyCode_ takes precedence over _currencySymbol_ if
the _java.util.Currency_ class is defined in the containerâs runtime
(that is, if the containerâs runtime is J2SE 1.4 or greater), and
_currencySymbol_ takes precendence otherwise. If only _currencyCode_ is
given, it is used as a currency symbol if _java.util.Currency_ is not
defined.

======= [#50561103_pgfId-1015079]##

image:jstl-35.gif[image]

[#50561103_56749]##<fmt:parseNumber>

[#50561103_pgfId-1015080]##Parses the string representation of numbers,
currencies, and percentages that were formatted in a locale-sensitive or
customized manner.

======= [#50561103_pgfId-1015081]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1019416]## _Syntax 1: without a body_

[#50561103_pgfId-1015082]##<fmt:parseNumber value=ânumericValueâ

{empty}[#50561103_pgfId-1015083]##[type=â\{number|currency|percent}â]

{empty}[#50561103_pgfId-1015084]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1015085]##[parseLocale=âparseLocaleâ]

{empty}[#50561103_pgfId-1015086]##[integerOnly=â\{true|false}â]

{empty}[#50561103_pgfId-1015087]##[var=âvarNameâ]

[#50561103_pgfId-1015088]##[scope=â\{page|request|session|application}â]/>

[#50561103_pgfId-1019420]## _Syntax 2: with a body to specify the
numeric value to be parsed_

{empty}[#50561103_pgfId-1019397]##<fmt:parseNumber
[type=â\{number|currency|percent}â]

{empty}[#50561103_pgfId-1019399]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1019400]##[parseLocale=âparseLocaleâ]

{empty}[#50561103_pgfId-1019401]##[integerOnly=â\{true|false}â]

{empty}[#50561103_pgfId-1019402]##[var=âvarNameâ]

[#50561103_pgfId-1019434]##[scope=â\{page|request|session|application}â]>

[#50561103_pgfId-1019435]## numeric value to be parsed

[#50561103_pgfId-1019436]##</fmt:parseNumber>

[#50561103_pgfId-1019395]##Â 

======= [#50561103_pgfId-1015091]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1015542]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561103_pgfId-1015174]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1019758]##Name |[#50561103_pgfId-1019760]##Dyn
|[#50561103_pgfId-1019762]##Type |[#50561103_pgfId-1019764]##Description
|[#50561103_pgfId-1019766]## _value_ |[#50561103_pgfId-1019768]## _true_
|[#50561103_pgfId-1019770]## _String_ |[#50561103_pgfId-1019772]##String
to be parsed.

|[#50561103_pgfId-1019774]##type |[#50561103_pgfId-1019776]## _true_
|[#50561103_pgfId-1019778]##String |[#50561103_pgfId-1019780]##Specifies
whether the string in the _value_ attribute should be parsed as a
number, currency, or percentage.

|[#50561103_pgfId-1019782]##pattern |[#50561103_pgfId-1019784]## _true_
|[#50561103_pgfId-1019786]##String |[#50561103_pgfId-1020424]##Custom
formatting pattern that determines how the string in the _value_
attribute is to be parsed.

|[#50561103_pgfId-1019790]##parseLocale |[#50561103_pgfId-1019792]##
_true_ a|
[#50561103_pgfId-1019794]##String or

[#50561103_pgfId-1021857]##java.util.Locale

|[#50561103_pgfId-1019796]##Locale whose default formatting pattern (for
numbers, currencies, or percentages, respectively) is to be used during
the parse operation, or to which the pattern specified via the _pattern_
attribute (if present) is applied.

|[#50561103_pgfId-1019798]##integerOnly |[#50561103_pgfId-1019800]##true
|[#50561103_pgfId-1019802]##boolean
|[#50561103_pgfId-1019804]##Specifies whether just the integer portion
of the given value should be parsed.

|[#50561103_pgfId-1019806]## _var_ |[#50561103_pgfId-1019808]## _false_
|[#50561103_pgfId-1019810]## _String_ |[#50561103_pgfId-1019812]##Name
of the exported scoped variable which stores the parsed result (of type
_java.lang.Number_ ).

|[#50561103_pgfId-1019814]## _scope_ |[#50561103_pgfId-1019816]##
_false_ |[#50561103_pgfId-1019818]## _String_
|[#50561103_pgfId-1019820]##Scope of var.
|===

======= [#50561103_pgfId-1015175]##Constraints

image:jstl-36.gif[image]

[#50561103_pgfId-1015176]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561103_pgfId-1020542]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1020547]##If the numeric string to be parsed is null or
empty, the scoped variable defined by attributes _var_ and _scope_ is
removed. This allows "empty" input to be distinguished from "invalid"
input, which causes an exception.

[#50561103_pgfId-1022515]##If _parseLocale_ is null or empty, it is
treated as if it was missing.

[#50561103_pgfId-1022498]##If an exception occurs during the parsing of
the value, it must be caught and rethrown as a _JspException_ . The
message of the rethrown _JspException_ must include the value that was
to be parsed, and the caught exception must be provided as the root
cause.

[#50561103_pgfId-1022593]##If this action fails to determine a
formatting locale, it must throw a _JspException_ whose message must
include the value that was to be parsed.

[#50561103_pgfId-1023107]##If the attribute _pattern_ is null or empty,
it is ignored.

======= [#50561103_pgfId-1015180]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1023137]##The numeric value to be parsed may be
specified via the _value_ attribute; if missing, it is read from the
action's body content.

[#50561103_pgfId-1023140]##The parse pattern may be specified via the
_pattern_ attribute, or is looked up in a locale-dependent fashion.

[#50561103_pgfId-1023143]##A pattern string specified via the _pattern_
attribute must follow the pattern syntax specified by
_java.text.DecimalFormat_ .

[#50561103_pgfId-1023146]##If looked up in a locale-dependent fashion,
the parse pattern is determined via a combination of the _type_ and
_parseLocale_ attributes. Depending on the value of the _type_
attribute, the given numeric value is parsed as a number, currency, or
percentage. The parse pattern for numbers, currencies, or percentages is
determined by calling the _java.text.NumberFormat_ method
_getNumberInstance_ , _getCurrencyInstance_ , or _getPercentInstance_ ,
respectively, with the locale specified via _parseLocale_ . If
_parseLocale_ is missing, the formatting locale, which is obtained
according to link:jstl.htm#50561103_23402[See Formatting Locale], is
used as the parse locale.

[#50561103_pgfId-1023157]##The _pattern_ attribute takes precedence over
_type_ . In either case, the formatting symbols in the pattern (such as
decimal separator and grouping separator) are given by the parse locale.

[#50561103_pgfId-1023161]##The _integerOnly_ attribute specifies whether
just the integer portion of the given value should be parsed. See the
_java.text.NumberFormat_ method _setParseIntegerOnly()_ for more
information.

[#50561103_pgfId-1023165]##If the _var_ attribute is given, the parse
result (of type _java.lang.Number_ ) is stored in the named scoped
variable. Otherwise, it is output to the current _JspWriter_ object
using _java.lang.Number.toString()_ .

======= [#50561103_pgfId-1015190]##

image:jstl-35.gif[image]

[#50561103_46965]##<fmt:formatDate>

[#50561103_pgfId-1015191]##Allows the formatting of dates and times in a
locale-sensitive or customized manner.

======= [#50561103_pgfId-1015192]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1015193]##<fmt:formatDate value="date"

{empty}[#50561103_pgfId-1015194]##[type="\{time|date|both}"]

{empty}[#50561103_pgfId-1015195]##[dateStyle="\{default|short|medium|long|full}"]

{empty}[#50561103_pgfId-1015196]##[timeStyle="\{default|short|medium|long|full}"]

{empty}[#50561103_pgfId-1015197]##[pattern="customPattern"]

{empty}[#50561103_pgfId-1015198]##[timeZone="timeZone"]

{empty}[#50561103_pgfId-1015200]##[var="varName"]

[#50561103_pgfId-1015201]##[scope="\{page|request|session|application}"]/>

======= [#50561103_pgfId-1015202]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1022352]##Empty.

======= [#50561103_pgfId-1015305]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1019825]##Name |[#50561103_pgfId-1019827]##Dynamic
|[#50561103_pgfId-1019829]##Type |[#50561103_pgfId-1019831]##Description
|[#50561103_pgfId-1019833]## _value_ |[#50561103_pgfId-1019835]## _true_
a|
[#50561103_pgfId-1019837]## _java.util._

[#50561103_pgfId-1019838]## _Date_

|[#50561103_pgfId-1019840]##Date and/or time to be formatted.

|[#50561103_pgfId-1019842]##type |[#50561103_pgfId-1019844]## _true_
|[#50561103_pgfId-1019846]##String |[#50561103_pgfId-1019848]##Specifies
whether the time, the date, or both the time and date components of the
given date are to be formatted.

|[#50561103_pgfId-1019850]##dateStyle |[#50561103_pgfId-1019852]##true
|[#50561103_pgfId-1019854]##String
|[#50561103_pgfId-1020438]##Predefined formatting style for dates.
Follows the semantics defined in class _java.text.DateFormat_ . Applied
only when formatting a date or both a date and time (i.e. if _type_ is
missing or is equal to "date" or "both"); ignored otherwise.

|[#50561103_pgfId-1019858]##timeStyle |[#50561103_pgfId-1019860]##true
|[#50561103_pgfId-1019862]##String
|[#50561103_pgfId-1020461]##Predefined formatting style for times.
Follows the semantics defined in class _java.text.DateFormat_ . Applied
only when formatting a time or both a date and time (i.e. if _type_ is
equal to "time" or "both"); ignored otherwise.

|[#50561103_pgfId-1019866]##pattern |[#50561103_pgfId-1019868]## _true_
|[#50561103_pgfId-1019870]##String |[#50561103_pgfId-1019872]##Custom
formatting style for dates and times.

|[#50561103_pgfId-1019874]##timeZone |[#50561103_pgfId-1019876]## _true_
a|
[#50561103_pgfId-1019878]##String or java.util.

[#50561103_pgfId-1019879]##TimeZone

|[#50561103_pgfId-1019881]##Time zone in which to represent the
formatted time.

|[#50561103_pgfId-1019891]## _var_ |[#50561103_pgfId-1019893]## _false_
|[#50561103_pgfId-1019895]## _String_ |[#50561103_pgfId-1019897]##Name
of the exported scoped variable which stores the formatted result as a
_String_ .

|[#50561103_pgfId-1019899]## _scope_ |[#50561103_pgfId-1019901]##
_false_ |[#50561103_pgfId-1019903]## _String_
|[#50561103_pgfId-1019905]##Scope of var.
|===

======= [#50561103_pgfId-1015306]##Constraints

image:jstl-36.gif[image]

[#50561103_pgfId-1015307]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561103_pgfId-1020514]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1023449]##If _value_ is null or empty, nothing is
written to the current JspWriter object and the scoped variable is
removed if it is specified (see attributes _var_ and _scope_ ).

[#50561103_pgfId-1020693]##If _timeZone_ is null or empty, it is handled
as if it was missing.

[#50561103_pgfId-1022500]##If this action fails to determine a
formatting locale, it uses _java.util.Date.toString()_ as the output
format.

======= [#50561103_pgfId-1015309]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1015310]##Depending on the value of the _type_
attribute, only the time, the date, or both the time and date components
of the date specified via the _value_ attribute or the body content are
formatted, using one of the predefined formatting styles for dates
(specified via the _dateStyle_ attribute) and times (specified via the
_timeStyle_ attribute) of the formatting locale, which is determined
according to link:jstl.htm#50561103_23402[See Formatting Locale].

[#50561103_pgfId-1020926]## _dateStyle_ and _timeStyle_ support the
semantics defined in _java.text.DateFormat_ .

[#50561103_pgfId-1021850]##Page authors may also apply a customized
formatting style to their times and dates by specifying the _pattern_
attribute, in which case the _type_ , _dateStyle_ , and _timeStyle_
attributes are ignored. The specified formatting pattern must use the
pattern syntax specified by _java.text.SimpleDateFormat._

[#50561103_pgfId-1022335]##In order to format the current date and time,
a <jsp:useBean> action may be used as follows:

[#50561103_pgfId-1022336]##<jsp:useBean id="now" class="java.util.Date"
/> +
<fmt:formatDate value="$\{now}" />

[#50561103_pgfId-1021917]##If the string representation of a date or
time needs to be formatted, the string must first be parsed into a
_java.util.Date_ using the <fmt:parseDate> action, whose parsing result
may then be supplied to the <fmt:formatDate> action:

[#50561103_pgfId-1022355]##<fmt:parseDate value=â4/13/02"
pattern="M/d/yy" var="parsed"/> +
<fmt:formatDate value="$\{parsed}" dateStyle="full"/>

[#50561103_pgfId-1015318]##The actionâs result is output to the current
_JspWriter_ object, unless the _var_ attribute is specified, in which
case it is stored in the named scoped variable.

======= [#50561103_pgfId-1015320]##

image:jstl-35.gif[image]

[#50561103_22073]##<fmt:parseDate>

[#50561103_pgfId-1015321]##Parses the string representation of dates and
times that were formatted in a locale-sensitive or customized manner.

======= [#50561103_pgfId-1015322]##Syntax

image:jstl-36.gif[image]

[#50561103_pgfId-1019498]## _Syntax 1: without a body_

[#50561103_pgfId-1015323]##<fmt:parseDate value=âdateStringâ

{empty}[#50561103_pgfId-1015324]##[type=â\{time|date|both}â]

{empty}[#50561103_pgfId-1015325]##[dateStyle=â\{default|short|medium|long|full}â]

{empty}[#50561103_pgfId-1015326]##[timeStyle=â\{default|short|medium|long|full}â]

{empty}[#50561103_pgfId-1015327]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1015328]##[timeZone=âtimeZoneâ]

{empty}[#50561103_pgfId-1015329]##[parseLocale=âparseLocaleâ]

{empty}[#50561103_pgfId-1015330]##[var=âvarNameâ]

[#50561103_pgfId-1015331]##[scope=â\{page|request|session|application}â]/>

[#50561103_pgfId-1019502]## _Syntax 2: with a body to specify the date
value to be parsed_

{empty}[#50561103_pgfId-1019482]##<fmt:parseDate
[type=â\{time|date|both}â]

{empty}[#50561103_pgfId-1019484]##[dateStyle=â\{default|short|medium|long|full}â]

{empty}[#50561103_pgfId-1019485]##[timeStyle=â\{default|short|medium|long|full}â]

{empty}[#50561103_pgfId-1019486]##[pattern=âcustomPatternâ]

{empty}[#50561103_pgfId-1019487]##[timeZone=âtimeZoneâ]

{empty}[#50561103_pgfId-1019488]##[parseLocale=âparseLocaleâ]

{empty}[#50561103_pgfId-1019489]##[var=âvarNameâ]

[#50561103_pgfId-1019490]##[scope=â\{page|request|session|application}â]>

[#50561103_pgfId-1019491]## date value to be parsed

[#50561103_pgfId-1019492]##</fmt:parseDate>

======= [#50561103_pgfId-1015334]##Body Content

image:jstl-36.gif[image]

[#50561103_pgfId-1015550]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561103_pgfId-1015437]##Attributes

image:jstl-36.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561103_pgfId-1019911]##Name |[#50561103_pgfId-1019913]##Dyn
|[#50561103_pgfId-1019915]##Type |[#50561103_pgfId-1019917]##Description
|[#50561103_pgfId-1019919]## _value_ |[#50561103_pgfId-1019921]## _true_
|[#50561103_pgfId-1019923]## _String_ |[#50561103_pgfId-1019925]##Date
string to be parsed.

|[#50561103_pgfId-1019927]##type |[#50561103_pgfId-1019929]## _true_
|[#50561103_pgfId-1019931]##String |[#50561103_pgfId-1019933]##Specifies
whether the date string in the _value_ attribute is supposed to contain
a time, a date, or both.

|[#50561103_pgfId-1019935]##dateStyle |[#50561103_pgfId-1019937]##true
|[#50561103_pgfId-1019939]##String
|[#50561103_pgfId-1019941]##Predefined formatting style for days which
determines how the date component of the date string is to be parsed.
Applied only when formatting a date or both a date and time (i.e. if
_type_ is missing or is equal to "date" or "both"); ignored otherwise.

|[#50561103_pgfId-1019943]##timeStyle |[#50561103_pgfId-1019945]##true
|[#50561103_pgfId-1019947]##String
|[#50561103_pgfId-1019949]##Predefined formatting styles for times which
determines how the time component in the date string is to be parsed.
Applied only when formatting a time or both a date and time (i.e. if
_type_ is equal to "timeâ or "bothâ); ignored otherwise.

|[#50561103_pgfId-1019951]##pattern |[#50561103_pgfId-1019953]## _true_
|[#50561103_pgfId-1019955]##String |[#50561103_pgfId-1019957]##Custom
formatting pattern which determines how the date string is to be parsed.

|[#50561103_pgfId-1019959]##timeZone |[#50561103_pgfId-1019961]## _true_
|[#50561103_pgfId-1019963]##String or java.util.TimeZone
|[#50561103_pgfId-1019966]##Time zone in which to interpret any time
information in the date string.

|[#50561103_pgfId-1019968]##parseLocale |[#50561103_pgfId-1019970]##
_true_ a|
[#50561103_pgfId-1019972]##String or

[#50561103_pgfId-1021867]##java.util.Locale

|[#50561103_pgfId-1019974]##Locale whose predefined formatting styles
for dates and times are to be used during the parse operation, or to
which the pattern specified via the _pattern_ attribute (if present) is
applied.

|[#50561103_pgfId-1019976]## _var_ |[#50561103_pgfId-1019978]## _false_
|[#50561103_pgfId-1019980]## _String_ |[#50561103_pgfId-1019982]##Name
of the exported scoped variable in which the parsing result (of type
_java.util.Date_ ) is stored.

|[#50561103_pgfId-1019984]## _scope_ |[#50561103_pgfId-1019986]##
_false_ |[#50561103_pgfId-1019988]## _String_
|[#50561103_pgfId-1019990]##Scope of var.
|===

======= [#50561103_pgfId-1015438]##Constraints

image:jstl-36.gif[image]

[#50561103_pgfId-1015439]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561103_pgfId-1020573]##Null & Error Handling

image:jstl-36.gif[image]

[#50561103_pgfId-1020574]##If the date string to be parsed is null or
empty, the scoped variable defined by _var_ and _scope_ is removed. This
allows "empty" input to be distinguished from "invalid" input, which
causes an exception.

[#50561103_pgfId-1020716]##If _timeZone_ is null or empty, it is treated
as if it was missing.

[#50561103_pgfId-1022513]##If _parseLocale_ is null or empty, it is
treated as if it was missing.

[#50561103_pgfId-1022512]##If an exception occurs during the parsing of
the value, it must be caught and rethrown as a _JspException_ . The
message of the rethrown _JspException_ must include the value that was
to be parsed, and the caught exception must be provided as the root
cause.

[#50561103_pgfId-1022604]##If this action fails to determine a
formatting locale, it must throw a _JspException_ whose message must
include the value that was to be parsed.

======= [#50561103_pgfId-1015443]##Description

image:jstl-36.gif[image]

[#50561103_pgfId-1015444]##The date string to be parsed may be specified
via the _value_ attribute or via the tagâs body content.

[#50561103_pgfId-1023349]##Depending on the value of the _type_
attribute, the given date string is supposed to contain only a time,
only a date, or both. It is parsed according to one of the predefined
formatting styles for dates (specified via the _dateStyle_ attribute)
and times (specified via the _timeStyle_ attribute) of the locale
specified by the _parseLocale_ attribute. If the _parseLocale_ attribute
is missing, the formatting locale, which is determined according to
link:jstl.htm#50561103_23402[See Formatting Locale], is used as the
parse locale.

[#50561103_pgfId-1021329]##If the given date string uses a different
format, the pattern required to parse it must be specified via the
_pattern_ attribute, which must use the pattern syntax specified by
_java.text.SimpleDateFormat_ . In this case, the _type_ , _dateStyle_ ,
and _timeStyle_ attributes are ignored. Parsing is non-lenient, i.e. the
given date string must strictly adhere to the parsing format.

[#50561103_pgfId-1021200]##If the given time information does not
specify a time zone, it is interpreted in the time zone determined
according to Section 9.4.

[#50561103_pgfId-1022037]##If the _var_ attribute is given, the parsing
result (of type _java.util.Date_ ) is stored in the named scoped
variable. Otherwise, it is output to the current _JspWriter_ using the
_java.util.Date_ method _toString()_ .

======= [#50561103_pgfId-1021501]##

image:jstl-35.gif[image]

Configuration Settings

[#50561103_pgfId-1021534]##This section describes the formatting-related
configuration settings. Refer to link:jstl.htm#50561096_18174[See
Configuration Data] for more information on how JSTL processes
configuration data.

======= [#50561103_pgfId-1021464]##TimeZone

[width="100%",cols="50%,50%",]
|===
|[#50561103_pgfId-1021449]## _Variable name_
|[#50561103_pgfId-1021451]## _jakarta.servlet.jsp.jstl.fmt.timeZone_

|[#50561103_pgfId-1021453]##Java Constant |[#50561103_pgfId-1021455]##
_Config.FMT_TIMEZONE_

|[#50561103_pgfId-1021457]##Type |[#50561103_pgfId-1021459]##String or
java.util.TimeZone

|[#50561103_pgfId-1022472]##Set by
|[#50561103_pgfId-1022470]##<fmt:setTimeZone>

|[#50561103_pgfId-1021461]##Used by
|[#50561103_pgfId-1021463]##<fmt:formatDate>, <fmt:parseDate>
|===

[#50561103_pgfId-1021465]##Specifies the applicationâs default time
zone. A _String_ value is interpreted as defined in action
<fmt:timeZone> (see link:jstl.htm#50561103_29598[See <fmt:timeZone>]).

======= [#50561104_pgfId-874]##[#50561104_55570]##Â 

======= [#50561104_pgfId-1004128]##

image:jstl-37.gif[image]

[#50561104_14521]##SQL Actions

======= [#50561104_pgfId-1014812]##sql tag library

image:jstl-38.gif[image]

[#50561104_pgfId-1005476]##Many web applications need to access
relational databases as the source of dynamic data for their
presentation layer. While it is generally preferred to have database
operations handled within the business logic of a web application
designed with an MVC architecture, there are situations where page
authors require this capability within their JSP pages (e.g.
prototyping/testing, small scale/simple applications, lack of developer
resources).

[#50561104_pgfId-1010052]##The JSTL SQL actions provide the basic
capabilities to easily interact with relational databases.

======= [#50561104_pgfId-999293]##

image:jstl-39.gif[image]

[#50561104_47767]##Overview

[#50561104_pgfId-1005496]##The JSTL SQL actions allow page authors to:

[#50561104_pgfId-1005498]##Perform database queries ( _select_ )

[#50561104_pgfId-1009723]##Easily access query results

[#50561104_pgfId-1010057]##Perform database updates ( _insert_ ,
_update_ , _delete_ )

[#50561104_pgfId-1010060]##Group several database operations into a
transaction

======= [#50561104_pgfId-1010081]##[#50561104_45882]##Data Source

[#50561104_pgfId-1008558]##SQL actions operate on a data source, as
defined by the Java class _jakarta.sql.DataSource_ . A _DataSource_ object
provides connections to the physical data source it represents. Within
the context of a _Connection_ retrieved from the _DataSource_ , SQL
statements are executed and results are returned.

[#50561104_pgfId-1016853]##A data source can be specified explicitly via
the _dataSource_ attribute in SQL actions, or it can be totally
transparent to a page author by taking advantage of the data source
configuration setting ( _jakarta.servlet.jsp.jstl.sql.dataSource_ ).

[#50561104_pgfId-1019437]##There are two ways a data source can be
specified as a string.

[#50561104_pgfId-1019445]##The first way is through a JNDI relative
path, assuming a container supporting JNDI. For example, with the
absolute JNDI resource path _java:comp/env/jdbc/myDatabase_ , the JNDI
relative path to the data source resource would simply be
_jdbc/myDatabase_ , given that _java:comp/env_ is the standard JNDI root
for a J2EE application.

[#50561104_pgfId-1020004]##The second way is by specifying the
parameters needed by the JDBC _DriverManager_ class, using the following
syntax (see link:jstl.htm#50561104_69549[See <sql:setDataSource>] for
details on the JDBC parameters)

[#50561104_pgfId-1019463]## _url[,[driver][,[user][,password]]]_

[#50561104_pgfId-1019475]##For example,

[#50561104_pgfId-1019482]##
_jdbc:mysql://localhost/,org.gjt.mm.mysql.Driver_

[#50561104_pgfId-1019479]##where the database has been setup for access
without any username or password. If the â,â character occurs in any of
the JDBC parameters, it can be escaped by â\â. The character â\â itself
can be escaped in the same way.

[#50561104_pgfId-1017422]##While the JDBC _DriverManager_ class provides
a low cost way to use SQL actions, it is not recommended to use it other
than for prototyping purposes because it does not provide connection
management features one can expect from a properly designed _DataSource_
object.

======= [#50561104_pgfId-1016854]##Querying a Database

[#50561104_pgfId-1005678]##The most common use of the database actions
is to query a database and display the results of the query.

[#50561104_pgfId-1011498]##The following sample code selects all
customers from China from the customers table in the database, orders
them by last name, and finally displays their last name, first name, and
address in an HTML table.

[width="100%",cols="100%",]
|===
a|
[#50561104_pgfId-1005701]##<sql:query var="customers"
dataSource="$\{dataSource}">

[#50561104_pgfId-1005742]##SELECT * FROM customers

[#50561104_pgfId-1005754]##WHERE country = âChinaâ

[#50561104_pgfId-1005766]##ORDER BY lastname

[#50561104_pgfId-1005778]##</sql:query>

[#50561104_pgfId-1005789]##Â 

[#50561104_pgfId-1005790]##<table>

[#50561104_pgfId-1005799]##<c:forEach var="row"
items="$\{customers.rows}">

[#50561104_pgfId-1005810]##<tr>

[#50561104_pgfId-1005823]##<td><c:out value="$\{row.lastName}"/></td>

[#50561104_pgfId-1005836]##<td><c:out value="$\{row.firstName}"/></td>

[#50561104_pgfId-1005849]##<td><c:out value="$\{row.address}"/></td>

[#50561104_pgfId-1005860]##</tr>

[#50561104_pgfId-1005869]##</c:forEach>

[#50561104_pgfId-1005878]##</table>

|===

[#50561104_pgfId-1017876]##This next example shows a generic way to
display the results of a query with column names as headers:

[#50561104_pgfId-1017954]##Â 

[width="100%",cols="100%",]
|===
a|
[#50561104_pgfId-1017934]##<table>

[#50561104_pgfId-1017957]## <!-- column headers -->

[#50561104_pgfId-1017960]## <tr>

[#50561104_pgfId-1017958]## <c:forEach var=âcolumnNameâ
items=â$\{result.columnNames}â>

[#50561104_pgfId-1017959]## <th><c:out value="$\{columnName}"/></th>

[#50561104_pgfId-1017967]## </c:forEach> +
</tr>

[#50561104_pgfId-1017972]## <!-- column data -->

[#50561104_pgfId-1017970]## <c:forEach var="row"
items="$\{result.rowsByIndex}">

[#50561104_pgfId-1017980]## <tr>

[#50561104_pgfId-1017983]## <c:forEach var="column" items="$\{row}">

[#50561104_pgfId-1018007]## <td><c:out value="$\{column}"/></td>

[#50561104_pgfId-1018010]## </c:forEach> +
</tr>

[#50561104_pgfId-1017941]## </c:forEach>

[#50561104_pgfId-1017942]##</table>

|===

======= [#50561104_pgfId-1005721]##Updating a Database

[#50561104_pgfId-1005723]##The <sql:update> action updates a database.
To ensure database integrity, several updates to a database may be
grouped into a transaction by nesting the <sql:update> actions inside a
<sql:transaction> action.

[#50561104_pgfId-1008619]##For example, the following code transfers
money between two accounts in one transaction:

[width="100%",cols="100%",]
|===
a|
[#50561104_pgfId-1005918]##<sql:transaction dataSource="$\{dataSource}">

[#50561104_pgfId-1005919]##<sql:update>

[#50561104_pgfId-1005956]##UPDATE account

[#50561104_pgfId-1005969]##SET Balance = Balance - ?

[#50561104_pgfId-1005982]##WHERE accountNo = ?

[#50561104_pgfId-1005995]##<sql:param value="$\{transferAmount}"/>

[#50561104_pgfId-1006008]##<sql:param value="$\{accountFrom}"/>

[#50561104_pgfId-1006019]##</sql:update>

[#50561104_pgfId-1006030]##<sql:update>

[#50561104_pgfId-1006043]##UPDATE account

[#50561104_pgfId-1006056]##SET Balance = Balance + ?

[#50561104_pgfId-1006069]##WHERE accountNo = ?

[#50561104_pgfId-1006082]##<sql:param value="$\{transferAmount}"/>

[#50561104_pgfId-1006095]##<sql:param value="$\{accountTo}"/>

[#50561104_pgfId-1006106]##</sql:update>

[#50561104_pgfId-1006115]##</sql:transaction>

|===

======= [#50561104_pgfId-1006117]##SQL Statement Parameters

[#50561104_pgfId-1006119]##The JSTL database actions support
substituting parameter values for parameter markers (â?â) in SQL
statements (as shown in the previous example). This form of parametric
replacement is exposed by the _SQLExecutionTag_ interface (see
link:jstl.htm#50561073_93849[See Java APIs]â).

[#50561104_pgfId-1020055]##The _SQLExecutionTag_ interface is
implemented by the tag handlers for <sql:query> and <sql:update>. It is
exposed in order to support custom parameter actions. These custom
actions may retrieve their parameters from any source and process them
before substituting them for a parameter marker in the SQL statement of
the enclosing _SQLExecutionTag_ action.

[#50561104_pgfId-1009976]##For example, a GUI front end may have a user
enter a date as three separate fields (year, month, and day), and use
this information in a database query. If the database table being
accessed provides only a single column for the complete date, action
<acme:dateParam> could assemble the three separate input parameters into
one and pass it to the _addSQLParameter()_ method of its enclosing
_SQLExecutionTag_ action:

[width="100%",cols="100%",]
|===
a|
[#50561104_pgfId-1010200]##<sql:update>

[#50561104_pgfId-1010201]##UPDATE PersonalInfo

[#50561104_pgfId-1010239]##SET BirthDate = ?

[#50561104_pgfId-1010237]##WHERE clientId = ?

[#50561104_pgfId-1010236]##<acme:dateParam year="$\{year}"
month="$\{month}" day="$\{day}"/>

[#50561104_pgfId-1010240]##<sql:param value=â$\{clientId}â/>

[#50561104_pgfId-1010229]##</sql:update>

|===

[#50561104_pgfId-1016657]##The JSTL formatting tags may be used to parse
the string representation of dates and numbers into instances of
_java.util.Date_ and _java.lang.Number_ , respectively, before supplying
them to an enclosing _SQLExecutionTag_ for parametric replacement:

[width="100%",cols="100%",]
|===
a|
[#50561104_pgfId-1016660]##<sql:update sql="$\{sqlUpdateStmt}â
dataSource="$\{dataSource}">

[#50561104_pgfId-1016661]##<fmt:parseDate var="myDate"
value="$\{someDate}â/>

[#50561104_pgfId-1016662]##<sql:param value="$\{myDate}"/>

[#50561104_pgfId-1016663]##</sql:update>

|===

======= [#50561104_pgfId-1016664]##

image:jstl-39.gif[image]

[#50561104_33188]##Database Access

[#50561104_pgfId-1016665]##This section describes the algorithm used by
the SQL actions (<sql:query>, <sql:update>, <sql:transaction>) to access
a database.

[#50561104_pgfId-1016506]##Try to get a reference to a data source as
follows:

[#50561104_pgfId-1016688]##If the attribute _dataSource_ is specified,
use the value specified for that attribute as the data source.

[#50561104_pgfId-1016554]##Otherwise, get the configuration setting
associated with _jakarta.servlet.jsp.jstl.sql.dataSource_ using
_Config.find()_ (see link:jstl.htm#50561096_18174[See Configuration
Data]). Use the value found as the data source if it is not null.

[#50561104_pgfId-1016545]##If a data source is obtained from the
previous step:

[#50561104_pgfId-1016713]##If it is a _DataSource_ object, this is the
data source used by the action to access the database.

[#50561104_pgfId-1018171]##Otherwise, if it is a _String_ :

[#50561104_pgfId-1020071]##Assume this is a JNDI relative path and
retrieve the data source from the containerâs JNDI naming context by
concatenating the specified relative path to the J2EE defined root (
_java:comp/env/_ ).

[#50561104_pgfId-1019563]##If the previous step fails (data source not
found), assume the string specifies JDBC parameters using the syntax
described in link:jstl.htm#50561104_45882[See Data Source] and do as
follows:

[#50561104_pgfId-1019564]##If driver is specified, ensure it is loaded

[#50561104_pgfId-1019669]##Access the named URL through the
_DriverManager_ class, using an empty string for _user_ or _password_ if
they are not specified.

[#50561104_pgfId-1018198]##If the previous step fails, throw an
exception.

[#50561104_pgfId-1016825]##Otherwise, throw an exception.

[#50561104_pgfId-1016955]##An implementation need not create new objects
each time a SQL action is called and the algorithm above does not yield
a _DataSource_ object directly; i.e when a JNDI path or parameters for
the JDBC _DriverManager_ class are used. It may reuse objects that it
previously created for identical arguments.

[#50561104_pgfId-1021302]##It is important to note that actions that
open a connection to a database must close the connection as well as
release any other associated resources (for example, _Statement_ ,
_PreparedStatement_ and _ResultSet_ objects) by the time the action
completes. This ensures that no connections are left open and that leaks
are avoided when these actions are used with pooling mechanisms.

======= [#50561104_pgfId-1016411]##

image:jstl-39.gif[image]

[#50561104_59141]##<sql:query>

[#50561104_pgfId-1001280]##Queries a database.

======= [#50561104_pgfId-1000488]##Syntax

image:jstl-40.gif[image]

[#50561104_pgfId-1010250]## _Syntax 1: Without body content_

[#50561104_pgfId-1011539]##<sql:query sql="sqlQuery"

{empty}[#50561104_pgfId-1010247]## var="varName"
[scope=â\{page|request|session|application}â]

{empty}[#50561104_pgfId-1011550]## [dataSource=âdataSourceâ]

{empty}[#50561104_pgfId-1006313]## [maxRows="maxRows"]

[#50561104_pgfId-1006314]## [startRow="startRow"]/>

[#50561104_pgfId-1010280]## _Syntax 2: With a body to specify query
arguments_

[#50561104_pgfId-1012180]##<sql:query sql="sqlQuery"

{empty}[#50561104_pgfId-1011583]## var="varName"
[scope=â\{page|request|session|application}â]

{empty}[#50561104_pgfId-1011584]## [dataSource=âdataSourceâ]

{empty}[#50561104_pgfId-1011585]## [maxRows="maxRows"]

[#50561104_pgfId-1011586]## [startRow="startRow"]>

[#50561104_pgfId-1010311]## <sql:param> actions

[#50561104_pgfId-998741]##</sql:query>

[#50561104_pgfId-1015057]## _Syntax 3: With a body to specify query and
optional query parameters_

[#50561104_pgfId-1015014]##<sql:query var="varName"

{empty}[#50561104_pgfId-1015099]##
[scope=â\{page|request|session|application}â]

{empty}[#50561104_pgfId-1015016]## [dataSource=âdataSourceâ]

{empty}[#50561104_pgfId-1015017]## [maxRows="maxRows"]

[#50561104_pgfId-1015018]## [startRow="startRow"]>

[#50561104_pgfId-1015072]## query

[#50561104_pgfId-1015020]## optional <sql:param> actions

[#50561104_pgfId-1015021]##</sql:query>

======= [#50561104_pgfId-1000280]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1010329]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561104_pgfId-1000432]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1015238]##Name |[#50561104_pgfId-1015240]##Dynamic
|[#50561104_pgfId-1015242]##Type |[#50561104_pgfId-1015244]##Description
|[#50561104_pgfId-1015246]## _sql_ |[#50561104_pgfId-1015248]##true
|[#50561104_pgfId-1015250]##String |[#50561104_pgfId-1015252]##SQL query
statement.

|[#50561104_pgfId-1015254]## _dataSource_
|[#50561104_pgfId-1015256]##true
|[#50561104_pgfId-1015258]##jakarta.sql.DataSource or String
|[#50561104_pgfId-1019710]##Data source associated with the database to
query. A _String_ value represents a relative path to a JNDI resource or
the parameters for the _DriverManager_ class.

|[#50561104_pgfId-1015262]## _maxRows_ |[#50561104_pgfId-1015264]##true
|[#50561104_pgfId-1015266]##int |[#50561104_pgfId-1015268]##The maximum
number of rows to be included in the query result. If not specified, or
set to -1, no limit on the maximum number of rows is enforced.

|[#50561104_pgfId-1015270]##startRow |[#50561104_pgfId-1015272]##true
|[#50561104_pgfId-1015274]##int |[#50561104_pgfId-1015276]##The returned
_Result_ object includes the rows starting at the specified index. The
first row of the original query result set is at index 0. If not
specified, rows are included starting from the first row at index 0.

|[#50561104_pgfId-1015278]##var |[#50561104_pgfId-1015280]##false
|[#50561104_pgfId-1015282]##String a|
[#50561104_pgfId-1015284]##Name of the exported scoped variable for the
query result. The type of the scoped variable is

[#50561104_pgfId-1015285]## _jakarta.servlet.jsp.jstl.sql._

[#50561104_pgfId-1015289]## _Result_ (see
link:jstl.htm#50561073_93849[See Java APIs]â).

|[#50561104_pgfId-1015291]##scope |[#50561104_pgfId-1015293]##false
|[#50561104_pgfId-1015295]##String |[#50561104_pgfId-1015297]##Scope of
_var_ .
|===

======= [#50561104_pgfId-1000144]##Constraints

image:jstl-40.gif[image]

{empty}[#50561104_pgfId-1010377]##If _dataSource_ is specified, this
action must not be nested inside a
<sql:transaction>.link:#pgfId-1011746[9]

[#50561104_pgfId-1018307]## _maxRows_ must be >= -1

======= [#50561104_pgfId-1016277]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1020849]##If _dataSource_ is null, a _JspException_ is
thrown.

[#50561104_pgfId-1016351]##If an exception occurs during the execution
of this action, it must be caught and rethrown as a _JspException_ . The
message of the rethrown _JspException_ must include the SQL statement,
and the caught exception must be provided as the root cause.

======= [#50561104_pgfId-1010378]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1006196]##The <sql:query> action queries a database and
returns a single result set containing rows of data that it stores in
the scoped variable identified by the _var_ and _scope_ attributes.

[#50561104_pgfId-1008688]##If the query produces no results, an empty
_Result_ object (of size zero) is returned.

[#50561104_pgfId-1006222]##The SQL query statement may be specified by
the _sql_ attribute or from the actionâs body content.

[#50561104_pgfId-1007324]##The query statement may contain parameter
markers (â?â) identifying JDBC _PreparedStatement_ parameters, whose
values must be supplied by nested parameter actions (such as
<sql:param>, see link:jstl.htm#50561104_14683[See <sql:param>]). The
<sql:query> action implements the _SQLExecutionTag_ interface (see
link:jstl.htm#50561073_93849[See Java APIs]â), allowing parameter values
to be supplied by custom parameter actions.

[#50561104_pgfId-1012134]## _maxRows and startRow_

[#50561104_pgfId-1014941]##The maximum number of rows to be included in
the query result may be specified by the _maxRows_ attribute (for a
specific <sql:query> action) or by the configuration setting
_jakarta.servlet.jsp.jstl.sql.maxRows_ (see
link:jstl.htm#50561096_18174[See Configuration Data] and
link:jstl.htm#50561104_37392[See Configuration Settings]). Attribute
_maxRows_ has priority over the configuration setting. A value of -1
means that no limit is enforced on the maximum number of rows.

[#50561104_pgfId-1014950]##The _startRow_ attribute may be used to
specify the index of the first row to be included in the returned
_Result_ object. For example, if given a value of 10, the returned
Result object will start with the row located at index 10 (i.e. rows 0
through 9 of the original query result set are skipped). All remaining
rows of the original query result set are included.

[#50561104_pgfId-1020458]##If both _startRow_ and _maxRows_ are
specified, a maximum of _startRow + maxRows_ rows are retrieved from the
database. All rows up to _startRow_ are then discarded, and the
remaining rows (from _startRow_ through _startRow + maxRows_ ) are
included in the result.

[#50561104_pgfId-1016360]##When using _startRow_ , it is important to
note that the order in which rows are returned is not guaranteed between
RDBMS implementations unless an âorder byâ clause is specified in the
query.

[#50561104_pgfId-1012037]## _maxRows_ and _startRow_ protect against
so-called "runaway queries", allow efficient access to the top rows of
large result sets, and also provide a âpoor-manâs wayâ of paging through
a large query result by increasing _startRow_ by _maxRows_ over a
previous page.

[#50561104_pgfId-1011807]##Obtaining and Releasing a Connection

[#50561104_pgfId-1016915]##If <sql:query> is nested inside an
<sql:transaction> action, the _Connection_ object is obtained from that
parent <sql:transaction> which is reponsible for managing access to the
database.

[#50561104_pgfId-1016916]##Otherwise, access to the database is
performed according to the algorithm described in
link:jstl.htm#50561104_33188[See Database Access]. A _Connection_ object
is obtained and released before the action completes.

======= [#50561104_pgfId-1016623]##

image:jstl-39.gif[image]

[#50561104_59622]##<sql:update>

[#50561104_pgfId-1012049]##Executes an SQL _INSERT_ , _UPDATE_ , or
_DELETE_ statement. In addition, SQL statements that return nothing,
such as SQL DDL statements, can be executed.

======= [#50561104_pgfId-1002019]##Syntax

image:jstl-40.gif[image]

[#50561104_pgfId-1015116]## _Syntax 1: Without body content_

[#50561104_pgfId-1006419]##<sql:update sql="sqlUpdate"

{empty}[#50561104_pgfId-1011621]## [dataSource=âdataSourceâ]

[#50561104_pgfId-1011627]## [var="varName"]
[scope=â\{page|request|session|application}â]/>

[#50561104_pgfId-1006652]##Â 

[#50561104_pgfId-1015120]## _Syntax 2: With a body to specify update
parameters_

[#50561104_pgfId-1011634]##<sql:update sql="sqlUpdate"

{empty}[#50561104_pgfId-1011635]## [dataSource=âdataSourceâ]

[#50561104_pgfId-1011636]## [var="varName"]
[scope=â\{page|request|session|application}â]>

[#50561104_pgfId-1010421]## <sql:param> actions

[#50561104_pgfId-1006430]##</sql:update>

[#50561104_pgfId-1015132]## _Syntax 3: With a body to specify update
statement and optional update parameters_

{empty}[#50561104_pgfId-1015105]##<sql:update [dataSource=âdataSourceâ]

[#50561104_pgfId-1015107]## [var="varName"]
[scope=â\{page|request|session|application}â]>

[#50561104_pgfId-1015108]## update statement

[#50561104_pgfId-1015109]## optional <sql:param> actions

[#50561104_pgfId-1015110]##</sql:update>

======= [#50561104_pgfId-1002027]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1010449]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561104_pgfId-1002093]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1015303]##Name |[#50561104_pgfId-1015305]##Dyn
|[#50561104_pgfId-1015307]##Type |[#50561104_pgfId-1015309]##Description
|[#50561104_pgfId-1015311]## _sql_ |[#50561104_pgfId-1015313]##true
|[#50561104_pgfId-1015315]##String |[#50561104_pgfId-1015317]##SQL
update statement.

|[#50561104_pgfId-1015319]##dataSource |[#50561104_pgfId-1015321]##true
a|
[#50561104_pgfId-1015323]##jakarta.sql.

[#50561104_pgfId-1015324]##DataSource or String

|[#50561104_pgfId-1015326]##Data source associated with the database to
update. A String value represents a relative path to a JNDI resource or
the parameters for the JDBC _DriverManager_ class.

|[#50561104_pgfId-1015328]## _var_ |[#50561104_pgfId-1015330]##false
|[#50561104_pgfId-1015332]##String |[#50561104_pgfId-1015334]##Name of
the exported scoped variable for the result of the database update. The
type of the scoped variable is _java.lang.Integer_ .

|[#50561104_pgfId-1015336]## _scope_ |[#50561104_pgfId-1015338]##false
|[#50561104_pgfId-1015340]##String |[#50561104_pgfId-1015342]##Scope of
_var_ .
|===

======= [#50561104_pgfId-1002094]##Constraints

image:jstl-40.gif[image]

[#50561104_pgfId-1002095]##If _scope_ is specified, _var_ must also be
specified.

[#50561104_pgfId-1009755]##If _dataSource_ is specified, this action
must not be nested inside a <sql:transaction>.

======= [#50561104_pgfId-1016308]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1020860]##If _dataSource_ is null, a _JspException_ is
thrown.

[#50561104_pgfId-1016322]##If an exception occurs during the execution
of this action, it must be caught and rethrown as a _JspException_ . The
message of the rethrown _JspException_ must include the SQL statement,
and the caught exception must be provided as the root cause.

======= [#50561104_pgfId-1002097]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1009682]##The SQL update statement may be specified by
the _sql_ attribute or from the actionâs body content.

[#50561104_pgfId-1009763]##The update statement may contain parameter
markers (â?â) identifying JDBC _PreparedStatement_ parameters, whose
values must be supplied by nested parameter actions (such as
<sql:param>, see link:jstl.htm#50561104_14683[See <sql:param>]). The
<sql:update> action implements the _SQLExecutionTag_ interface (see
link:jstl.htm#50561073_93849[See Java APIs]â), allowing the parameter
values to be supplied by custom parameter tags.

[#50561104_pgfId-1009706]##The connection to the database is obtained in
the same manner as described for <sql:query> (see
link:jstl.htm#50561104_59141[See <sql:query>]).

[#50561104_pgfId-1020479]##The result of an <sql:update> action is
stored in a scoped variable named by the _var_ attribute, if that
attribute was specified. That result represents the number of rows that
were affected by the update. Zero is returned if no rows were affected
by _INSERT_ , _DELETE_ , or _UPDATE_ , and for any SQL statement that
returns nothing (such as SQL DDL statements). This is consistent with
method _executeUpdate()_ of the JDBC class _Statement_ .

======= [#50561104_pgfId-1006686]##

image:jstl-39.gif[image]

<sql:transaction>

[#50561104_pgfId-1004147]##Establishes a transaction context for
<sql:query> and <sql:update> subtags.

======= [#50561104_pgfId-1006724]##Syntax

image:jstl-40.gif[image]

{empty}[#50561104_pgfId-1006810]##<sql:transaction
[dataSource=âdataSourceâ]

[#50561104_pgfId-1010510]## [isolation=isolationLevel]>

[#50561104_pgfId-1010495]## <sql:query> and <sql:update> statements

[#50561104_pgfId-1006813]##</sql:transaction>

[#50561104_pgfId-1006814]##Â 

[#50561104_pgfId-1008241]##isolationLevel ::= "read_committed"

[#50561104_pgfId-1008250]##| "read_uncommitted"

[#50561104_pgfId-1008253]##| "repeatable_read"

[#50561104_pgfId-1008256]##| "serializable"

======= [#50561104_pgfId-1006822]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1011838]##JSP. The JSP container processes the body
content and then writes the result to the current _JspWriter_ . The
action ignores the body content.

======= [#50561104_pgfId-1006794]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1015345]##Name |[#50561104_pgfId-1015347]##Dyn
|[#50561104_pgfId-1015349]##Type |[#50561104_pgfId-1015351]##Description
|[#50561104_pgfId-1015353]## _dataSource_
|[#50561104_pgfId-1015355]##true a|
[#50561104_pgfId-1015357]##jakarta.sql.

[#50561104_pgfId-1015358]##DataSource

[#50561104_pgfId-1015359]##or String

|[#50561104_pgfId-1019700]##DataSource associated with the database to
access. A String value represents a relative path to a JNDI resource or
the parameters for the JDBC DriverManager facility.

|[#50561104_pgfId-1015363]##isolation |[#50561104_pgfId-1015365]##true
|[#50561104_pgfId-1015367]##String
|[#50561104_pgfId-1015369]##Transaction isolation level. If not
specified, it is the isolation level the DataSource has been configured
with.
|===

======= [#50561104_pgfId-1020880]##Constraints

image:jstl-40.gif[image]

[#50561104_pgfId-1020881]##Any nested <sql:query> and <sql:update>
actions must not specify a _dataSource_ attribute.

======= [#50561104_pgfId-1015948]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1015949]##If _dataSource_ is null, a _JspException_ is
thrown.

[#50561104_pgfId-1021130]##Any exception occurring during the execution
of this action must be caught and rethrown after the transaction has
been rolled back (see description below for details).

======= [#50561104_pgfId-1006795]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1006888]##The <sql:transaction> action groups nested
<sql:query> and <sql:update> actions into a transaction.

[#50561104_pgfId-1009775]##The transaction isolation levels are defined
by _java.sql.Connection_ .

[#50561104_pgfId-1006895]##The tag handler of the <sql:transaction>
action must perform the following steps in its lifecycle methods:

[#50561104_pgfId-1006897]## _doStartTag()_ :

[#50561104_pgfId-1008974]##Determines the transaction isolation level
the DBMS is set to (using the _Connection_ method
_getTransactionIsolation()_ ).

[#50561104_pgfId-1008999]##If transactions are not supported (that is,
the transaction isolation level is equal to _TRANSACTION_NONE_ ), an
exception is raised, causing the transaction to fail.

[#50561104_pgfId-1020614]##For any other transaction isolation level,
the auto-commit mode is is saved (so it can later be restored), and then
disabled by calling _setAutoCommit(false)_ on the _Connection_ .

[#50561104_pgfId-1009072]##If the _isolation_ attribute is specified and
differs from the connection's current isolation level, the current
transaction isolation level is saved (so it can later be restored) and
set to the specified level (using the _Connection_ method
_setTransactionIsolation()_ ).

[#50561104_pgfId-1009093]## _doEndTag()_ : Calls the _Connection_ method
_commit()_ .

[#50561104_pgfId-1009103]## _doCatch()_ : Calls the _Connection_ method
_rollback()._

[#50561104_pgfId-1009653]## _doFinally()_ :

[#50561104_pgfId-1009130]##If a transaction isolation level has been
saved, it is restored using the _Connection_ method
_setTransactionIsolation()_ .

[#50561104_pgfId-1020641]##Restore auto-commit mode to its saved value
by calling _setAutoCommit()_ on the _Connection_ .

[#50561104_pgfId-1009150]##Closes the connection.

[#50561104_pgfId-1006913]##The _Connection_ object is obtained and
managed in the same manner as described for <sql:query> (see
link:jstl.htm#50561104_59141[See <sql:query>]), except that it is never
obtained from a parent tag (<sql:transaction> tags can not be nested as
a means to propagate a _Connection_ ).

[#50561104_pgfId-1018218]##Note that the <sql:transaction> tag handler
commits or rollbacks the transaction (if it catches an exception) by
calling the JDBC _Connection commit()_ and _rollback()_ methods
respectively. Executing the corresponding SQL statements using
<sql:update>, e.g. <sql:update sql="rollback" />, within the
<sql:transaction> element body is not supported and the result of doing
so is unpredictable.

[#50561104_pgfId-1006916]##Finally, the behavior of the
<sql:transaction> action is undefined if it executes in the context of a
larger JTA user transaction.

======= [#50561104_pgfId-1002241]##

image:jstl-39.gif[image]

[#50561104_69549]##<sql:setDataSource>

[#50561104_pgfId-1002242]##Exports a data source either as a scoped
variable or as the data source configuration variable (
_jakarta.servlet.jsp.jstl.sql.dataSource_ ).

======= [#50561104_pgfId-1020175]##Syntax

image:jstl-40.gif[image]

[#50561104_pgfId-1020253]##<sql:setDataSource

[#50561104_pgfId-1020256]## \{dataSource="dataSource" |

[#50561104_pgfId-1020377]## url="jdbcUrl"

{empty}[#50561104_pgfId-1020251]## [driver="driverClassName"]

{empty}[#50561104_pgfId-1020179]## [user="userName"]

[#50561104_pgfId-1020265]## [password="password"]}

{empty}[#50561104_pgfId-1020243]## [var="varName"]

[#50561104_pgfId-1020244]##
[scope=â\{page|request|session|application}â]/>

======= [#50561104_pgfId-1020181]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1020182]##Empty.

======= [#50561104_pgfId-1020232]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1020185]##Name |[#50561104_pgfId-1020187]##Dyn
|[#50561104_pgfId-1020189]##Type |[#50561104_pgfId-1020191]##Description
|[#50561104_pgfId-1020283]## _dataSource_
|[#50561104_pgfId-1020285]##true |[#50561104_pgfId-1020287]##String or
jakarta.sql.DataSource |[#50561104_pgfId-1020289]##Data source. If
specified as a string, it can either be a relative path to a JNDI
resource, or a JDBC parameters string as defined in
link:jstl.htm#50561104_45882[See Data Source].

|[#50561104_pgfId-1020193]## _driver_ |[#50561104_pgfId-1020195]##true
|[#50561104_pgfId-1020197]##String |[#50561104_pgfId-1020199]##JDBC
parameter: driver class name.

|[#50561104_pgfId-1020201]##url |[#50561104_pgfId-1020203]##true
|[#50561104_pgfId-1020205]##String |[#50561104_pgfId-1020207]##JDBC
parameter: URL associated with the database.

|[#50561104_pgfId-1020209]##user |[#50561104_pgfId-1020211]##true
|[#50561104_pgfId-1020213]##String |[#50561104_pgfId-1020215]##JDBC
parameter: database user on whose behalf the connection to the database
is being made.

|[#50561104_pgfId-1020310]##password |[#50561104_pgfId-1020312]##true
|[#50561104_pgfId-1020314]##String |[#50561104_pgfId-1020316]##JDBC
parameter: user password

|[#50561104_pgfId-1020325]##var |[#50561104_pgfId-1020327]##false
|[#50561104_pgfId-1020329]##String |[#50561104_pgfId-1020331]##Name of
the exported scoped variable for the data source specified. Type can be
_String_ or _DataSource_ .

|[#50561104_pgfId-1020343]## _scope_ |[#50561104_pgfId-1020345]##false
|[#50561104_pgfId-1020347]##String |[#50561104_pgfId-1020349]##If _var_
is specified, scope of the exported variable. Otherwise, scope of the
data source configuration variable.
|===

======= [#50561104_pgfId-1020887]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1020888]##If _dataSource_ is null, a _JspException_ is
thrown.

======= [#50561104_pgfId-1002309]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1016934]##If the _var_ attribute is specified, the
<sql:setDataSource> action exports the data source specified (either as
a _DataSource_ object or as a String) as a scoped variable. Otherwise,
the data source is exported in the
_jakarta.servlet.jsp.jstl.sql.dataSource_ configuration variable.

[#50561104_pgfId-1020379]##The data source may be specified either via
the _dataSource_ attribute (as a _DataSource_ object, JNDI relative
path, or JDBC parameters string), or via the four JDBC parameters
attributes. These four attributes are provided as a simpler alternative
to the JDBC parameters string syntax defined in
link:jstl.htm#50561104_45882[See Data Source] that would have to be used
with the _dataSource_ attribute.

[#50561104_pgfId-1017229]##As mentioned in
link:jstl.htm#50561104_45882[See Data Source], using JDBCâs
_DriverManager_ class to access a database is intended for prototyping
purposes only because it does not provide connection management features
one can expect from a properly designed _DataSource_ object.

======= [#50561104_pgfId-1002318]##

image:jstl-39.gif[image]

[#50561104_14683]##<sql:param>

[#50561104_pgfId-1002319]##Sets the values of parameter markers (â?â) in
a SQL statement. Subtag of _SQLExecutionTag_ actions such as <sql:query>
and <sql:update>.

======= [#50561104_pgfId-1002320]##Syntax

image:jstl-40.gif[image]

[#50561104_pgfId-1010582]## _Syntax 1: Parameter value specified in
attribute âvalueâ_

[#50561104_pgfId-1010583]##<sql:param value=â _value_ â/>

[#50561104_pgfId-1010584]## _Syntax 2: Parameter value specified in the
body content_

[#50561104_pgfId-1010585]##<sql:param>

[#50561104_pgfId-1010586]## parameter value

[#50561104_pgfId-1010587]##</sql:param>

======= [#50561104_pgfId-1010588]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1010589]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561104_pgfId-1002382]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1015422]##Name |[#50561104_pgfId-1015424]##Dyn
|[#50561104_pgfId-1015426]##Type |[#50561104_pgfId-1015428]##Description
|[#50561104_pgfId-1015430]## _value_ |[#50561104_pgfId-1015432]##true
|[#50561104_pgfId-1015434]##Object |[#50561104_pgfId-1015436]##Parameter
value.
|===

======= [#50561104_pgfId-1002383]##Constraints

image:jstl-40.gif[image]

[#50561104_pgfId-1002384]##Must be nested inside an action whose tag
handler is an instance of _SQLExecutionTag_ (see
link:jstl.htm#50561073_93849[See Java APIs]â).

======= [#50561104_pgfId-1015981]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1015987]##If _value_ is null, the parameter is set to
the SQL value NULL.

======= [#50561104_pgfId-1015983]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1007260]##The <sql:param> action substitutes the given
parameter value for a parameter marker(â?â) in the SQL statement of its
enclosing _SQLExecutionTag_ action.

[#50561104_pgfId-1008446]## _P_ arameters are substituted in the order
in which they are specified.

[#50561104_pgfId-1016127]##The <sql:param> action locates its nearest
ancestor that is an instance of _SQLExecutionTag_ and calls its
_addSQLParameter()_ method, supplying it with the given parameter value.

[#50561104_pgfId-1020728]##It is important to note that the semantics of
_SQLExecutionTag.addSQLParameter()_ are such that supplying a parameter
with a _String_ value (e.g. when using syntax 2) only works for columns
of text type ( _CHAR_ , _VARCHAR_ or _LONGVARCHAR_ ).

======= [#50561104_pgfId-1018425]##

image:jstl-39.gif[image]

<sql:dateParam>

[#50561104_pgfId-1018426]##Sets the values of parameter markers (â?â) in
a SQL statement for values of type _java.util.Date._ Subtag of
_SQLExecutionTag_ actions, such as <sql:query> and <sql:update>.

======= [#50561104_pgfId-1018427]##Syntax

image:jstl-40.gif[image]

[#50561104_pgfId-1018429]##<sql:dateParam value=â _value_ â
[type=â\{timestamp|time|date}â]/>

======= [#50561104_pgfId-1018434]##Body Content

image:jstl-40.gif[image]

[#50561104_pgfId-1018435]##Empty.

======= [#50561104_pgfId-1018453]##Attributes

image:jstl-40.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561104_pgfId-1018438]##Name |[#50561104_pgfId-1018440]##Dyn
|[#50561104_pgfId-1018442]##Type |[#50561104_pgfId-1018444]##Description
|[#50561104_pgfId-1018446]## _value_ |[#50561104_pgfId-1018448]##true
|[#50561104_pgfId-1018450]##java.util.Date
|[#50561104_pgfId-1018452]##Parameter value for DATE, TIME, or TIMESTAMP
column in a database table.

|[#50561104_pgfId-1018520]##type |[#50561104_pgfId-1018522]##true
|[#50561104_pgfId-1018524]##String |[#50561104_pgfId-1018528]##One of
"date", "time" or "timestamp".
|===

======= [#50561104_pgfId-1018454]##Constraints

image:jstl-40.gif[image]

[#50561104_pgfId-1018455]##Must be nested inside an action whose tag
handler is an instance of _SQLExecutionTag_ (see
link:jstl.htm#50561073_93849[See Java APIs]â).

======= [#50561104_pgfId-1018459]##Null & Error Handling

image:jstl-40.gif[image]

[#50561104_pgfId-1018460]##If _value_ is null, the parameter is set to
the SQL value NULL.

======= [#50561104_pgfId-1018461]##Description

image:jstl-40.gif[image]

[#50561104_pgfId-1018577]##This action converts the provided
_java.util.Date_ instance to one of _java.sql.Date_ , _java.sql.Time_ or
_java.sql.Timestamp_ as defined by the _type_ attribute as follows:

[#50561104_pgfId-1018606]##If the _java.util.Date_ object provided by
the _value_ attribute is an instance of _java.sql.Time_ ,
_java.sql.Date_ , or _java.sql.Timestamp_ , and the _type_ attribute
matches this object's type, then it is passed as is to the database.

[#50561104_pgfId-1018679]##Otherwise, the object is converted to the
appropriate type by calling that type's constructor with a parameter of
_date.getTime()_ , where _date_ is the value of the _value_ attribute.

[#50561104_pgfId-1018600]##The <sql:dateParam> action substitutes the
given parameter value for a parameter marker(â?â) in the SQL statement
of its enclosing _SQLExecutionTag_ action.

[#50561104_pgfId-1018463]## _P_ arameters are substituted in the order
in which they are specified.

[#50561104_pgfId-1018464]##The <sql:dateParam> action locates its
nearest ancestor that is an instance of _SQLExecutionTag_ and calls its
_addSQLParameter()_ method, supplying it with the given parameter value.

[#50561104_pgfId-1018422]##Â 

======= [#50561104_pgfId-1017232]##

image:jstl-39.gif[image]

[#50561104_37392]##Configuration Settings

[#50561104_pgfId-1019208]##This section describes the configuration
settings used by the SQL actions. Refer to
link:jstl.htm#50561096_18174[See Configuration Data] for more
information on how JSTL processes configuration data.

======= [#50561104_pgfId-1019194]##DataSource

[width="100%",cols="50%,50%",]
|===
|[#50561104_pgfId-1019179]## _Variable name_
|[#50561104_pgfId-1019181]## _jakarta.servlet.jsp.jstl.sql.dataSource_

|[#50561104_pgfId-1019183]##Java Constant |[#50561104_pgfId-1019185]##
_Config.SQL_DATA_SOURCE_

|[#50561104_pgfId-1019187]##Type |[#50561104_pgfId-1019189]##String or
jakarta.sql.DataSource

|[#50561104_pgfId-1019883]##Set by
|[#50561104_pgfId-1019885]##<sql:setDataSource>, Deployment Descriptor,
Config class

|[#50561104_pgfId-1019191]##Used by
|[#50561104_pgfId-1019193]##<sql:query>, <sql:update>, <sql:transaction>
|===

[#50561104_pgfId-1017286]##The data source to be accessed by the SQL
actions. It can be specified as a string representing either a JNDI
relative path or a JDBC parameters string (as defined in
link:jstl.htm#50561104_45882[See Data Source]), or as a
_jakarta.sql.DataSource_ object.

======= [#50561104_pgfId-1017811]##MaxRows

[width="100%",cols="50%,50%",]
|===
|[#50561104_pgfId-1017837]## _Variable name_
|[#50561104_pgfId-1017839]## _jakarta.servlet.jsp.jstl.sql.maxRows_

|[#50561104_pgfId-1017841]##Java Constant |[#50561104_pgfId-1017843]##
_Config.SQL_MAX_ROWS_

|[#50561104_pgfId-1017845]##Type |[#50561104_pgfId-1017847]##Integer

|[#50561104_pgfId-1019908]##Set by
|[#50561104_pgfId-1019931]##Deployment Descriptor, Config class

|[#50561104_pgfId-1017882]##Used by
|[#50561104_pgfId-1017884]##<sql:query>
|===

[#50561104_pgfId-1020524]##The maximum number of rows to be included in
a query result. If the maximum number of rows is not specified, or is
-1, it means that no limit is enforced on the maximum number of rows.
Value must be >= -1.

======= [#50561105_pgfId-874]##[#50561105_61834]##Â 

======= [#50561105_pgfId-1001083]##

image:jstl-41.gif[image]

XML Core Actions

======= [#50561105_pgfId-1001084]##xml tag library

image:jstl-42.gif[image]

[#50561105_pgfId-1007219]##Enterprise data used in the web tier is
increasingly XML these days â when companies cooperate over the web, XML
is the data format of choice for exchanging information.

[#50561105_pgfId-1006545]##XML is therefore becoming more and more
important in a page author's life. The set of XML actions specified in
JSTL is meant to address the basic XML needs a page author is likely to
encounter.

[#50561105_pgfId-1008842]##The XML actions are divided in three
categories: XML core actions (this chapter), XML flow control actions
(link:jstl.htm#50561106_72661[See] ), and XML transform actions
(link:jstl.htm#50561107_31481[See] ).

======= [#50561105_pgfId-999293]##

image:jstl-43.gif[image]

Overview

[#50561105_pgfId-1007239]##A key aspect of dealing with XML documents is
to be able to easily access their content. XPath, a W3C recommendation
since 1999, provides a concise notation for specifying and selecting
parts of an XML document. The XML set of actions in JSTL is therefore
based on XPath.

[#50561105_pgfId-1008850]##The introduction of XPath for the XML tagset
expands the notion of expression language. XPath is an expression
language that is used locally for the XML actions. Below are the rules
of integration that XPath follows as a local expression language. These
rules ensure that XPath integrates nicely within the JSTL environment.

======= [#50561105_pgfId-1008864]##XPath Context

[#50561105_pgfId-1008866]##In XPath, the context for evaluating an
expression consists of:

[#50561105_pgfId-1008899]##A node or nodeset

[#50561105_pgfId-1009006]##Variable bindings (see below)

[#50561105_pgfId-1008913]##Function library

[#50561105_pgfId-1008914]##The default function library comes with the
XPath engine. Some engines provide extension functions or allow
customization to add new functions. The XPath function library in JSTL
is limited to the core function library of the XPath specification.

[#50561105_pgfId-1008923]##Namespace prefix definitions which allow
namespace prefixes to be used within an XPath expression.

======= [#50561105_pgfId-1008981]##[#50561105_73770]##XPath Variable Bindings

[#50561105_pgfId-1009493]##The XPath engine supports the following
scopes to easily access web application data within an XPath expression.
These scopes are defined in exactly the same way as their implicit
object counterparts in the JSTL expression language (see
link:EL-152.htm#99387[See Implicit Objects]).

[#50561105_pgfId-1008998]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561105_pgfId-1008345]##Expression
|[#50561105_pgfId-1008347]##Mapping
|[#50561105_pgfId-1008349]## _$foo_ |[#50561105_pgfId-1008351]##
_pageContext.findAttribute("foo")_

|[#50561105_pgfId-1008414]## _$param:foo_ |[#50561105_pgfId-1008416]##
_request.getParameter("foo")_

|[#50561105_pgfId-1008406]## _$header:foo_ |[#50561105_pgfId-1008532]##
_request.getHeader("foo")_

|[#50561105_pgfId-1008474]## _$cookie:foo_ |[#50561105_pgfId-1008540]##
_maps to the cookie's value for name foo_

|[#50561105_pgfId-1009437]## _$initParam:foo_
|[#50561105_pgfId-1009439]## _application.getInitParameter("foo")_

|[#50561105_pgfId-1013171]## _$pageScope:foo_ a|
[#50561105_pgfId-1013173]## _pageContext.getAttribute(_

[#50561105_pgfId-1013174]## _"foo", PageContext.PAGE_SCOPE)_

|[#50561105_pgfId-1013176]## _$requestScope:foo_ a|
[#50561105_pgfId-1013178]## _pageContext.getAttribute(_

[#50561105_pgfId-1013179]## _"foo", PageContext.REQUEST_SCOPE)_

|[#50561105_pgfId-1013181]## _$sessionScope:foo_ a|
[#50561105_pgfId-1013183]## _pageContext.getAttribute(_

[#50561105_pgfId-1013184]## _"foo", PageContext.SESSION_SCOPE)_

|[#50561105_pgfId-1013186]## _$applicationScope:foo_ a|
[#50561105_pgfId-1013188]## _pageContext.getAttribute(_

[#50561105_pgfId-1013189]## _"foo", PageContext.APPLICATION_SCOPE)_

|===

[#50561105_pgfId-1007319]##Through these mappings, JSP scoped variables,
request parameters, headers, and cookies, as well as context init
parameters can all be used inside XPath expressions easily. For example:

[width="100%",cols="100%",]
|===
|[#50561105_pgfId-1008555]##/foo/bar[@x=$param:name]
|===

[#50561105_pgfId-1007325]##would find the "bar" element with an
attribute "x" equal to the value of the http request parameter "name".

[#50561105_pgfId-1013195]##Â 

======= [#50561105_pgfId-1012122]##Java to XPath Type Mappings

[#50561105_pgfId-1012128]##An XPath variable must reference a
_java.lang.Object_ instance in one of the supported scopes, identified
by namespace prefix. The following mappings must be supported:

[#50561105_pgfId-1012194]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561105_pgfId-1012164]##Java Type |[#50561105_pgfId-1012196]##XPath
Type
|[#50561105_pgfId-1012211]## _java.lang.Boolean_
|[#50561105_pgfId-1012217]## _boolean_

|[#50561105_pgfId-1012231]## _java.lang.Number_
|[#50561105_pgfId-1012238]## _number_

|[#50561105_pgfId-1012252]## _java.lang.String_
|[#50561105_pgfId-1012258]## _string_

|[#50561105_pgfId-1012184]##Object exported by <x:parse>
|[#50561105_pgfId-1012271]## _node-set_
|===

[#50561105_pgfId-1012139]##A compliant implementation must allow an
XPath variable to address objects exposed by that implementation's
handlers for <x:set> and <x:forEach>. For example, while an
implementation of <x:set> may expose, for a node-set S, an object of any
valid Java type, subsequent XPath evaluations must interpret this object
as the node-set S.

[#50561105_pgfId-1013786]##An XPath expression must also treat variables
that resolve to implementations of standard DOM interfaces as
representing nodes of the type bound to that interface by the DOM
specification.

[#50561105_pgfId-1012145]##XPath variable references that address
objects of other types result in implementation-defined behavior. (An
implementation may throw an exception if it encounters an unrecognized
type.) Following the XPath specification (section 3.1), a variable name
that is not bound to any value results in an exception.

======= [#50561105_pgfId-1009625]##[#50561105_93220]##XPath to Java Type Mappings

[#50561105_pgfId-1009610]##Evaluation of XPath expressions evaluate to
XPath types. Their mapping to Java objects is defined as follows:

[#50561105_pgfId-1009849]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561105_pgfId-1009757]##XPath Type |[#50561105_pgfId-1009759]##Java
Type
a|
[#50561105_pgfId-1009765]## _boolean_

[#50561105_pgfId-1009822]##true or false

|[#50561105_pgfId-1009768]## _java.lang.Boolean_

a|
[#50561105_pgfId-1009770]## _number_

[#50561105_pgfId-1009830]##a floating-point number

|[#50561105_pgfId-1009773]## _java.lang.Number_

a|
[#50561105_pgfId-1009775]## _string_

[#50561105_pgfId-1009840]##a sequence of UCS characters

|[#50561105_pgfId-1009778]## _java.lang.String_

a|
[#50561105_pgfId-1012055]## _node-set_

[#50561105_pgfId-1012056]##an unordered collection of nodes without
duplicates

|[#50561105_pgfId-1013805]##Type usable by JSTL XML-manipulation tags in
the same JSTL implementation. The specific Java type representing
node-sets may thus vary by implementation.
|===

======= [#50561105_pgfId-1009720]##[#50561105_97332]##The _select_ Attribute

[#50561105_pgfId-1009414]##In all the XML actions of JSTL, XPath
expressions are always specified using the _select_ attribute. _select_
is therefore always specified as a string literal that is evaluated by
the XPath engine.

[#50561105_pgfId-1009415]##This clear separation, where only the
_select_ attribute of XML actions evaluates XPath expressions, helps
avoid confusion between XPath (expression language that is local to the
XML actions) and the JSTL expression language (global to all actions
with dynamic attributes in the EL version of the tag library).

======= [#50561105_pgfId-1013993]##Default Context Node

[#50561105_pgfId-1013994]##The context node for every XPath expression
evaluation in JSTL that does not appear in the body of an <x:forEach>
tag is the root of an empty document. Page authors wishing to work with
documents must therefore suply their own node(s) using an XPath variable
(see link:jstl.htm#50561105_73770[See XPath Variable Bindings]).

[#50561105_pgfId-1013999]##Action <x:forEach> establishes for its nested
actions a specific context for XPath expressions evaluation. See
link:jstl.htm#50561106_36700[See <x:forEach>] for details.

======= [#50561105_pgfId-1013069]##Resources Access

[#50561105_pgfId-1013391]##XML actions such as <x:parse> and
<x:transform> allow the specification of XML and/or XSLT documents as
_String_ or _Reader_ objects. Accessing a resource through a URL is
therefore handled through the <c:import> action that works seamlessly
with the XML tags as shown below:

[width="100%",cols="100%",]
|===
a|
[#50561105_pgfId-1013382]##<c:import url=âhttp://acme.com/productInfoâ
var=âdocâ>

[#50561105_pgfId-1013400]## <c:param name=âproductNameâ
value=â$\{product.name}â/>

[#50561105_pgfId-1013405]##</c:import>

[#50561105_pgfId-1013383]##<x:parse doc=â$\{doc}â var=âparsedDocâ/>

|===

[#50561105_pgfId-1013276]##To resolve references to external entities,
the _systemId_ (<x:parse>) and _docSystemId_ / _xsltSystemId_
(<x:transform>) attributes can be used. For these attributes:

[#50561105_pgfId-1013306]##Absolute URLs are passed to the parser
directly

[#50561105_pgfId-1013330]##Relative URLs are treated as references to
resources (e.g., loaded via _ServletContext.getResource()_ ) and loaded
using an _EntityResolver_ and _URIResolver_ as necessary

======= [#50561105_pgfId-1013095]##Core Actions

[#50561105_pgfId-1013096]##The XML core actions provide âexpression
language supportâ for XPath. These actions are therefore similar to the
EL support actions <c:out> and <c:set> covered in
link:jstl.htm#50561098_78159[See] , except that they apply to XPath
expressions.

[#50561105_pgfId-1009442]##The core XML actions feature one additional
action, <x:parse>, to parse an XML document into a data structure that
can then be processed by the XPath engine. For example:

[width="100%",cols="100%",]
|===
a|
[#50561105_pgfId-1009058]##<!-- parse an XML document -->

[#50561105_pgfId-1009073]##<c:import
url=âhttp://acme.com/customer?id=76567â var=âdocâ/>

[#50561105_pgfId-1009072]##<x:parse doc=â$\{doc}â var=âparsedDocâ/>

[#50561105_pgfId-1009059]##Â 

[#50561105_pgfId-1009060]##<!-- access XML data via XPath expressions
-->

[#50561105_pgfId-1009061]##<x:out select=â$parsedDoc/nameâ/>

[#50561105_pgfId-1009085]##<x:out select=â$parsedDoc/addressâ/>

[#50561105_pgfId-1009083]##Â 

[#50561105_pgfId-1009062]##<!-- set a scoped variable -->

[#50561105_pgfId-1009064]##<x:set var=âcustNameâ scope=ârequestâ
select=â$parsedDoc/nameâ/>

|===

[#50561105_pgfId-1009113]##The context for the evaluation of an XPath
Expression can be set either directly within the XPath expression (as
shown in the example above), or via an ancestor tag that sets a context
that can be used by nested tags. An example of this is with action
<x:forEach> (see link:jstl.htm#50561106_36700[See <x:forEach>]).

[width="100%",cols="100%",]
|===
a|
[#50561105_pgfId-1009163]##<!-- context set by ancestor tag <x:forEach>
-->

[#50561105_pgfId-1009164]##<x:forEach select=â$parsedDoc//customerâ>

[#50561105_pgfId-1009165]## <x:out select=ânameâ/>

[#50561105_pgfId-1009166]##</x:forEach>

|===

======= [#50561105_pgfId-1007732]##

image:jstl-43.gif[image]

<x:parse>

[#50561105_pgfId-1007733]##Parses an XML document.

======= [#50561105_pgfId-1007734]##Syntax

image:jstl-44.gif[image]

[#50561105_pgfId-1007845]## _Syntax 1: XML document specified via a
String or Reader object_

[#50561105_pgfId-1007736]##<x:parse
\{doc=âXMLDocumentâ|xmllink:#pgfId-1013987[10]=âXMLDocumentâ}

[#50561105_pgfId-1013216]## \{var=âvarâ [scope=âscopeâ]|varDom=âvarâ
[scopeDom=âscopeâ]}

{empty}[#50561105_pgfId-1011995]## [systemId=âsystemIdâ]

[#50561105_pgfId-1013458]## [filter=âfilterâ]/>

[#50561105_pgfId-1007836]## _Syntax 2: XML document specified via the
body content_

[#50561105_pgfId-1007859]##<x:parse

[#50561105_pgfId-1013233]## \{var=âvarâ [scope=âscopeâ]|varDom=âvarâ
[scopeDom=âscopeâ]}

{empty}[#50561105_pgfId-1013461]## [systemId=âsystemIdâ]

[#50561105_pgfId-1013236]## [filter=âfilterâ]>

[#50561105_pgfId-1007865]## XML Document to parse

[#50561105_pgfId-1007866]##</x:parse>

[#50561105_pgfId-1013246]##Â 

[#50561105_pgfId-1013243]##where scope is
\{page|request|session|application}

[#50561105_pgfId-1013241]##Â 

======= [#50561105_pgfId-1007841]##Body Content

image:jstl-44.gif[image]

[#50561105_pgfId-1007744]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561105_pgfId-1007786]##Attributes

image:jstl-44.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561105_pgfId-1012416]##Name |[#50561105_pgfId-1012418]##Dyn
|[#50561105_pgfId-1012420]##Type |[#50561105_pgfId-1012422]##Description
|[#50561105_pgfId-1012432]## _doc_ |[#50561105_pgfId-1012434]## _true_
|[#50561105_pgfId-1013495]## _String, Reader_
|[#50561105_pgfId-1013499]##Source XML document to be parsed.

|[#50561105_pgfId-1013926]## _xml_ |[#50561105_pgfId-1013928]## _true_
|[#50561105_pgfId-1013930]## _String, Reader_
|[#50561105_pgfId-1013932]## _Deprecatedlink:#pgfId-1013950[11]_ . Use
attribute _doc_ instead.

|[#50561105_pgfId-1013445]##systemId |[#50561105_pgfId-1013447]##true
|[#50561105_pgfId-1013449]##String |[#50561105_pgfId-1013451]##The
system identifier (URI) for parsing the XML document.

|[#50561105_pgfId-1012440]## _filter_ |[#50561105_pgfId-1012442]##
_true_ a|
[#50561105_pgfId-1012444]## _org.xml.sax._

[#50561105_pgfId-1012445]## _XMLFilter_

|[#50561105_pgfId-1012447]##Filter to be applied to the source document.

|[#50561105_pgfId-1012449]## _var_ |[#50561105_pgfId-1012451]## _false_
|[#50561105_pgfId-1012453]## _String_ |[#50561105_pgfId-1012455]##Name
of the exported scoped variable for the parsed XML document. The type of
the scoped variable is implementation dependent.

|[#50561105_pgfId-1012457]## _scope_ |[#50561105_pgfId-1012459]##
_false_ |[#50561105_pgfId-1012461]## _String_
|[#50561105_pgfId-1012463]##Scope for var.

|[#50561105_pgfId-1012465]## _varDom_ |[#50561105_pgfId-1012467]##
_false_ |[#50561105_pgfId-1012469]## _String_
|[#50561105_pgfId-1012471]##Name of the exported scoped variable for the
parsed XML document. The type of the scoped variable is
_org.w3c.dom.Document_ .

|[#50561105_pgfId-1012473]## _scopeDom_ |[#50561105_pgfId-1012475]##
_false_ |[#50561105_pgfId-1012477]## _String_
|[#50561105_pgfId-1012479]##Scope for _varDom._
|===

======= [#50561105_pgfId-1012672]##Null & Error Handling

image:jstl-44.gif[image]

[#50561105_pgfId-1013523]##If the source XML document is null or empty,
a _JspException_ is thrown.

[#50561105_pgfId-1012680]##If _filter_ is null, filtering is not
performed.

======= [#50561105_pgfId-1007787]##Description

image:jstl-44.gif[image]

[#50561105_pgfId-1007883]##The <x:parse> action parses an XML document
and saves the resulting object in the scoped variable specified by
attribute _var_ or _varDom_ . It does not perform any validation against
DTDs or Schemas.

[#50561105_pgfId-1009214]##The XML document can be specified either with
the _doc_ attribute, or inline via the action's body content.

[#50561105_pgfId-1009286]## _var_ and _varDom_

[#50561105_pgfId-1009209]##If _var_ is used, the type of the resulting
object is not defined by this specification. This allows implementations
to use whatever they deem best for an efficient implementation of the
XML tagset. _varDom_ exposes a DOM document, allowing collaboration with
custom actions. Objects exposed by _var_ and _varDom_ can both be used
to set the context of an XPath expression.

[#50561105_pgfId-1007570]##Filtering for Performance Benefits

[#50561105_pgfId-1007572]##If an implementation of the XML tagset is
based on DOM-like structures, there will be a significant performance
impact when dealing with large XML documents. To help with this,
attribute _filter_ can be used to allow filtering of the input data
prior to having it parsed by the implementation into a DOM-like
structure.

[#50561105_pgfId-1007574]##For example, if one is interested in
processing only the "European" customers which represent only 10% of the
original XML document received as input, it will greatly reduce the size
and complexity of the resulting DOM structure if all non-European
customers are pruned from the XML document prior to parsing.

[width="100%",cols="100%",]
|===
a|
[#50561105_pgfId-1007910]##<c:import url=âhttp://acme.com/customersâ
var=âdocâ/>

[#50561105_pgfId-1007911]## _<x:parse doc=â$\{doc}â
filter=â$\{filterEuropeanCust}â_

[#50561105_pgfId-1012725]## _var=âparsedDocâ/>_

|===

[#50561105_pgfId-1007579]##The _filter_ attribute accepts an object of
type _org.xml.sax.XMLFilter_ .

[#50561105_pgfId-1007581]##If configuration of the filter is desirable,
it is suggested that the developer of the filter provides a custom tag
for easy configuration by a page author.

======= [#50561105_pgfId-1008055]##

image:jstl-43.gif[image]

<x:out>

[#50561105_pgfId-1008056]##Evaluates an XPath expression and outputs the
result of the evaluation to the current _JspWriter_ object.

======= [#50561105_pgfId-1008057]##Syntax

image:jstl-44.gif[image]

[#50561105_pgfId-1012998]##<x:out select=âXPathExpressionâ
[escapeXml=â\{true|false}â]/>

======= [#50561105_pgfId-1013002]##Body Content

image:jstl-44.gif[image]

[#50561105_pgfId-1012961]##Empty.

======= [#50561105_pgfId-1008096]##Attributes

image:jstl-44.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561105_pgfId-1012482]##Name |[#50561105_pgfId-1012484]##Dynamic
|[#50561105_pgfId-1012486]##Type |[#50561105_pgfId-1012488]##Description
|[#50561105_pgfId-1012490]## _select_ |[#50561105_pgfId-1012492]##
_false_ |[#50561105_pgfId-1012494]## _String_
|[#50561105_pgfId-1012496]##XPath expression to be evaluated.

|[#50561105_pgfId-1012600]## _escapeXml_ |[#50561105_pgfId-1012602]##
_true_ |[#50561105_pgfId-1012604]## _boolean_
|[#50561105_pgfId-1012606]##Determines whether characters <,>,&,â,â in
the resulting string should be converted to their corresponding
character entity codes. Default value is true.
|===

======= [#50561105_pgfId-1008097]##Description

image:jstl-44.gif[image]

[#50561105_pgfId-1012103]##The expression to be evaluated is specified
via attribute _select_ and must be in XPath syntax. The result of the
evaluation is converted to a _String_ as if the XPath _string()_
function were applied, and is subsequently written to the current
_JspWriter_ object.

[#50561105_pgfId-1009178]##This action is the equivalent of _<%=...%>_
(display the result of an expression in the JSP syntax) and _<c:out>_
(display the result of an expression in the expression language syntax).

[#50561105_pgfId-1012611]##If _escapeXml_ is true, the following
character conversions are applied:

[#50561105_pgfId-1012637]##Â 

[width="100%",cols="50%,50%",options="header",]
|===
|[#50561105_pgfId-1012614]##Character
|[#50561105_pgfId-1012616]##Character Entity Code
|[#50561105_pgfId-1012618]## _<_ |[#50561105_pgfId-1012620]## _&lt;_

|[#50561105_pgfId-1012622]## _>_ |[#50561105_pgfId-1012624]## _&gt;_

|[#50561105_pgfId-1012626]## _&_ |[#50561105_pgfId-1012628]## _&amp;_

|[#50561105_pgfId-1012630]##â |[#50561105_pgfId-1012632]##&#039;

|[#50561105_pgfId-1012634]##ââ |[#50561105_pgfId-1012636]##&#034;
|===

[#50561105_pgfId-1013767]##Â 

======= [#50561105_pgfId-1009375]##

image:jstl-43.gif[image]

[#50561105_71801]##<x:set>

[#50561105_pgfId-1009540]##Evaluates an XPath expression and stores the
result into a scoped variable.

======= [#50561105_pgfId-1009541]##Syntax

image:jstl-44.gif[image]

[#50561105_pgfId-1009547]##<x:set select=âXPathExpressionâ

[#50561105_pgfId-1012387]## var=âvarNameâ
[scope=â\{page|request|session|application}â]/>

======= [#50561105_pgfId-1008169]##Body Content

image:jstl-44.gif[image]

[#50561105_pgfId-1009582]##Empty.

======= [#50561105_pgfId-1008212]##Attributes

image:jstl-44.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561105_pgfId-1012501]##Name |[#50561105_pgfId-1012503]##Dynamic
|[#50561105_pgfId-1012505]##Type |[#50561105_pgfId-1012507]##Description
|[#50561105_pgfId-1012509]## _select_ |[#50561105_pgfId-1012511]##
_false_ |[#50561105_pgfId-1012513]## _String_
|[#50561105_pgfId-1012515]##XPath expression to be evaluated.

|[#50561105_pgfId-1012517]## _var_ |[#50561105_pgfId-1012519]## _false_
|[#50561105_pgfId-1012521]## _String_ |[#50561105_pgfId-1012523]##Name
of the exported scoped variable to hold the value specified in the
action. The type of the scoped variable is whatever type the _select_
expression evaluates to.

|[#50561105_pgfId-1012525]## _scope_ |[#50561105_pgfId-1012527]##
_false_ |[#50561105_pgfId-1012529]## _String_
|[#50561105_pgfId-1012531]##Scope for var.
|===

======= [#50561105_pgfId-1008215]##Description

image:jstl-44.gif[image]

[#50561105_pgfId-1009381]##Evaluates an XPath expression (specified via
attribute _select_ ) and stores the result into a scoped variable
(specified via attributes _var_ and _scope_ ).

[#50561105_pgfId-1012931]##The mapping of XPath types to Java types is
described in link:jstl.htm#50561105_93220[See XPath to Java Type
Mappings].

[#50561105_pgfId-1006180]##Â 

======= [#50561106_pgfId-874]##[#50561106_72661]##Â 

======= [#50561106_pgfId-1001083]##

image:jstl-45.gif[image]

[#50561106_65966]##XML Flow Control Actions

======= [#50561106_pgfId-1001084]##xml tag library

image:jstl-46.gif[image]

[#50561106_pgfId-1008269]##The core set of XML actions provides the
basic functionality to easily parse and access XML data. Another
important piece of functionality is the ability to iterate over elements
in an XML document, as well as conditionally process JSP code fragments
depending on the result of an XPath expression. The XML flow control
actions provide these capabilities.

======= [#50561106_pgfId-999293]##

image:jstl-47.gif[image]

Overview

[#50561106_pgfId-1010345]##The XML flow control actions provide flow
control based on the value of XPath expressions. These actions are
therefore similar to the EL flow control actions (<c:if>, <c:choose>,
and <c:forEach>), except that they apply to XPath expressions.

[#50561106_pgfId-1009917]##The _<x:if>_ action has a _select_ attribute
that specifies an XPath expression. The expression is evaluated and the
resulting object is converted to a _boolean_ according to the semantics
of the XPath _boolean()_ function:

[#50561106_pgfId-1010230]##A number is true if an only if it is neither
positive or negative zero nor NaN

[#50561106_pgfId-1010247]##A node-set is true if and only if it is
non-empty

[#50561106_pgfId-1010254]##A string is true if and only if its length is
non-zero

[#50561106_pgfId-1010212]##<x:if> renders its body if the result is
true. For example:

[width="100%",cols="100%",]
|===
a|
[#50561106_pgfId-1010262]##<x:if select=â$customer/[location=âUKâ]â>

[#50561106_pgfId-1010281]## UK based customer

[#50561106_pgfId-1010264]##</x:if>

|===

[#50561106_pgfId-1009927]##The <x:choose> action selects one among a
number of possible alternatives. It consists of a sequence of <x:when>
elements followed by an optional <x:otherwise>. Each <x:when> element
has a single attribute, _select_ , which specifies an XPath expression.
When a <x:choose> element is processed, each of the <x:when> elements
has its expression evaluated in turn, and the resulting object is
converted to a boolean according to the semantics of the XPath boolean
function. The body of the first, and only the first, <x:when> whose
result is true is rendered.

[#50561106_pgfId-1009929]##If none of the test conditions of nested
<x:when> tags evaluates to true, then the body of an <x:otherwise> tag
is evaluated, if present.

[width="100%",cols="100%",]
|===
a|
[#50561106_pgfId-1010316]##<x:choose>

[#50561106_pgfId-1010324]## <x:when select=â$customer/firstNameâ>

[#50561106_pgfId-1010327]## Hello <x:out select=â$customer/firstNameâ/>

[#50561106_pgfId-1010318]## </x:when>

[#50561106_pgfId-1010331]## <x:otherwise>

[#50561106_pgfId-1010332]## Hello my friend

[#50561106_pgfId-1010333]## </x:otherwise>

[#50561106_pgfId-1010330]##</x:choose>

|===

[#50561106_pgfId-1010373]##The _<x:forEach>_ action evaluates the given
XPath expression and iterates over the result, setting the context node
to each element in the iteration. For example:

[width="100%",cols="100%",]
|===
a|
[#50561106_pgfId-1010376]##<x:forEach select=â$doc//authorâ>

[#50561106_pgfId-1010377]## <x:out select=â@nameâ/>

[#50561106_pgfId-1010378]##</x:forEach>

|===

[#50561106_pgfId-1010371]##Â 

======= [#50561106_pgfId-1009961]##

image:jstl-47.gif[image]

<x:if>

[#50561106_pgfId-1009962]##Evaluates the XPath expression specified in
the _select_ attribute and renders its body content if the expression
evaluates to true.

======= [#50561106_pgfId-1009963]##Syntax

image:jstl-48.gif[image]

[#50561106_pgfId-1012325]## _Syntax 1: Without body content_

[#50561106_pgfId-1012326]##<x:if select=âXPathExpressionâ +
var=âvarNameâ [scope=â\{page|request|session|application}â]/>

[#50561106_pgfId-1012330]## _Syntax 2: With body content_

[#50561106_pgfId-1010677]##<x:if select=âXPathExpressionâ +
[var=âvarNameâ] [scope=â\{page|request|session|application}â]>

[#50561106_pgfId-1010678]## body content

[#50561106_pgfId-1010679]##</x:if>

======= [#50561106_pgfId-1009967]##Body Content

image:jstl-48.gif[image]

[#50561106_pgfId-1009968]##JSP. If the test condition evaluates to true,
the JSP container processes the body content and then writes it to the
current _JspWriter_ .

======= [#50561106_pgfId-1010011]##Attributes

image:jstl-48.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561106_pgfId-1011924]##Name |[#50561106_pgfId-1011926]##Dynamic
|[#50561106_pgfId-1011928]##Type |[#50561106_pgfId-1011930]##Description
|[#50561106_pgfId-1011932]## _select_ |[#50561106_pgfId-1011934]##
_false_ |[#50561106_pgfId-1011936]## _String_
|[#50561106_pgfId-1011938]##The test condition that tells whether or not
the body content should be processed.

|[#50561106_pgfId-1011940]## _var_ |[#50561106_pgfId-1011942]## _false_
|[#50561106_pgfId-1011944]## _String_ |[#50561106_pgfId-1011946]##Name
of the exported scoped variable for the resulting value of the test
condition. The type of the scoped variable is _Boolean_ .

|[#50561106_pgfId-1011948]## _scope_ |[#50561106_pgfId-1011950]##
_false_ |[#50561106_pgfId-1011952]## _String_
|[#50561106_pgfId-1011954]##Scope for var.
|===

======= [#50561106_pgfId-1010733]##Constraints

image:jstl-48.gif[image]

[#50561106_pgfId-1012248]##If _scope_ is specified, _var_ must also be
specified.

======= [#50561106_pgfId-1012249]##Description

image:jstl-48.gif[image]

[#50561106_pgfId-1012250]##The XPath expression specified via attribute
_select_ is evaluated, and the resulting object is converted to a
_boolean_ according to the semantics of the XPath _boolean()_ function.
If true, the body content is evaluated by the JSP container and the
result is written to the current _JspWriter_ .

[#50561106_pgfId-1010504]##Â 

======= [#50561106_pgfId-1010016]##

image:jstl-47.gif[image]

<x:choose>

[#50561106_pgfId-1010017]##Provides the context for mutually exclusive
conditional execution.

======= [#50561106_pgfId-1010018]##Syntax

image:jstl-48.gif[image]

[#50561106_pgfId-1010019]##<x:choose>

[#50561106_pgfId-1010020]## body content (<x:when> and <x:otherwise>
subtags)

[#50561106_pgfId-1010021]##</x:choose>

======= [#50561106_pgfId-1010022]##Body Content

image:jstl-48.gif[image]

[#50561106_pgfId-1010537]##JSP. The body content is processed by the JSP
container (at most one of the nested elements will be processed) and
written to the current _JspWriter_ .

======= [#50561106_pgfId-1010026]##Constraints

image:jstl-48.gif[image]

[#50561106_pgfId-1010027]##The body of the <x:choose> action can only
contain:

[#50561106_pgfId-1010028]##White spaces

[#50561106_pgfId-1010029]##May appear anywhere around the <x:when> and
<x:otherwise> subtags.

[#50561106_pgfId-1010030]##1 or more <x:when> actions

[#50561106_pgfId-1010031]##Must all appear before <x:otherwise>

[#50561106_pgfId-1010032]##0 or 1 <x:otherwise> action

[#50561106_pgfId-1010033]##Must be the last action nested within
<x:choose>

======= [#50561106_pgfId-1010034]##Description

image:jstl-48.gif[image]

[#50561106_pgfId-1010035]##The <x:choose> action processes the body of
the first _<x:when>_ action whose test condition evaluates to true. If
none of the test conditions of nested _<x:when>_ actions evaluates to
true, then the body of an _<x:otherwise>_ action is processed, if
present.

======= [#50561106_pgfId-1010036]##

image:jstl-47.gif[image]

<x:when>

[#50561106_pgfId-1010037]##Represents an alternative within an
<x:choose> action.

======= [#50561106_pgfId-1010038]##Syntax

image:jstl-48.gif[image]

[#50561106_pgfId-1010039]##<x:when select=âXPathExpressionâ> +
body content

[#50561106_pgfId-1010040]##</x:when>

======= [#50561106_pgfId-1010041]##Body Content

image:jstl-48.gif[image]

[#50561106_pgfId-1010042]##JSP. If this is the first _<x:when>_ action
to evaluate to true within _<x:choose>_ , the JSP container processes
the body content and then writes it to the current _JspWriter_ .

======= [#50561106_pgfId-1010065]##Attributes

image:jstl-48.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561106_pgfId-1011957]##Name |[#50561106_pgfId-1011959]##Dynamic
|[#50561106_pgfId-1011961]##Type |[#50561106_pgfId-1011963]##Description
|[#50561106_pgfId-1011965]## _select_ |[#50561106_pgfId-1011967]##
_false_ |[#50561106_pgfId-1011969]## _String_
|[#50561106_pgfId-1011971]##The test condition that tells whether or not
the body content should be processed
|===

======= [#50561106_pgfId-1010066]##Constraints

image:jstl-48.gif[image]

[#50561106_pgfId-1010067]##Must have _<x:choose>_ as an immediate
parent.

[#50561106_pgfId-1010068]##Must appear before an _<x:otherwise>_ action
that has the same parent.

======= [#50561106_pgfId-1010069]##Description

image:jstl-48.gif[image]

[#50561106_pgfId-1010558]##The XPath expression specified via attribute
_select_ is evaluated, and the resulting object is converted to a
_boolean_ according to the semantics of the XPath _boolean()_ function.
If this is the first _<x:when>_ action to evaluate to true within
_<x:choose>_ , the JSP container processes the body content and then
writes it to the current _JspWriter_ .

[#50561106_pgfId-1010585]##Â 

======= [#50561106_pgfId-1010071]##

image:jstl-47.gif[image]

<x:otherwise>

[#50561106_pgfId-1010072]##Represents the last alternative within a
<x:choose> action.

======= [#50561106_pgfId-1010073]##Syntax

image:jstl-48.gif[image]

[#50561106_pgfId-1010074]##<x:otherwise>

[#50561106_pgfId-1010075]## conditional block

[#50561106_pgfId-1010076]##</x:otherwise>

======= [#50561106_pgfId-1010077]##Body Content

image:jstl-48.gif[image]

[#50561106_pgfId-1010593]##JSP. If no <x:when> action nested within
<x:choose> evaluates to true, the JSP container processes the body
content and then writes it to the current _JspWriter_ .

======= [#50561106_pgfId-1010079]##Attributes

image:jstl-48.gif[image]

[#50561106_pgfId-1010080]##None.

======= [#50561106_pgfId-1010081]##Constraints

image:jstl-48.gif[image]

[#50561106_pgfId-1010082]##Must have <x:choose> as an immediate parent.

[#50561106_pgfId-1010083]##Must be the last nested action within
<x:choose>.

======= [#50561106_pgfId-1010084]##Description

image:jstl-48.gif[image]

[#50561106_pgfId-1010085]##Within a <x:choose> action, if none of the
nested <x:when> test conditions evaluates to true, then the body content
of the <x:otherwise> action is evaluated by the JSP container, and the
result is written to the current _JspWriter_ .

======= [#50561106_pgfId-1010784]##

image:jstl-47.gif[image]

[#50561106_36700]##<x:forEach>

[#50561106_pgfId-1010785]##Evaluates the given XPath expression and
repeats its nested body content over the result, setting the context
node to each element in the iteration.

======= [#50561106_pgfId-1010786]##Syntax

image:jstl-48.gif[image]

{empty}[#50561106_pgfId-1012422]##<x:forEach [var=âvarNameâ]
select=âXPathExpressionâ> +
[varStatus=âvarStatusNameâ]

[#50561106_pgfId-1012423]## [begin=âbeginâ] [end=âendâ] [step=âstepâ]>

[#50561106_pgfId-1010791]## body content

[#50561106_pgfId-1010792]##</x:forEach>

======= [#50561106_pgfId-1010799]##Body Content

image:jstl-48.gif[image]

[#50561106_pgfId-1010800]##JSP. As long as there are items to iterate
over, the body content is processed by the JSP container and written to
the current _JspWriter_ .

======= [#50561106_pgfId-1010880]##Attributes

image:jstl-48.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561106_pgfId-1011974]##Name |[#50561106_pgfId-1011976]##Dynamic
|[#50561106_pgfId-1011978]##Type |[#50561106_pgfId-1011980]##Description
|[#50561106_pgfId-1011982]## _var_ |[#50561106_pgfId-1011984]## _false_
|[#50561106_pgfId-1011986]## _String_ |[#50561106_pgfId-1012176]##Name
of the exported scoped variable for the current item of the iteration.
This scoped variable has nested visibility. Its type depends on the
result of the XPath expression in the _select_ attribute.

|[#50561106_pgfId-1011990]## _select_ |[#50561106_pgfId-1011992]##
_false_ |[#50561106_pgfId-1011994]## _String_
|[#50561106_pgfId-1011996]##XPath expression to be evaluated.

|[#50561106_pgfId-1012463]## _varStatus_ |[#50561106_pgfId-1012465]##
_false_ |[#50561106_pgfId-1012467]## _String_
|[#50561106_pgfId-1012469]##Name of the exported scoped variable for the
status of the iteration. Object exported is of type
_jakarta.servlet.jsp.jstl.core.LoopTagStatus_ . This scoped variable has
nested visibility.

|[#50561106_pgfId-1012452]## _begin_ |[#50561106_pgfId-1012454]## _true_
|[#50561106_pgfId-1012456]## _int_ |[#50561106_pgfId-1012459]##Iteration
begins at the item located at the specified index. First item of the
collection has index 0.

|[#50561106_pgfId-1012441]## _end_ |[#50561106_pgfId-1012443]## _true_
|[#50561106_pgfId-1012445]## _int_ |[#50561106_pgfId-1012448]##Iteration
ends at the item located at the specified index (inclusive).

|[#50561106_pgfId-1012433]## _step_ |[#50561106_pgfId-1012435]## _true_
|[#50561106_pgfId-1012437]## _int_ |[#50561106_pgfId-1012439]##Iteration
will only process every _step_ items of the collection, starting with
the first one.
|===

======= [#50561106_pgfId-1012591]##Constraints

image:jstl-48.gif[image]

[#50561106_pgfId-1012592]##If specified, _begin_ must be >= 0.

[#50561106_pgfId-1012593]##If _end_ is specified and it is less than
_begin_ , the loop is simply not executed.

[#50561106_pgfId-1012594]##If specified, _step_ must be >= 1

======= [#50561106_pgfId-1012037]##Null & Error Handling

image:jstl-48.gif[image]

[#50561106_pgfId-1012038]##If _select_ is empty, a _JspException_ is
thrown.

======= [#50561106_pgfId-1012552]##Description

image:jstl-48.gif[image]

[#50561106_pgfId-1012553]##Inside the body of the tag, the context for
XPath expression evaluations is obtained as follows:

[#50561106_pgfId-1012540]##variable, function, and namespace bindings
operate as in the rest of JSTL

[#50561106_pgfId-1012541]##the context node is the node whose
representation would be exposed by 'var' (whether or not the 'var'
attribute is specified)

[#50561106_pgfId-1012542]##the context position is the iteration 'count'
(with the same meaning as in <c:forEach>)

[#50561106_pgfId-1012536]##the context size is equal to the number of
nodes in the node-set over which <x:forEach> is iterating

======= [#50561107_pgfId-874]##[#50561107_31481]##Â 

======= [#50561107_pgfId-1001083]##

image:jstl-49.gif[image]

XML Transform Actions

======= [#50561107_pgfId-1010047]##xml tag library

image:jstl-50.gif[image]

[#50561107_pgfId-1010048]##The transformation of XML documents using
XSLT stylesheets is popular in many web applications. The XML transform
actions provide this capability so XSLT transformations can be performed
within JSP pages.

======= [#50561107_pgfId-1010049]##

image:jstl-51.gif[image]

Overview

[#50561107_pgfId-1009701]##The XML transform actions support the
transformation of XML documents with XSLT stylesheets.

[#50561107_pgfId-1009769]##In the example below, an external XML
document (retrieved from an absolute URL) is transformed by a local XSLT
stylesheet (context relative path). The result of the transformation is
written to the page.

[width="100%",cols="100%",]
|===
a|
[#50561107_pgfId-1009775]##<c:import url=âhttp://acme.com/customersâ
var=âdocâ/>

[#50561107_pgfId-1009787]##<c:import
url=â/WEB-INF/xslt/customerList.xslâ var=âxsltâ/>

[#50561107_pgfId-1009841]##<x:transform doc=â$\{doc}â xslt=â$\{xslt}â/>

|===

[#50561107_pgfId-1009662]##It is possible to set transformation
parameters via nested <x:param> actions. For example:

[width="100%",cols="100%",]
|===
a|
[#50561107_pgfId-1009807]##<x:transform doc=â$\{doc}â xslt=â$\{xslt}â>

[#50561107_pgfId-1009813]## <x:param name=âfooâ value=âfoo-valueâ/>

[#50561107_pgfId-1009814]##</x:transform>

|===

[#50561107_pgfId-1009536]##It is sometimes the case that the same
stylesheet transformation needs to be applied multiple times to
different source XML documents. A more efficient approach is to process
the transformation stylesheet once, and then save this "transformer"
object for successive transformations. The specification allows
implementations to support transparent caching of transformer objects to
improve performance.

======= [#50561107_pgfId-1007732]##

image:jstl-51.gif[image]

<x:transform>

[#50561107_pgfId-1007733]##Applies an XSLT stylesheet transformation to
an XML document.

======= [#50561107_pgfId-1007734]##Syntax

image:jstl-52.gif[image]

[#50561107_pgfId-1007845]## _Syntax 1: Without body contentt_

[#50561107_pgfId-1011905]##<x:transform +
\{doc=âXMLDocumentâ|xmllink:#pgfId-1012279[12]=âXMLDocumentâ}
xslt=âXSLTStylesheetâ

{empty}[#50561107_pgfId-1011909]##
[\{docSystemId=âXMLSystemIdâ|xmlSystemId1=âXMLSystemIdâ}]

{empty}[#50561107_pgfId-1012307]## [xsltSystemId=âXSLTSystemIdâ]

{empty}[#50561107_pgfId-1007736]## [\{var=âvarNameâ
[scope=âscopeNameâ]|result=âresultObjectâ}]

[#50561107_pgfId-1011594]## _Syntax 2: With a body to specify
transformation parameters_

[#50561107_pgfId-1011929]##<x:transform +
\{doc=âXMLDocumentâ|xml1=âXMLDocumentâ} xslt=âXSLTStylesheetâ

{empty}[#50561107_pgfId-1011935]##
[\{docSystemId=âXMLSystemIdâ|xmlSystemId1=âXMLSystemIdâ}]

{empty}[#50561107_pgfId-1012329]## [xsltSystemId=âXSLTSystemIdâ]

{empty}[#50561107_pgfId-1011930]## [\{var=âvarNameâ
[scope=âscopeNameâ]|result=âresultObjectâ}]

[#50561107_pgfId-1011605]## <x:param> actions

[#50561107_pgfId-1011603]##</x:transform>

[#50561107_pgfId-1011561]##Â 

[#50561107_pgfId-1011564]## _Syntax 3: With a body to specify XML
document and optional transformation parameters_

[#50561107_pgfId-1011617]##<x:transform

[#50561107_pgfId-1011767]## xslt=âXSLTStylesheetâ

{empty}[#50561107_pgfId-1011942]##
[\{docSystemId=âXMLSystemIdâ|xmlSystemId1=âXMLSystemIdâ}]

[#50561107_pgfId-1012342]## xsltSystemId=âXSLTSystemIdâ

{empty}[#50561107_pgfId-1011764]## [\{var=âvarNameâ
[scope=âscopeNameâ]|result=âresultObjectâ}]

[#50561107_pgfId-1011621]## XML Document to parse

[#50561107_pgfId-1011639]## optional <x:param> actions

[#50561107_pgfId-1011622]##</x:parse>

[#50561107_pgfId-1011752]##Â 

[#50561107_pgfId-1011755]##where scopeName is
\{page|request|session|application}

======= [#50561107_pgfId-1007841]##Body Content

image:jstl-52.gif[image]

[#50561107_pgfId-1007744]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561107_pgfId-1007786]##Attributes

image:jstl-52.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561107_pgfId-1011244]##Name |[#50561107_pgfId-1011246]##Dyn
|[#50561107_pgfId-1011248]##Type |[#50561107_pgfId-1011250]##Description
|[#50561107_pgfId-1011260]## _doc_ |[#50561107_pgfId-1011262]## _true_
|[#50561107_pgfId-1011264]## _String, Reader,
jakarta.xml.transform.Source, org.w3c.dom.Document, or object exported by
<x:parse>, <x:set>_ . |[#50561107_pgfId-1012066]##Source XML document to
be transformed. (If exported by <x:set>, it must correspond to a
well-formed XML document, not a partial document.)

|[#50561107_pgfId-1012374]## _xml_ |[#50561107_pgfId-1012376]## _true_
|[#50561107_pgfId-1012378]## _String, Reader,
jakarta.xml.transform.Source, org.w3c.dom.Document, or object exported by
<x:parse>, <x:set>_ . |[#50561107_pgfId-1012380]##
_Deprecatedlink:#pgfId-1012432[13]_ . Use attribute _doc_ instead.

|[#50561107_pgfId-1011277]## _xslt_ |[#50561107_pgfId-1011279]## _true_
|[#50561107_pgfId-1011281]## _String, Reader or
jakarta.xml.transform.Source_ |[#50561107_pgfId-1011284]##Transformation
stylesheet as a _String_ , _Reader_ , or _Source_ object.

|[#50561107_pgfId-1011971]##docSystemId |[#50561107_pgfId-1011973]##true
|[#50561107_pgfId-1011975]##String |[#50561107_pgfId-1011995]##The
system identifier (URI) for parsing the XML document.

|[#50561107_pgfId-1012409]##xmlSystemId |[#50561107_pgfId-1012411]##true
|[#50561107_pgfId-1012413]##String |[#50561107_pgfId-1012423]##
_Deprecated_ _1_ . Use attribute _docSystemId_ instead.

|[#50561107_pgfId-1012002]##xsltSystemId
|[#50561107_pgfId-1012004]##true |[#50561107_pgfId-1012006]##String
|[#50561107_pgfId-1012008]##The system identifier (URI) for parsing the
XSLT stylesheet.

|[#50561107_pgfId-1011286]## _var_ |[#50561107_pgfId-1011288]## _false_
|[#50561107_pgfId-1011290]## _String_ |[#50561107_pgfId-1011292]##Name
of the exported scoped variable for the transformed XML document. The
type of the scoped variable is _org.w3c.dom.Document_ .

|[#50561107_pgfId-1011294]## _scope_ |[#50561107_pgfId-1011296]##
_false_ |[#50561107_pgfId-1011298]## _String_
|[#50561107_pgfId-1011300]##Scope for var.

|[#50561107_pgfId-1011302]## _result_ |[#50561107_pgfId-1011304]##
_true_ a|
[#50561107_pgfId-1011306]## _jakarta.xml.transform._

[#50561107_pgfId-1012237]## _Result_

|[#50561107_pgfId-1011308]##Object that captures or processes the
transformation result.
|===

======= [#50561107_pgfId-1011462]##Null & Error Handling

image:jstl-52.gif[image]

[#50561107_pgfId-1012093]##If the source XML document is null or empty,
a _JspException_ is thrown.

[#50561107_pgfId-1012097]##If the source XSLT document is null or empty,
a _JspException_ is thrown.

======= [#50561107_pgfId-1009133]##Description

image:jstl-52.gif[image]

[#50561107_pgfId-1009691]##The <x:transform> tag applies a
transformation to an XML document (attribute _doc_ or the actionâs body
content), given a specific XSLT stylesheet (attribute _xslt_ ). It does
not perform any validation against DTD's or Schemas.

[#50561107_pgfId-1012018]##Nothing prevents an implementation from
caching _Transformer_ objects across invocations of <x:transform>,
though implementations should be careful they take into account both the
_xslt_ and _xsltSystemId_ attributes when deciding whether to use a
cached _Transformer_ or produce a new one. An implementation may assume
that any external entities that were referenced during parsing will not
change values during the life of the application.

[#50561107_pgfId-1011185]##The result of the transformation is written
to the page by default. It is also possible to capture the result of the
transformation in two other ways:

[#50561107_pgfId-1009715]## _jakarta.xml.transform.Result_ object
specified by the _result_ attribute _._

[#50561107_pgfId-1009723]## _org.w3c.dom.Document_ object saved in the
scoped variable specified by the _var_ and _scope_ attributes.

======= [#50561107_pgfId-1009207]##

image:jstl-51.gif[image]

<x:param>

[#50561107_pgfId-1009208]##Set transformation parameters. Nested action
of <x:transform>.

======= [#50561107_pgfId-1009209]##Syntax

image:jstl-52.gif[image]

[#50561107_pgfId-1009210]## _Syntax 1: Parameter value specified in
attribute âvalueâ_

[#50561107_pgfId-1009211]##<x:param name=ânameâ value=â _value_ â/>

[#50561107_pgfId-1009212]## _Syntax 2: Parameter value specified in the
body content_

[#50561107_pgfId-1009213]##<x:param name=ânameâ>

[#50561107_pgfId-1009214]## parameter value

[#50561107_pgfId-1009215]##</x:param>

======= [#50561107_pgfId-1009216]##Body Content

image:jstl-52.gif[image]

[#50561107_pgfId-1009217]##JSP. The JSP container processes the body
content, then the action trims it and processes it further.

======= [#50561107_pgfId-1009259]##Attributes

image:jstl-52.gif[image]

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50561107_pgfId-1011311]##Name |[#50561107_pgfId-1011313]##Dynamic
|[#50561107_pgfId-1011315]##Type |[#50561107_pgfId-1011317]##Description
|[#50561107_pgfId-1011319]## _name_ |[#50561107_pgfId-1011321]## _true_
|[#50561107_pgfId-1011323]## _String_ |[#50561107_pgfId-1011325]##Name
of the transformation parameter.

|[#50561107_pgfId-1011327]## _value_ |[#50561107_pgfId-1011329]## _true_
|[#50561107_pgfId-1011331]## _Object_ |[#50561107_pgfId-1011333]##Value
of the parameter.
|===

======= [#50561107_pgfId-1009260]##Description

image:jstl-52.gif[image]

[#50561107_pgfId-1009261]##The _<x:param>_ action must be nested within
_<x:transform>_ to set transformation parameters. The value of the
parameter can be specified either via the _value_ attribute, or via the
actionâs body content.

======= [#50561108_pgfId-1015867]##[#50561108_22536]##Â 

======= [#50561108_pgfId-1015868]##

image:jstl-53.gif[image]

Tag Library Validators

[#50561108_pgfId-1015869]##JSP 1.2 provides tag library validators
(TLVs) as a mechanism for a tag library to enforce constraints on the
JSP document (the "XML view") associated with any JSP page into which
the tag library is imported. While the expectation is that TLVs used by
a tag library will typically enforce multi-tag constraints related to
usage of the library's tags themselves, a TLV is free to perform
arbitrary validation of JSP documents. A TLV returns to the container
information about which elements, if any, are in violation of its
specific constraints, along with textual descriptions of the syntactic
violation.

[#50561108_pgfId-1015870]##JSTL provides TLVs that perform âreusableâ
validation; i.e. generic validation that custom tag-library authors
might wish to incorporate in their own tag libraries. These tag
libraries do not necessarily need to be substantial collections of tags;
a taglib may exist simply to provide site-specific validation logic.
Just like tag libraries whose primary focus is to provide new tags, such
"validation-centric" tag libraries may be configured and used by
"back-end" developers in order to affect the "front-end" JSP page
author's environment.

[#50561108_pgfId-1015871]##This chapter covers the JSTL tag library
validators.

======= [#50561108_pgfId-1015872]##

image:jstl-54.gif[image]

Overview

[#50561108_pgfId-1015873]##JSTL exposes via TLVs two simple types of
validations. These TLV classes may be used in custom tag-library
descriptors (TLDs) to restrict the page author's activities. The two
types of validation provided in this fashion are:

[#50561108_pgfId-1015874]##ScriptFree (see
link:jstl.htm#50561073_93849[See Java APIs]â) +
Assurance of script-free pages

[#50561108_pgfId-1015875]##PermittedTaglibs (see
link:jstl.htm#50561073_93849[See Java APIs]â) +
Enumeration of permitted tag libraries (including JSTL) on a page

[#50561108_pgfId-1015876]##For example, to prevent a JSP page from using
JSP scriptlets and JSP declarations, but still allow expressions, a
developer could create the following TLD:

[width="100%",cols="100%",]
|===
a|
[#50561108_pgfId-1018417]##<?xml version="1.0" encoding="UTF-8" ?>

[#50561108_pgfId-1018418]##Â 

[#50561108_pgfId-1018419]##<taglib
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50561108_pgfId-1018420]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50561108_pgfId-1018421]## xsi:schemaLocation= +
"http://java.sun.com/xml/ns/j2ee web jsptaglibrary_2_0.xsd"

[#50561108_pgfId-1015879]## version="2.0">

[#50561108_pgfId-1018435]## <description>

[#50561108_pgfId-1018436]## Validates JSP pages to prohibit use of
scripting elements.

[#50561108_pgfId-1018437]## </description>

[#50561108_pgfId-1015880]## <tlib-version>1.0</tlib-version>

[#50561108_pgfId-1016770]## <jsp-version>2.0</jsp.version>

[#50561108_pgfId-1016771]## <short-name>scriptfree</short-name>

[#50561108_pgfId-1016772]## <uri>http://acme.com/scriptfree</uri>

[#50561108_pgfId-1016776]##Â 

[#50561108_pgfId-1016777]## <validator>

[#50561108_pgfId-1016778]## <validator-class>

[#50561108_pgfId-1016779]## jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV

[#50561108_pgfId-1016780]## </validator-class>

[#50561108_pgfId-1016789]## <init-param>

[#50561108_pgfId-1016790]## <param-name>allowDeclarations</param-name>

[#50561108_pgfId-1016791]## <param-value>false</param-value>

[#50561108_pgfId-1016793]## </init-param>

[#50561108_pgfId-1016796]## <init-param>

[#50561108_pgfId-1016797]## <param-name>allowScriptlets</param-name>

[#50561108_pgfId-1016798]## <param-value>false</param-value>

[#50561108_pgfId-1016799]## </init-param>

[#50561108_pgfId-1017479]## <init-param>

[#50561108_pgfId-1017480]## <param-name>allowExpressions</param-name>

[#50561108_pgfId-1017481]## <param-value>true</param-value>

[#50561108_pgfId-1017482]## </init-param>

[#50561108_pgfId-1017486]## <init-param>

[#50561108_pgfId-1017487]## <param-name>allowRTExpressions</param-name>

[#50561108_pgfId-1017488]## <param-value>true</param-value>

[#50561108_pgfId-1017489]## </init-param>

[#50561108_pgfId-1016804]## </validator>

[#50561108_pgfId-1016805]##</taglib>

|===

[#50561108_pgfId-1018470]##Note that in JSP 2.0, scripting elements can
also be disabled through the use of the _scripting-invalid_
configuration element (see the JSP specification for details).

[#50561108_pgfId-1018514]##Similarly, to restrict a JSP page to a set of
permitted tag-libraries (in the example below, the JSTL âELâ tag
libraries), a developer could create the following TLD:

[width="100%",cols="100%",]
|===
a|
[#50561108_pgfId-1018445]##<?xml version="1.0" encoding="UTF-8" ?>

[#50561108_pgfId-1018446]##Â 

[#50561108_pgfId-1018447]##<taglib
xmlns="http://java.sun.com/xml/ns/j2ee"

[#50561108_pgfId-1018448]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50561108_pgfId-1018449]## xsi:schemaLocation= +
"http://java.sun.com/xml/ns/j2ee web jsptaglibrary_2_0.xsd"

[#50561108_pgfId-1018450]## version="2.0">

[#50561108_pgfId-1018464]## <description>

[#50561108_pgfId-1018465]## Restricts JSP pages to the JSTL tag
libraries

[#50561108_pgfId-1018466]## </description>

[#50561108_pgfId-1016842]## <tlib-version>1.0</tlib-version>

[#50561108_pgfId-1016843]## <jsp-version>2.0</jsp.version>

[#50561108_pgfId-1016844]## <short-name>jstl taglibs only</scriptfree>

[#50561108_pgfId-1016845]## <uri>http://acme.com/jstlTaglibsOnly</uri>

[#50561108_pgfId-1016849]##Â 

[#50561108_pgfId-1016850]## <validator>

[#50561108_pgfId-1016851]## <validator-class>

[#50561108_pgfId-1016852]##
jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV

[#50561108_pgfId-1016853]## </validator-class>

[#50561108_pgfId-1016854]## <init-param>

[#50561108_pgfId-1016855]## <param-name>permittedTaglibs</param-name>

[#50561108_pgfId-1016856]## <param-value>

[#50561108_pgfId-1016915]## http://java.sun.com/jstl/core

[#50561108_pgfId-1016927]## http://java.sun.com/jstl/xml

[#50561108_pgfId-1016931]## http://java.sun.com/jstl/fmt

[#50561108_pgfId-1016935]## http://java.sun.com/jstl/sql

[#50561108_pgfId-1016911]## </param-value>

[#50561108_pgfId-1016857]## </init-param>

[#50561108_pgfId-1016862]## </validator>

[#50561108_pgfId-1016869]##</taglib>

|===

======= [#50561109_pgfId-1000502]##[#50561109_78159]##Â 

======= [#50561109_pgfId-1004642]##

image:jstl-55.gif[image]

Functions

======= [#50561109_pgfId-1004687]##function tag library

image:jstl-56.gif[image]

[#50561109_pgfId-1004650]##Just like custom actions allow developers to
extend the JSP syntax with their own customized behavior, the expression
language defined in JSP 2.0 introduces the notion of _functions_ to
allow developers to extend the capabilities of the Expression Language.

[#50561109_pgfId-1004655]##JSTL is about the standardization, via these
extension mechanisms, of behavior that is commonly needed by page
authors. In addition to defining a standard set of actions, JSTL
therefore also defines a standardized set of EL functions. These
functions are described in this chapter.

======= [#50561109_pgfId-1002635]##

image:jstl-57.gif[image]

Overview

[#50561109_pgfId-1002769]##The JSTL functions are all grouped within the
_function_ tag library. They cover various domains of functionality
described below.

======= [#50561109_pgfId-1004706]##The _length_ Function

[#50561109_pgfId-1004749]##A feature sorely missed in JSTL 1.0 was the
ability to easily get the size of a collection. While the
_java.util.Collection_ interface defines a _size()_ method, it
unfortunately does not conform to the JavaBeans architecture design
pattern for properties and cannot be accessed via the expression
language.

[#50561109_pgfId-1005799]##The _length_ function has been designed to be
very similar to the use of "length" in EcmaScript. It can be applied to
any object supported by the JSTL iteration action
<c:forEach>link:#pgfId-1007339[14] and returns the length of the
collection. When applied to a String, it returns the number of
characters in the string.

[#50561109_pgfId-1007323]##A sample use of _length_ is shown in the
example below where scoped variable _athletes_ is a collection of
_Athletes_ objects.

[width="100%",cols="100%",]
|===
|[#50561109_pgfId-1004726]##There are $\{fn:length(athletes)} athletes
representing $\{country}
|===

======= [#50561109_pgfId-1004754]##String Manipulation Functions

[#50561109_pgfId-1005015]##String manipulation functions allow page
authors to:

[#50561109_pgfId-1005031]##Change the capitalization of a string (
_toLowerCase_ , _toUpperCase_ )

[#50561109_pgfId-1005035]##Get a subset of a string ( _substring,
substringAfter, substringBefore_ )

[#50561109_pgfId-1005832]##Trim a string ( _trim_ )

[#50561109_pgfId-1005833]##Replace characters in a string ( _replace_ )

[#50561109_pgfId-1005834]##Check if a string contains another string (
_indexOf, startsWith, endsWith, contains, containsIgnoreCase_ )

[#50561109_pgfId-1008957]##split a string ( _split_ ) into an array, and
join an array into a string ( _join_ )

[#50561109_pgfId-1007381]##Escape XML characters in the string (
_escapeXml_ )

[#50561109_pgfId-1007390]##The example below shows simple uses of these
functions.

[width="100%",cols="100%",]
|===
a|
[#50561109_pgfId-1007388]##<%-- truncate name to 30 chars and display it
in uppercase --%> +
$\{fn:toUpperCase(fn:substring(name, 0, 30))}

[#50561109_pgfId-1007389]##<%-- Display the text value prior to the
first â*â character --%> +
$\{fn:substringBefore(text, â*â)} +
 +
<%-- Scoped variable "custId" may contain whitespaces at the beginning
or end. Trim it first, otherwise we end up with +'s in the URL --%> +
<c:url var="myUrl" value="$\{base}/cust"> +
<c:param name="custId" value="$\{fn:trim(custId)}"/> +
</c:url> +
 +
<%-- Display the text in between brackets --%> +
$\{fn:substring(text, fn:indexOf(text, â(â)+1, +
fn:indexOf(text, â)â))} +
 +
<%-- Display the name if it contains the search string --%> +
<c:if test="$\{fn:containsIgnoreCase(name, searchString)}"> +
Found name: $\{name} +
</c:if> +
 +
<%-- Display the last 10 characters of the text value --%> +
$\{fn:substring(text, fn:length(text)-10)} +
 +
<%-- Display text value with bullets instead of â-â --%> +
$\{fn:replace(text, â-â, â&#149;â)}

|===

[#50561109_pgfId-1007391]##While one can always use <c:out> to make sure
that XML characters are properly escaped, the function escapeXml
provides a syntax that is more concise as can be seen in the following
example:

[width="100%",cols="100%",]
|===
a|
[#50561109_pgfId-1009176]##<%-- Escape XML characters when displaying
the value of a request parameter (avoid cross-site scripting) --%>

[#50561109_pgfId-1009185]##<input name="userName"
value="$\{fn:escapeXml(param:userName)}"> +
 +
<%-- Escape XML characters when passing an attribute value to an action
--%>

[#50561109_pgfId-1009116]##<%-- Using <c:out> with <c:set>--%> +
<c:set var="nameEscaped"> +
<c:out value="$\{name}"/> +
</c:set> +
<my:tag name="$\{nameEscaped}"/> +
 +
<%-- Using <c:out> with <jsp:attribute>--%> +
<my:tag> +
<jsp:attribute name="name"> +
<c:out value="$\{name}"/> +
</jsp:attribute> +
</my:tag> +
 +
<%-- Using fn:escapeXml --%> +
_<my:tag title="$\{fn:escapeXml(name)}"/>_

|===

======= [#50561109_pgfId-1008791]##

image:jstl-57.gif[image]

fn:contains

[#50561109_pgfId-1008792]##Tests if a string contains the specified
substring.

======= [#50561109_pgfId-1008793]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008794]##fn:contains( _string, substring_ ) â boolean

======= [#50561109_pgfId-1008820]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008797]##Argument |[#50561109_pgfId-1008799]##Type
|[#50561109_pgfId-1008801]##Description
|[#50561109_pgfId-1008803]## _string_ |[#50561109_pgfId-1008805]##
_String_ |[#50561109_pgfId-1008807]##The input string on which the
function is applied.

|[#50561109_pgfId-1008809]## _substring_ |[#50561109_pgfId-1008811]##
_String_ |[#50561109_pgfId-1008813]##The substring tested for.

|[#50561109_pgfId-1008815]## _Result_ |[#50561109_pgfId-1008817]##
_boolean_ |[#50561109_pgfId-1008819]## _true_ if the character sequence
represented by the _substring_ argument exists in the character sequence
represented by the _string_ argument, _false_ otherwise.
|===

======= [#50561109_pgfId-1008821]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008822]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1008823]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1009285]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009987]##Returns _true_ if the character sequence
represented by the _substring_ argument exists in the character sequence
represented by the _string_ argument, _false_ otherwise.

[#50561109_pgfId-1010023]##If _substring_ is empty, this matches the
beginning of the string and the value returned is true.

[#50561109_pgfId-1010003]##Â 

[#50561109_pgfId-1009286]##Essentially, _fn:contains_ returns the value
of:

[#50561109_pgfId-1010004]## _fn:indexOf(string, substring) != -1_ .

======= [#50561109_pgfId-1008862]##

image:jstl-57.gif[image]

fn:containsIgnoreCase

[#50561109_pgfId-1008863]##Tests if a string contains the specified
substring in a case insensitive way.

======= [#50561109_pgfId-1008864]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008865]##fn:containsIgnoreCase( _string, substring_ )
â boolean

======= [#50561109_pgfId-1008891]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008868]##Argument |[#50561109_pgfId-1008870]##Type
|[#50561109_pgfId-1008872]##Description
|[#50561109_pgfId-1008874]## _string_ |[#50561109_pgfId-1008876]##
_String_ |[#50561109_pgfId-1008878]##The input string on which the
function is applied.

|[#50561109_pgfId-1008880]## _substring_ |[#50561109_pgfId-1008882]##
_String_ |[#50561109_pgfId-1008884]##The substring tested for.

|[#50561109_pgfId-1008886]## _Result_ |[#50561109_pgfId-1008888]##
_boolean_ |[#50561109_pgfId-1008890]## _true_ if the character sequence
represented by the _substring_ argument exists in the character sequence
represented by the _string_ argument ignoring case differences, _false_
otherwise.
|===

======= [#50561109_pgfId-1008892]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1009313]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1009330]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1009339]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009340]##The behavior is the same as _fn:contains_ ,
except that the comparison is done in a case insensitive way, as in:

[#50561109_pgfId-1009345]## _fn:contains(fn:toUpperCase(string),
fn:toUpperCase(substring))._

======= [#50561109_pgfId-1009332]##

image:jstl-57.gif[image]

fn:endsWith

[#50561109_pgfId-1009043]##Tests if a string ends with the specified
suffix.

======= [#50561109_pgfId-1009044]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1009045]##fn:endsWith( _string, suffix_ ) â boolean

======= [#50561109_pgfId-1009071]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1009048]##Argument |[#50561109_pgfId-1009050]##Type
|[#50561109_pgfId-1009052]##Description
|[#50561109_pgfId-1009054]## _string_ |[#50561109_pgfId-1009056]##
_String_ |[#50561109_pgfId-1009058]##The input string on which the
function is applied.

|[#50561109_pgfId-1009060]## _suffix_ |[#50561109_pgfId-1009062]##
_String_ |[#50561109_pgfId-1009064]##The suffix to be matched.

|[#50561109_pgfId-1009066]## _Result_ |[#50561109_pgfId-1009068]##
_boolean_ |[#50561109_pgfId-1009070]## _true_ if the character sequence
represented by the _suffix_ argument is a suffix of the character
sequence represented by the _string_ argument, _false_ otherwise.
|===

======= [#50561109_pgfId-1009072]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1009371]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1009372]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1009383]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009384]##Behavior is similar to _fn:startsWith_ ,
except that the substring must be at the end of the input string.

[#50561109_pgfId-1010064]##If _suffix_ is empty, this matches the end of
the string and the value returned is true.

[#50561109_pgfId-1010062]##Â 

======= [#50561109_pgfId-1006738]##

image:jstl-57.gif[image]

fn:escapeXml

[#50561109_pgfId-1006584]##Escapes characters that could be interpreted
as XML markup.

======= [#50561109_pgfId-1006585]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1006537]##fn:escapeXml( _string_ ) â String

======= [#50561109_pgfId-1006557]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1006540]##Argument |[#50561109_pgfId-1006542]##Type
|[#50561109_pgfId-1006544]##Description
|[#50561109_pgfId-1006546]## _string_ |[#50561109_pgfId-1006548]##
_String_ |[#50561109_pgfId-1006550]##The input string on which the
conversion is applied.

|[#50561109_pgfId-1006552]## _Result_ |[#50561109_pgfId-1006554]##
_String_ |[#50561109_pgfId-1006556]##Converted string.
|===

======= [#50561109_pgfId-1006558]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1006559]##If _string_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1006612]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1006613]##Escapes characters that could be interpreted
as XML markup. The conversions are the same as the ones applied by
<c:out> when attribute _escapeXml_ is set to true. See
link:jstl.htm#50561098_85482[See <c:out>].

[#50561109_pgfId-1009396]##If _string_ is an empty string, an empty
string is returned.

======= [#50561109_pgfId-1005909]##

image:jstl-57.gif[image]

fn:indexOf

[#50561109_pgfId-1005910]##Returns the index within a string of the
first occurrence of a specified substring.

======= [#50561109_pgfId-1005911]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1005912]##fn:indexOf( _string, substring_ ) â int

======= [#50561109_pgfId-1005932]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1005915]##Argument |[#50561109_pgfId-1005917]##Type
|[#50561109_pgfId-1005919]##Description
|[#50561109_pgfId-1005921]## _string_ |[#50561109_pgfId-1005923]##
_String_ |[#50561109_pgfId-1005925]##The input string on which the
function is applied.

|[#50561109_pgfId-1006016]## _substring_ |[#50561109_pgfId-1006018]##
_String_ |[#50561109_pgfId-1006020]##The substring to search for in the
input string.

|[#50561109_pgfId-1005927]## _Result_ |[#50561109_pgfId-1005929]## _int_
|[#50561109_pgfId-1005979]##If the substring argument is a substring of
the input string, returns the index of the first character of the first
such substring; if it does not occur as a substring, -1 is returned.
|===

======= [#50561109_pgfId-1005933]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1005934]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1009262]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1008370]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1008298]##Returns the index (0-based) within a string
of the first occurrence of a specified substring according to the
semantics of method _indexOf(substring)_ of the Java class
_java.lang.String_ , with the exception of the "Null and Error Handling"
processing described above.

[#50561109_pgfId-1009261]##If _substring_ is empty, this matches the
beginning of the string and the value returned is 0.

[#50561109_pgfId-1008296]##Â 

======= [#50561109_pgfId-1007919]##

image:jstl-57.gif[image]

fn:join

[#50561109_pgfId-1007920]##Joins all elements of an array into a string.

======= [#50561109_pgfId-1007921]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1007922]##fn:join(array _, separator_ ) â String

======= [#50561109_pgfId-1007948]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1007925]##Argument |[#50561109_pgfId-1007927]##Type
|[#50561109_pgfId-1007929]##Description
|[#50561109_pgfId-1007931]## _array_
|[#50561109_pgfId-1007933]##String[] |[#50561109_pgfId-1007935]##Array
of strings to be joined.

|[#50561109_pgfId-1007937]## _separator_
|[#50561109_pgfId-1007939]##String |[#50561109_pgfId-1007941]##String to
separate each element of the array in the resulting string.

|[#50561109_pgfId-1007943]## _Result_ |[#50561109_pgfId-1007945]##
_String_ |[#50561109_pgfId-1007947]##All array elements joined into one
string.
|===

======= [#50561109_pgfId-1007949]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008067]##If _array_ is null, an empty string is
returned.

[#50561109_pgfId-1009922]##If separator is null, it is processed as an
empty string.

======= [#50561109_pgfId-1009849]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009817]##Joins all elements of the string array into a
string.

[#50561109_pgfId-1009854]##If separator is an empty string, then the
elements are joined together without any separator.

======= [#50561109_pgfId-1008415]##

image:jstl-57.gif[image]

fn:length

[#50561109_pgfId-1008416]##Returns the number of items in a collection,
or the number of characters in a string.

======= [#50561109_pgfId-1008417]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008418]##fn:length( _input_ ) â integer

======= [#50561109_pgfId-1008438]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008421]##Argument |[#50561109_pgfId-1008423]##Type
|[#50561109_pgfId-1008425]##Description
|[#50561109_pgfId-1008427]## _input_ |[#50561109_pgfId-1008429]##Any of
the types supported for the _items_ attribute in the <c:forEach> action,
or _String_ . |[#50561109_pgfId-1008431]##The input collection or string
on which the length is computed.

|[#50561109_pgfId-1008433]## _Result_ |[#50561109_pgfId-1008435]## _int_
|[#50561109_pgfId-1008437]##Length of the collection or the string.
|===

======= [#50561109_pgfId-1008439]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008440]##If _input_ is null, it is treated as an empty
collection and the value returned is 0.

[#50561109_pgfId-1008441]##If input is an empty string, the value
returned is 0.

[#50561109_pgfId-1008413]##Â 

[#50561109_pgfId-1007914]##Â 

======= [#50561109_pgfId-1006747]##

image:jstl-57.gif[image]

fn:replace

[#50561109_pgfId-1006748]##Returns a string resulting from replacing in
an input string all occurrences of a "before" substring into an "after"
substring.

======= [#50561109_pgfId-1006749]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1006750]##fn:replace( _inputString, beforeSubstring,
afterSubstring_ ) â String

======= [#50561109_pgfId-1006783]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1006754]##Argument |[#50561109_pgfId-1006756]##Type
|[#50561109_pgfId-1006758]##Description
|[#50561109_pgfId-1006760]## _inputString_ |[#50561109_pgfId-1006762]##
_String_ |[#50561109_pgfId-1006764]##The input string on which the
replace function is applied.

|[#50561109_pgfId-1006766]## _beforeSubstring_
|[#50561109_pgfId-1006768]## _String_ |[#50561109_pgfId-1006770]##The
"before" substring to be replaced.

|[#50561109_pgfId-1006772]## _afterSubstring_
|[#50561109_pgfId-1006774]## _String_ |[#50561109_pgfId-1006776]##The
"after" substring that replaces the "before" substring.

|[#50561109_pgfId-1006778]## _Result_ |[#50561109_pgfId-1006780]##
_String_ |[#50561109_pgfId-1006782]##The string that results from
replacing _beforeSubstring_ with _afterSubstring_ .
|===

======= [#50561109_pgfId-1006784]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1006785]##If _inputString_ is null, it is processed as
an empty string.

[#50561109_pgfId-1006855]##If _beforeSubstring_ is null, it is processed
as an empty string.

[#50561109_pgfId-1009208]##If _afterSubstring_ is null, it is processed
as an empty string.

======= [#50561109_pgfId-1007405]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009747]##All occurrences of _beforeSubstring_ are
replaced by _afterSubstring_ . The text replaced is not reprocessed for
further replacements.

[#50561109_pgfId-1009777]##If _inputstring_ is an empty string, an empty
string is returned.

[#50561109_pgfId-1009624]##If _beforeSubstring_ is an empty string, the
input string is returned.

[#50561109_pgfId-1009789]##If _afterSubstring_ is an empty string, all
occurrences of _beforeSubstring_ are removed from _inputString_ .

[#50561109_pgfId-1009787]##Â 

[#50561109_pgfId-1009605]##Â 

======= [#50561109_pgfId-1007788]##

image:jstl-57.gif[image]

fn:split

[#50561109_pgfId-1007789]##Splits a string into an array of substrings.

======= [#50561109_pgfId-1007790]##Syntax

image:jstl-58.gif[image]

{empty}[#50561109_pgfId-1007791]##fn:split( _string, delimiters_ ) â
String[]

======= [#50561109_pgfId-1007811]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1007794]##Argument |[#50561109_pgfId-1007796]##Type
|[#50561109_pgfId-1007798]##Description
|[#50561109_pgfId-1007800]## _string_ |[#50561109_pgfId-1007802]##String
|[#50561109_pgfId-1007804]##The input string that gets split into an
array of substrings.

|[#50561109_pgfId-1007853]## _delimiters_
|[#50561109_pgfId-1007855]##String |[#50561109_pgfId-1007857]##Delimiter
characters used to split the string.

|[#50561109_pgfId-1007806]## _Result_ |[#50561109_pgfId-1007808]##
_String[]_ |[#50561109_pgfId-1007810]##Array of strings.
|===

======= [#50561109_pgfId-1007812]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1009234]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1009654]##If _delimiters_ is null, it is processed as
an empty string.

======= [#50561109_pgfId-1008094]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1009664]##Breaks a string into tokens according to the
semantics of the Java class _java.util.StringTokenizer_ , with the
exception of the "Null and Error Handling" described above.

[#50561109_pgfId-1009706]##If the input string is empty, the array
returned contains one element consisting of an empty string (no
splitting occurred, original string is returned).

[#50561109_pgfId-1009901]##If _delimiters_ is an empty string, the array
returned contains one element consisting of the input string (no
splitting occurred, original string is returned).

[#50561109_pgfId-1009733]##Delimiter characters themselves are not
treated as tokens, and are not included in any token.

======= [#50561109_pgfId-1008640]##

image:jstl-57.gif[image]

fn:startsWith

[#50561109_pgfId-1008641]##Tests if a string starts with the specified
prefix.

======= [#50561109_pgfId-1008642]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008643]##fn:startsWith( _string, prefix_ ) â boolean

======= [#50561109_pgfId-1008669]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008646]##Argument |[#50561109_pgfId-1008648]##Type
|[#50561109_pgfId-1008650]##Description
|[#50561109_pgfId-1008652]## _string_ |[#50561109_pgfId-1008654]##
_String_ |[#50561109_pgfId-1008656]##The input string on which the
function is applied.

|[#50561109_pgfId-1008658]## _prefix_ |[#50561109_pgfId-1008660]##
_String_ |[#50561109_pgfId-1008662]##The prefix to be matched.

|[#50561109_pgfId-1008664]## _Result_ |[#50561109_pgfId-1008666]##
_boolean_ |[#50561109_pgfId-1008668]## _true_ if the character sequence
represented by the _prefix_ argument is a prefix of the character
sequence represented by the _string_ argument, _false_ otherwise.
|===

======= [#50561109_pgfId-1008670]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008671]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1008672]##If _prefix_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1008673]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1008755]##Tests if an input string starts with the
specified prefix according to the semantics of method _startsWith(String
prefix)_ of the Java class _java.lang.String_ , with the exception of
the "Null and Error Handling" processing described above.

[#50561109_pgfId-1010053]##If _prefix_ is empty, this matches the
beginning of the string and the value returned is true.

[#50561109_pgfId-1010051]##Â 

[#50561109_pgfId-1008674]##.

[#50561109_pgfId-1007786]##Â 

======= [#50561109_pgfId-1007222]##

image:jstl-57.gif[image]

fn:substring

[#50561109_pgfId-1005399]##Returns a subset of a string.

======= [#50561109_pgfId-1005400]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1005452]##fn:substring( _string, beginIndex, endIndex_
) â String

======= [#50561109_pgfId-1005421]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1005404]##Argument |[#50561109_pgfId-1005406]##Type
|[#50561109_pgfId-1005408]##Description
|[#50561109_pgfId-1005410]## _string_ |[#50561109_pgfId-1005412]##
_String_ |[#50561109_pgfId-1005414]##The input string on which the
substring function is applied.

|[#50561109_pgfId-1005473]## _beginIndex_ |[#50561109_pgfId-1005475]##
_int_ |[#50561109_pgfId-1005477]##The beginning index (0-based),
inclusive.

|[#50561109_pgfId-1005496]## _endIndex_ |[#50561109_pgfId-1005498]##
_int_ |[#50561109_pgfId-1005500]##The ending index (0-based), exclusive
.

|[#50561109_pgfId-1005416]## _Result_ |[#50561109_pgfId-1005418]##
_String_ |[#50561109_pgfId-1005420]##The substring of the input string.
|===

======= [#50561109_pgfId-1005422]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1005423]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1009433]##If _beginIndex_ is greater than the last
index of the input string, an empty string is returned.

[#50561109_pgfId-1008212]##If _beginIndex_ is less than 0, its value is
adjusted to be 0.

[#50561109_pgfId-1008213]##If _endIndex_ is less than 0 or greater than
the length of the input string, its value is adjusted to be the length
of the input string (the substring therefore starts at _beginIndex_ and
extends to the end of the input string).

[#50561109_pgfId-1008287]##If _endIndex_ is less than _beginIndex_ , an
empty string is returned.

======= [#50561109_pgfId-1005425]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1005541]##Returns a substring of the input string
according to the semantics of method _substring()_ of the Java class
_java.lang.String_ , with the exception of the "Null and Error Handling"
processing described above.

[#50561109_pgfId-1005505]##Â 

[#50561109_pgfId-1005537]##Using a 0-based indexing scheme, the
substring begins at the specified _beginIndex_ and extends to the
character at index _endIndex_ -1. The length of the substring is
therefore _endIndex-beginIndex_ .

[#50561109_pgfId-1008183]##It is suggested to use the value -1 for
_endIndex_ to extend the substring to the end of the input string.

======= [#50561109_pgfId-1008551]##

image:jstl-57.gif[image]

fn:substringAfter

[#50561109_pgfId-1008552]##Returns a subset of a string following a
specific substring.

======= [#50561109_pgfId-1008553]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008554]##fn:substringAfter( _string, substring_ ) â
String

======= [#50561109_pgfId-1008580]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008557]##Argument |[#50561109_pgfId-1008559]##Type
|[#50561109_pgfId-1008561]##Description
|[#50561109_pgfId-1008563]## _string_ |[#50561109_pgfId-1008565]##
_String_ |[#50561109_pgfId-1008567]##The input string on which the
substring function is applied.

|[#50561109_pgfId-1008569]## _substring_ |[#50561109_pgfId-1008571]##
_String_ |[#50561109_pgfId-1008573]##The substring that delimits the
beginning of the subset of the input string to be returned.

|[#50561109_pgfId-1008575]## _Result_ |[#50561109_pgfId-1008577]##
_String_ |[#50561109_pgfId-1008579]##The substring of the input string.
|===

======= [#50561109_pgfId-1008581]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008582]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1008583]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1008599]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1008600]##The substring returned starts at the first
character after the substring matched in the input string, and extends
up to the end of the input string.

[#50561109_pgfId-1009569]##If _string_ is an empty string, an empty
string is returned.

[#50561109_pgfId-1009581]##If _substring_ is an empty string, it matches
the beginning of the input string and the input string is returned. This
is consistent with the behavior of function _indexOf_ , where an empty
substring returns index 0.

[#50561109_pgfId-1009476]##If _substring_ does not occur in the input
string, an empty string is returned.

[#50561109_pgfId-1009465]##Â 

======= [#50561109_pgfId-1008450]##

image:jstl-57.gif[image]

fn:substringBefore

[#50561109_pgfId-1008451]##Returns a subset of a string before a
specific substring.

======= [#50561109_pgfId-1008452]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1008453]##fn:substringBefore( _string, substring_ ) â
String

======= [#50561109_pgfId-1008485]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1008456]##Argument |[#50561109_pgfId-1008458]##Type
|[#50561109_pgfId-1008460]##Description
|[#50561109_pgfId-1008462]## _string_ |[#50561109_pgfId-1008464]##
_String_ |[#50561109_pgfId-1008466]##The input string on which the
substring function is applied.

|[#50561109_pgfId-1008468]## _substring_ |[#50561109_pgfId-1008470]##
_String_ |[#50561109_pgfId-1008472]##The substring that delimits the end
of subset of the input string to be returned.

|[#50561109_pgfId-1008480]## _Result_ |[#50561109_pgfId-1008482]##
_String_ |[#50561109_pgfId-1008484]##The substring of the input string.
|===

======= [#50561109_pgfId-1008486]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1008487]##If _string_ is null, it is processed as an
empty string.

[#50561109_pgfId-1008534]##If _substring_ is null, it is processed as an
empty string.

======= [#50561109_pgfId-1008625]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1008626]##The substring returned starts at the first
character in the input string and extends up to the character just
before the substring matched in the input string.

[#50561109_pgfId-1009551]##If _string_ is an empty string, an empty
string is returned.

[#50561109_pgfId-1009565]##If _substring_ is an empty string, it matches
the beginning of the input string and an empty string is returned. This
is consistent with the behavior of function _indexOf_ , where an empty
substring returns index 0.

[#50561109_pgfId-1009493]##If _substring_ does not occur in the input
string, an empty string is returned.

[#50561109_pgfId-1009524]##Â 

[#50561109_pgfId-1009491]##Â 

======= [#50561109_pgfId-1005247]##

image:jstl-57.gif[image]

fn:toLowerCase

[#50561109_pgfId-1005248]##Converts all of the characters of a string to
lower case.

======= [#50561109_pgfId-1005249]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1005250]##fn:toLowerCase( _string_ ) â String

======= [#50561109_pgfId-1005270]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1005253]##Argument |[#50561109_pgfId-1005255]##Type
|[#50561109_pgfId-1005257]##Description
|[#50561109_pgfId-1005259]## _string_ |[#50561109_pgfId-1005261]##
_String_ |[#50561109_pgfId-1005263]##The input string on which the
transformation to lower case is applied.

|[#50561109_pgfId-1005265]## _Result_ |[#50561109_pgfId-1005267]##
_String_ |[#50561109_pgfId-1005269]##The input string transformed to
lower case.
|===

======= [#50561109_pgfId-1005271]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1005272]##If _string_ is null, it is treated as an
empty string and an empty string is returned.

======= [#50561109_pgfId-1005274]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1005332]##Converts all of the characters of the input
string to lower case according to the semantics of method
_toLowerCase()_ of the Java class _java.lang.String_ .

======= [#50561109_pgfId-1005347]##

image:jstl-57.gif[image]

fn:toUpperCase

[#50561109_pgfId-1005348]##Converts all of the characters of a string to
upper case.

======= [#50561109_pgfId-1005349]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1005350]##fn:toUpperCase( _string_ ) â String

======= [#50561109_pgfId-1005370]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1005353]##Argument |[#50561109_pgfId-1005355]##Type
|[#50561109_pgfId-1005357]##Description
|[#50561109_pgfId-1005359]## _string_ |[#50561109_pgfId-1005361]##
_String_ |[#50561109_pgfId-1005363]##The input string on which the the
transformation to upper case is applied.

|[#50561109_pgfId-1005365]## _Result_ |[#50561109_pgfId-1005367]##
_String_ |[#50561109_pgfId-1005369]##The input string transformed to
upper case.
|===

======= [#50561109_pgfId-1005371]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1005372]##If _string_ is null, it is treated as an
empty string and an empty string is returned.

======= [#50561109_pgfId-1005374]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1005375]##Converts all of the characters of the input
string to upper case according to the semantics of method
_toUpperCase()_ of the Java class _java.lang.String_ .

======= [#50561109_pgfId-1005838]##

image:jstl-57.gif[image]

fn:trim

[#50561109_pgfId-1005839]##Removes white space from both ends of a
string.

======= [#50561109_pgfId-1005840]##Syntax

image:jstl-58.gif[image]

[#50561109_pgfId-1005841]##fn:trim( _string_ ) â String

======= [#50561109_pgfId-1005861]##Arguments & Result

image:jstl-58.gif[image]

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561109_pgfId-1005844]##Argument |[#50561109_pgfId-1005846]##Type
|[#50561109_pgfId-1005848]##Description
|[#50561109_pgfId-1005850]## _string_ |[#50561109_pgfId-1005852]##
_String_ |[#50561109_pgfId-1005854]##The input string on which the the
trim is applied.

|[#50561109_pgfId-1005856]## _Result_ |[#50561109_pgfId-1005858]##
_String_ |[#50561109_pgfId-1005860]##The trimmed string.
|===

======= [#50561109_pgfId-1005862]##Null & Error Handling

image:jstl-58.gif[image]

[#50561109_pgfId-1005863]##If _string_ is null, it is treated as an
empty string and an empty string is returned.

======= [#50561109_pgfId-1005865]##Description

image:jstl-58.gif[image]

[#50561109_pgfId-1005866]##Removes white space from both ends of a
string according to the semantics of method _trim()_ of the Java class
_java.lang.String_ .

[#50561109_pgfId-1005867]##Â 

[#50561109_pgfId-1005245]##Â 

======= [#50561073_pgfId-874]##[#50561073_76288]##Â 

======= [#50561073_pgfId-999291]##

image:jstl-59.gif[image]

[#50561073_93849]##Java APIs

[#50561073_pgfId-1002053]##This chapter describes the Java APIs exposed
by the JSTL specification. The content of this chapter is generated
automatically from Javadoc annotations embedded into the actual Java
classes and interfaces of the implementation. This ensures that both the
specification and implementation are synchronized.

==== [#50561071_pgfId-20528]##[#50561071_marker-20526]##Package

== [#50561071_pgfId-20534]##[#50561071_PackageHead]##[#50561071_jakarta.servlet.jsp.jstl.core]##jakarta.servlet.jsp.jstl.core

====== [#50561071_pgfId-20536]##Description

[#50561071_pgfId-20539]##Â 

======= [#50561071_pgfId-18423]##Class Summary

== [#50561071_pgfId-18429]##Interfaces

[#50561071_pgfId-18441]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTag[LoopTag]link:jstl.htm#50561071_ClassHead[See
LoopTag]_

[#50561071_pgfId-18443]##JSTL allows developers to write custom
iteration tags by implementing the LoopTag interface.

[#50561071_pgfId-18455]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus[LoopTagStatus]link:jstl.htm#50561071_ClassHead[See
LoopTagStatus]_

[#50561071_pgfId-18457]##Exposes the current status of an iteration.

== [#50561071_pgfId-18463]##Classes

[#50561071_pgfId-18475]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport[ConditionalTagSupport]link:jstl.htm#50561071_ClassHead[See
ConditionalTagSupport]_

[#50561071_pgfId-18477]##Abstract class that facilitates implementation
of conditional actions where the boolean result is exposed as a JSP
scoped variable.

[#50561071_pgfId-18489]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config[Config]link:jstl.htm#50561071_ClassHead[See
Config]_

[#50561071_pgfId-18491]##Class supporting access to configuration
settings.

[#50561071_pgfId-18503]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression[IndexedValueExpression]link:jstl.htm#50561071_ClassHead[See
IndexedValueExpression]_

== [#50561071_pgfId-18495]##Â 

[#50561071_pgfId-18515]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression[IteratedExpression]link:jstl.htm#50561071_ClassHead[See
IteratedExpression]_

== [#50561071_pgfId-18507]##Â 

[#50561071_pgfId-18527]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression[IteratedValueExpression]link:jstl.htm#50561071_ClassHead[See
IteratedValueExpression]_

== [#50561071_pgfId-18519]##Â 

[#50561071_pgfId-18539]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport[LoopTagSupport]link:jstl.htm#50561071_ClassHead[See
LoopTagSupport]_

[#50561071_pgfId-18541]##Base support class to facilitate implementation
of iteration tags.

[#50561071_pgfId-18553]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression[StringTokenValueExpression]link:jstl.htm#50561071_ClassHead[See
StringTokenValueExpression]_

== [#50561071_pgfId-18545]##Â 

==== [#50561071_pgfId-20541]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-20549]##[#50561071_marker-20543]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport]##ConditionalTagSupport

====== [#50561071_pgfId-20551]##Declaration

[#50561071_pgfId-20553]##public abstract class _ConditionalTagSupport_
extends _jakarta.servlet.jsp.tagext.TagSupport_

[#50561071_pgfId-20555]## Â 

[#50561071_pgfId-20557]## _java.lang.Object_

[#50561071_pgfId-20559]## |

[#50561071_pgfId-20561]## +-- _jakarta.servlet.jsp.tagext.TagSupport_

[#50561071_pgfId-20563]## |

[#50561071_pgfId-20565]## +--
_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport_

======= [#50561071_pgfId-20567]##All Implemented Interfaces:

[#50561071_pgfId-20569]## _jakarta.servlet.jsp.tagext.IterationTag_ ,
_jakarta.servlet.jsp.tagext.JspTag_ , _java.io.Serializable_ ,
_jakarta.servlet.jsp.tagext.Tag_

====== [#50561071_pgfId-20571]##Description

[#50561071_pgfId-20573]##Abstract class that facilitates implementation
of conditional actions where the boolean result is exposed as a JSP
scoped variable. The boolean result may then be used as the test
condition in a <c:when> action.

[#50561071_pgfId-20575]##This base class provides support for:

[#50561071_pgfId-20577]##Conditional processing of the actionâs body
based on the returned value of the abstract method _condition()_ .

[#50561071_pgfId-20579]##Storing the result of _condition()_ as a
_Boolean_ object into a JSP scoped variable identified by attributes
_var_ and _scope_ .

[#50561071_pgfId-20582]##Â 

======= [#50561071_pgfId-18560]##Member Summary

== [#50561071_pgfId-18566]##Constructors

[#50561071_pgfId-18572]##Â 

[#50561071_pgfId-18580]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.ConditionalTagSupport()[ConditionalTagSupport()]link:jstl.htm#50561071_MemberHead[See
ConditionalTagSupport()]_

== [#50561071_pgfId-18586]##Methods

[#50561071_pgfId-18592]##protected abstract boolean

[#50561071_pgfId-18600]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.condition()[condition()]link:jstl.htm#50561071_MemberHead[See
condition()]_

[#50561071_pgfId-18606]## int

[#50561071_pgfId-18614]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.doStartTag()[doStartTag()]link:jstl.htm#50561071_MemberHead[See
doStartTag()]_

[#50561071_pgfId-18620]## void

[#50561071_pgfId-18628]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.release()[release()]link:jstl.htm#50561071_MemberHead[See
release()]_

[#50561071_pgfId-18634]## void

[#50561071_pgfId-18642]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.setScope(java.lang.String)[setScope(java.lang.String
scope)]link:jstl.htm#50561071_MemberHead[See setScope(String)]_

[#50561071_pgfId-18648]## void

[#50561071_pgfId-18656]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.setVar(java.lang.String)[setVar(java.lang.String
var)]link:jstl.htm#50561071_MemberHead[See setVar(String)]_

[#50561071_pgfId-20585]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-18661]##Inherited Member Summary

a|
======= [#50561071_pgfId-18665]##Fields inherited from interface _IterationTag_

|[#50561071_pgfId-18669]## _EVAL_BODY_AGAIN_

a|
======= [#50561071_pgfId-18673]##Fields inherited from interface _Tag_

|[#50561071_pgfId-18677]## _EVAL_BODY_INCLUDE_ , _EVAL_PAGE_ ,
_SKIP_BODY_ , _SKIP_PAGE_

a|
======= [#50561071_pgfId-18681]##Fields inherited from class _TagSupport_

|[#50561071_pgfId-18685]## _id_ , _pageContext_

a|
======= [#50561071_pgfId-18689]##Methods inherited from class _Object_

|[#50561071_pgfId-18693]## _clone()_ , _equals(Object)_ , _finalize()_ ,
_getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ , _toString()_
, _wait()_ , _wait(long)_ , _wait(long, int)_

a|
======= [#50561071_pgfId-18697]##Methods inherited from class _TagSupport_

|[#50561071_pgfId-18701]## _doAfterBody()_ , _doEndTag()_ ,
_findAncestorWithClass(Tag, Class)_ , _getId()_ , _getParent()_ ,
_getValue(String)_ , _getValues()_ , _removeValue(String)_ ,
_setId(String)_ , _setPageContext(PageContext)_ , _setParent(Tag)_ ,
_setValue(String, Object)_
|===

======= [#50561071_pgfId-20587]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-20595]##[#50561071_marker-20589]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.ConditionalTagSupport()]##ConditionalTagSupport()

[#50561071_pgfId-20597]##public _ConditionalTagSupport_ ()

[#50561071_pgfId-20599]##Base constructor to initialize local state. As
with _TagSupport_ , subclasses should not implement constructors with
arguments, and no-argument constructors implemented by subclasses must
call the superclass constructor.

======= [#50561071_pgfId-20601]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-20609]##[#50561071_marker-20603]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.condition()]##condition()

[#50561071_pgfId-20611]##protected abstract boolean _condition_ () +
throws JspTagException

[#50561071_pgfId-20613]##Subclasses implement this method to compute the
boolean result of the conditional action. This method is invoked once
per tag invocation by _doStartTag()_ .

======= [#50561071_pgfId-20615]##Returns:

[#50561071_pgfId-20617]##a boolean representing the condition that a
particular subclass uses to drive its conditional logic.

======= [#50561071_pgfId-20619]##Throws:

[#50561071_pgfId-20621]## _jakarta.servlet.jsp.JspTagException_

======= [#50561071_pgfId-20629]##[#50561071_marker-20623]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.doStartTag()]##doStartTag()

[#50561071_pgfId-20631]##public int _doStartTag_ () +
throws JspException

[#50561071_pgfId-20633]##Includes its body if _condition()_ evaluates to
true.

======= [#50561071_pgfId-20635]##Overrides:

[#50561071_pgfId-20637]## _doStartTag_ in class _TagSupport_

======= [#50561071_pgfId-20639]##Throws:

[#50561071_pgfId-20641]## _jakarta.servlet.jsp.JspException_

======= [#50561071_pgfId-20649]##[#50561071_marker-20643]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.release()]##release()

[#50561071_pgfId-20651]##public void _release_ ()

[#50561071_pgfId-20653]##Releases any resources this
ConditionalTagSupport may have (or inherit).

======= [#50561071_pgfId-20655]##Overrides:

[#50561071_pgfId-20657]## _release_ in class _TagSupport_

======= [#50561071_pgfId-20665]##[#50561071_marker-20659]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.setScope(java.lang.String)]##setScope(String)

[#50561071_pgfId-20667]##public void _setScope_ ( _java.lang.String_
scope)

[#50561071_pgfId-20669]##Sets the âscopeâ attribute.

======= [#50561071_pgfId-20671]##Parameters:

[#50561071_pgfId-20673]## _scope_ - Scope of the âvarâ attribute

======= [#50561071_pgfId-20681]##[#50561071_marker-20675]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.ConditionalTagSupport.setVar(java.lang.String)]##setVar(String)

[#50561071_pgfId-20683]##public void _setVar_ ( _java.lang.String_ var)

[#50561071_pgfId-20685]##Sets the âvarâ attribute.

======= [#50561071_pgfId-20687]##Parameters:

[#50561071_pgfId-20689]## _var_ - Name of the exported scoped variable
storing the result of _condition()_ .

==== [#50561071_pgfId-20691]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-20699]##[#50561071_marker-20693]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config]##Config

====== [#50561071_pgfId-20701]##Declaration

[#50561071_pgfId-20703]##public class _Config_

[#50561071_pgfId-20705]## Â 

[#50561071_pgfId-20707]## _java.lang.Object_

[#50561071_pgfId-20709]## |

[#50561071_pgfId-20711]## +-- _jakarta.servlet.jsp.jstl.core.Config_

====== [#50561071_pgfId-20713]##Description

[#50561071_pgfId-20715]##Class supporting access to configuration
settings.

[#50561071_pgfId-20718]##Â 

======= [#50561071_pgfId-18708]##Member Summary

== [#50561071_pgfId-18714]##Fields

[#50561071_pgfId-18720]##static java.lang.String

[#50561071_pgfId-18728]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_FALLBACK_LOCALE[FMT_FALLBACK_LOCALE]link:jstl.htm#50561071_MemberHead[See
FMT_FALLBACK_LOCALE]_

[#50561071_pgfId-18734]##static java.lang.String

[#50561071_pgfId-18742]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_LOCALE[FMT_LOCALE]link:jstl.htm#50561071_MemberHead[See
FMT_LOCALE]_

[#50561071_pgfId-18748]##static java.lang.String

[#50561071_pgfId-18756]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_LOCALIZATION_CONTEXT[FMT_LOCALIZATION_CONTEXT]link:jstl.htm#50561071_MemberHead[See
FMT_LOCALIZATION_CONTEXT]_

[#50561071_pgfId-18762]##static java.lang.String

[#50561071_pgfId-18770]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_TIME_ZONE[FMT_TIME_ZONE]link:jstl.htm#50561071_MemberHead[See
FMT_TIME_ZONE]_

[#50561071_pgfId-18776]##static java.lang.String

[#50561071_pgfId-18784]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.SQL_DATA_SOURCE[SQL_DATA_SOURCE]link:jstl.htm#50561071_MemberHead[See
SQL_DATA_SOURCE]_

[#50561071_pgfId-18790]##static java.lang.String

[#50561071_pgfId-18798]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.SQL_MAX_ROWS[SQL_MAX_ROWS]link:jstl.htm#50561071_MemberHead[See
SQL_MAX_ROWS]_

== [#50561071_pgfId-18804]##Constructors

[#50561071_pgfId-18810]##Â 

[#50561071_pgfId-18818]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.Config()[Config()]link:jstl.htm#50561071_MemberHead[See
Config()]_

== [#50561071_pgfId-18824]##Methods

[#50561071_pgfId-18830]##static java.lang.Object

[#50561071_pgfId-18838]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.find(jakarta.servlet.jsp.PageContext,%20java.lang.String)[find(jakarta.servlet.jsp.PageContext
pc, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
find(PageContext, String)]_

[#50561071_pgfId-18844]##static java.lang.Object

[#50561071_pgfId-18852]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.http.HttpSession,%20java.lang.String)[get(jakarta.servlet.http.HttpSession
session, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
get(HttpSession, String)]_

[#50561071_pgfId-18858]##static java.lang.Object

[#50561071_pgfId-18866]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20int)[get(jakarta.servlet.jsp.PageContext
pc, java.lang.String name, int
scope)]link:jstl.htm#50561071_MemberHead[See get(PageContext, String,
int)]_

[#50561071_pgfId-18872]##static java.lang.Object

[#50561071_pgfId-18880]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.ServletContext,%20java.lang.String)[get(jakarta.servlet.ServletContext
context, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
get(ServletContext, String)]_

[#50561071_pgfId-18886]##static java.lang.Object

[#50561071_pgfId-18894]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.ServletRequest,%20java.lang.String)[get(jakarta.servlet.ServletRequest
request, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
get(ServletRequest, String)]_

[#50561071_pgfId-18900]##static void

[#50561071_pgfId-18908]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.http.HttpSession,%20java.lang.String)[remove(jakarta.servlet.http.HttpSession
session, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
remove(HttpSession, String)]_

[#50561071_pgfId-18914]##static void

[#50561071_pgfId-18922]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20int)[remove(jakarta.servlet.jsp.PageContext
pc, java.lang.String name, int
scope)]link:jstl.htm#50561071_MemberHead[See remove(PageContext, String,
int)]_

[#50561071_pgfId-18928]##static void

[#50561071_pgfId-18936]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.ServletContext,%20java.lang.String)[remove(jakarta.servlet.ServletContext
context, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
remove(ServletContext, String)]_

[#50561071_pgfId-18942]##static void

[#50561071_pgfId-18950]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.ServletRequest,%20java.lang.String)[remove(jakarta.servlet.ServletRequest
request, java.lang.String name)]link:jstl.htm#50561071_MemberHead[See
remove(ServletRequest, String)]_

[#50561071_pgfId-18956]##static void

[#50561071_pgfId-18964]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.http.HttpSession,%20java.lang.String,%20java.lang.Object)[set(jakarta.servlet.http.HttpSession
session, java.lang.String name, java.lang.Object
value)]link:jstl.htm#50561071_MemberHead[See set(HttpSession, String,
Object)]_

[#50561071_pgfId-18970]##static void

[#50561071_pgfId-18978]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20java.lang.Object,%20int)[set(jakarta.servlet.jsp.PageContext
pc, java.lang.String name, java.lang.Object value, int
scope)]link:jstl.htm#50561071_MemberHead[See set(PageContext, String,
Object, int)]_

[#50561071_pgfId-18984]##static void

[#50561071_pgfId-18992]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.ServletContext,%20java.lang.String,%20java.lang.Object)[set(jakarta.servlet.ServletContext
context, java.lang.String name, java.lang.Object
value)]link:jstl.htm#50561071_MemberHead[See set(ServletContext, String,
Object)]_

[#50561071_pgfId-18998]##static void

[#50561071_pgfId-19006]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.ServletRequest,%20java.lang.String,%20java.lang.Object)[set(jakarta.servlet.ServletRequest
request, java.lang.String name, java.lang.Object
value)]link:jstl.htm#50561071_MemberHead[See set(ServletRequest, String,
Object)]_

[#50561071_pgfId-20721]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-19011]##Inherited Member Summary

a|
======= [#50561071_pgfId-19015]##Methods inherited from class _Object_

|[#50561071_pgfId-19019]## _clone()_ , _equals(Object)_ , _finalize()_ ,
_getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ , _toString()_
, _wait()_ , _wait(long)_ , _wait(long, int)_
|===

======= [#50561071_pgfId-20723]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-20731]##[#50561071_marker-20725]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_FALLBACK_LOCALE]##FMT_FALLBACK_LOCALE

[#50561071_pgfId-20733]##public static final _java.lang.String_
_FMT_FALLBACK_LOCALE_

[#50561071_pgfId-20735]##Name of configuration setting for fallback
locale

======= [#50561071_pgfId-20743]##[#50561071_marker-20737]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_LOCALE]##FMT_LOCALE

[#50561071_pgfId-20745]##public static final _java.lang.String_
_FMT_LOCALE_

[#50561071_pgfId-20747]##Name of configuration setting for application-
(as opposed to browser-) based preferred locale

======= [#50561071_pgfId-20755]##[#50561071_marker-20749]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_LOCALIZATION_CONTEXT]##FMT_LOCALIZATION_CONTEXT

[#50561071_pgfId-20757]##public static final _java.lang.String_
_FMT_LOCALIZATION_CONTEXT_

[#50561071_pgfId-20759]##Name of configuration setting for i18n
localization context

======= [#50561071_pgfId-20767]##[#50561071_marker-20761]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.FMT_TIME_ZONE]##FMT_TIME_ZONE

[#50561071_pgfId-20769]##public static final _java.lang.String_
_FMT_TIME_ZONE_

[#50561071_pgfId-20771]##Name of localization setting for time zone

======= [#50561071_pgfId-20779]##[#50561071_marker-20773]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.SQL_DATA_SOURCE]##SQL_DATA_SOURCE

[#50561071_pgfId-20781]##public static final _java.lang.String_
_SQL_DATA_SOURCE_

[#50561071_pgfId-20783]##Name of configuration setting for SQL data
source

======= [#50561071_pgfId-20791]##[#50561071_marker-20785]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.SQL_MAX_ROWS]##SQL_MAX_ROWS

[#50561071_pgfId-20793]##public static final _java.lang.String_
_SQL_MAX_ROWS_

[#50561071_pgfId-20795]##Name of configuration setting for maximum
number of rows to be included in SQL query result

======= [#50561071_pgfId-20797]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-20805]##[#50561071_marker-20799]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.Config()]##Config()

[#50561071_pgfId-20807]##public _Config_ ()

======= [#50561071_pgfId-20809]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-20817]##[#50561071_marker-20811]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.find(jakarta.servlet.jsp.PageContext, java.lang.String)]##find(PageContext, String)

[#50561071_pgfId-20819]##public static _java.lang.Object_ _find_ (
_jakarta.servlet.jsp.PageContext_ pc, _java.lang.String_ name)

[#50561071_pgfId-20821]##Finds the value associated with a specific
configuration setting identified by its context initialization parameter
name.

[#50561071_pgfId-20823]##For each of the JSP scopes (page, request,
session, application), get the value of the configuration variable
identified by _name_ using method _get()_ . Return as soon as a non-null
value is found. If no value is found, get the value of the context
initialization parameter identified by _name_ .

======= [#50561071_pgfId-20825]##Parameters:

[#50561071_pgfId-20827]## _pc_ - Page context in which the configuration
setting is to be searched

[#50561071_pgfId-20829]## _name_ - Context initialization parameter name
of the configuration setting

======= [#50561071_pgfId-20831]##Returns:

[#50561071_pgfId-20833]##The _java.lang.Object_ associated with the
configuration setting identified by _name_ , or null if it is not
defined.

======= [#50561071_pgfId-20841]##[#50561071_marker-20835]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.jsp.PageContext, java.lang.String, int)]##get(PageContext, String, int)

[#50561071_pgfId-20843]##public static _java.lang.Object_ _get_ (
_jakarta.servlet.jsp.PageContext_ pc, _java.lang.String_ name, int scope)

[#50561071_pgfId-20845]##Looks up a configuration variable in the given
scope.

[#50561071_pgfId-20847]##The lookup of configuration variables is
performed as if each scope had its own name space, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-20849]##Parameters:

[#50561071_pgfId-20851]## _pc_ - Page context in which the configuration
variable is to be looked up

[#50561071_pgfId-20853]## _name_ - Configuration variable name

[#50561071_pgfId-20855]## _scope_ - Scope in which the configuration
variable is to be looked up

======= [#50561071_pgfId-20857]##Returns:

[#50561071_pgfId-20859]##The _java.lang.Object_ associated with the
configuration variable, or null if it is not defined.

======= [#50561071_pgfId-20867]##[#50561071_marker-20861]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.ServletRequest, java.lang.String)]##get(ServletRequest, String)

[#50561071_pgfId-20869]##public static _java.lang.Object_ _get_ (
_jakarta.servlet.ServletRequest_ request, _java.lang.String_ name)

[#50561071_pgfId-20871]##Looks up a configuration variable in the
ârequestâ scope.

[#50561071_pgfId-20873]##The lookup of configuration variables is
performed as if each scope had its own name space, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-20875]##Parameters:

[#50561071_pgfId-20877]## _request_ - Request object in which the
configuration variable is to be looked up

[#50561071_pgfId-20879]## _name_ - Configuration variable name

======= [#50561071_pgfId-20881]##Returns:

[#50561071_pgfId-20883]##The _java.lang.Object_ associated with the
configuration variable, or null if it is not defined.

======= [#50561071_pgfId-20891]##[#50561071_marker-20885]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.http.HttpSession, java.lang.String)]##get(HttpSession, String)

[#50561071_pgfId-20893]##public static _java.lang.Object_ _get_ (
_jakarta.servlet.http.HttpSession_ session, _java.lang.String_ name)

[#50561071_pgfId-20895]##Looks up a configuration variable in the
âsessionâ scope.

[#50561071_pgfId-20897]##The lookup of configuration variables is
performed as if each scope had its own name space, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-20899]##Parameters:

[#50561071_pgfId-20901]## _session_ - Session object in which the
configuration variable is to be looked up

[#50561071_pgfId-20903]## _name_ - Configuration variable name

======= [#50561071_pgfId-20905]##Returns:

[#50561071_pgfId-20907]##The _java.lang.Object_ associated with the
configuration variable, or null if it is not defined, if session is
null, or if the session is invalidated.

======= [#50561071_pgfId-20915]##[#50561071_marker-20909]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.get(jakarta.servlet.ServletContext, java.lang.String)]##get(ServletContext, String)

[#50561071_pgfId-20917]##public static _java.lang.Object_ _get_ (
_jakarta.servlet.ServletContext_ context, _java.lang.String_ name)

[#50561071_pgfId-20919]##Looks up a configuration variable in the
âapplicationâ scope.

[#50561071_pgfId-20921]##The lookup of configuration variables is
performed as if each scope had its own name space, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-20923]##Parameters:

[#50561071_pgfId-20925]## _context_ - Servlet context in which the
configuration variable is to be looked up

[#50561071_pgfId-20927]## _name_ - Configuration variable name

======= [#50561071_pgfId-20929]##Returns:

[#50561071_pgfId-20931]##The _java.lang.Object_ associated with the
configuration variable, or null if it is not defined.

======= [#50561071_pgfId-20939]##[#50561071_marker-20933]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.jsp.PageContext, java.lang.String, int)]##remove(PageContext, String, int)

[#50561071_pgfId-20941]##public static void _remove_ (
_jakarta.servlet.jsp.PageContext_ pc, _java.lang.String_ name, int scope)

[#50561071_pgfId-20943]##Removes a configuration variable from the given
scope.

[#50561071_pgfId-20945]##Removing a configuration variable is performed
as if each scope had its own namespace, that is, the same configuration
variable name in one scope does not impact one stored in a different
scope.

======= [#50561071_pgfId-20947]##Parameters:

[#50561071_pgfId-20949]## _pc_ - Page context from which the
configuration variable is to be removed

[#50561071_pgfId-20951]## _name_ - Configuration variable name

[#50561071_pgfId-20953]## _scope_ - Scope from which the configuration
variable is to be removed

======= [#50561071_pgfId-20961]##[#50561071_marker-20955]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.ServletRequest, java.lang.String)]##remove(ServletRequest, String)

[#50561071_pgfId-20963]##public static void _remove_ (
_jakarta.servlet.ServletRequest_ request, _java.lang.String_ name)

[#50561071_pgfId-20965]##Removes a configuration variable from the
ârequestâ scope.

[#50561071_pgfId-20967]##Removing a configuration variable is performed
as if each scope had its own namespace, that is, the same configuration
variable name in one scope does not impact one stored in a different
scope.

======= [#50561071_pgfId-20969]##Parameters:

[#50561071_pgfId-20971]## _request_ - Request object from which the
configuration variable is to be removed

[#50561071_pgfId-20973]## _name_ - Configuration variable name

======= [#50561071_pgfId-20981]##[#50561071_marker-20975]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.http.HttpSession, java.lang.String)]##remove(HttpSession, String)

[#50561071_pgfId-20983]##public static void _remove_ (
_jakarta.servlet.http.HttpSession_ session, _java.lang.String_ name)

[#50561071_pgfId-20985]##Removes a configuration variable from the
âsessionâ scope.

[#50561071_pgfId-20987]##Removing a configuration variable is performed
as if each scope had its own namespace, that is, the same configuration
variable name in one scope does not impact one stored in a different
scope.

======= [#50561071_pgfId-20989]##Parameters:

[#50561071_pgfId-20991]## _session_ - Session object from which the
configuration variable is to be removed

[#50561071_pgfId-20993]## _name_ - Configuration variable name

======= [#50561071_pgfId-21001]##[#50561071_marker-20995]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.remove(jakarta.servlet.ServletContext, java.lang.String)]##remove(ServletContext, String)

[#50561071_pgfId-21003]##public static void _remove_ (
_jakarta.servlet.ServletContext_ context, _java.lang.String_ name)

[#50561071_pgfId-21005]##Removes a configuration variable from the
âapplicationâ scope.

[#50561071_pgfId-21007]##Removing a configuration variable is performed
as if each scope had its own namespace, that is, the same configuration
variable name in one scope does not impact one stored in a different
scope.

======= [#50561071_pgfId-21009]##Parameters:

[#50561071_pgfId-21011]## _context_ - Servlet context from which the
configuration variable is to be removed

[#50561071_pgfId-21013]## _name_ - Configuration variable name

======= [#50561071_pgfId-21021]##[#50561071_marker-21015]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.jsp.PageContext, java.lang.String, java.lang.Object, int)]##set(PageContext, String, Object, int)

[#50561071_pgfId-21023]##public static void _set_ (
_jakarta.servlet.jsp.PageContext_ pc, _java.lang.String_ name,
_java.lang.Object_ value, int scope)

[#50561071_pgfId-21025]##Sets the value of a configuration variable in
the given scope.

[#50561071_pgfId-21027]##Setting the value of a configuration variable
is performed as if each scope had its own namespace, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-21029]##Parameters:

[#50561071_pgfId-21031]## _pc_ - Page context in which the configuration
variable is to be set

[#50561071_pgfId-21033]## _name_ - Configuration variable name

[#50561071_pgfId-21035]## _value_ - Configuration variable value

[#50561071_pgfId-21037]## _scope_ - Scope in which the configuration
variable is to be set

======= [#50561071_pgfId-21045]##[#50561071_marker-21039]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.ServletRequest, java.lang.String, java.lang.Object)]##set(ServletRequest, String, Object)

[#50561071_pgfId-21047]##public static void _set_ (
_jakarta.servlet.ServletRequest_ request, _java.lang.String_ name,
_java.lang.Object_ value)

[#50561071_pgfId-21049]##Sets the value of a configuration variable in
the ârequestâ scope.

[#50561071_pgfId-21051]##Setting the value of a configuration variable
is performed as if each scope had its own namespace, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-21053]##Parameters:

[#50561071_pgfId-21055]## _request_ - Request object in which the
configuration variable is to be set

[#50561071_pgfId-21057]## _name_ - Configuration variable name

[#50561071_pgfId-21059]## _value_ - Configuration variable value

======= [#50561071_pgfId-21067]##[#50561071_marker-21061]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.http.HttpSession, java.lang.String, java.lang.Object)]##set(HttpSession, String, Object)

[#50561071_pgfId-21069]##public static void _set_ (
_jakarta.servlet.http.HttpSession_ session, _java.lang.String_ name,
_java.lang.Object_ value)

[#50561071_pgfId-21071]##Sets the value of a configuration variable in
the âsessionâ scope.

[#50561071_pgfId-21073]##Setting the value of a configuration variable
is performed as if each scope had its own namespace, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-21075]##Parameters:

[#50561071_pgfId-21077]## _session_ - Session object in which the
configuration variable is to be set

[#50561071_pgfId-21079]## _name_ - Configuration variable name

[#50561071_pgfId-21081]## _value_ - Configuration variable value

======= [#50561071_pgfId-21089]##[#50561071_marker-21083]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.Config.set(jakarta.servlet.ServletContext, java.lang.String, java.lang.Object)]##set(ServletContext, String, Object)

[#50561071_pgfId-21091]##public static void _set_ (
_jakarta.servlet.ServletContext_ context, _java.lang.String_ name,
_java.lang.Object_ value)

[#50561071_pgfId-21093]##Sets the value of a configuration variable in
the âapplicationâ scope.

[#50561071_pgfId-21095]##Setting the value of a configuration variable
is performed as if each scope had its own namespace, that is, the same
configuration variable name in one scope does not replace one stored in
a different scope.

======= [#50561071_pgfId-21097]##Parameters:

[#50561071_pgfId-21099]## _context_ - Servlet context in which the
configuration variable is to be set

[#50561071_pgfId-21101]## _name_ - Configuration variable name

[#50561071_pgfId-21103]## _value_ - Configuration variable value

==== [#50561071_pgfId-21105]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21113]##[#50561071_marker-21107]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression]##IndexedValueExpression

====== [#50561071_pgfId-21115]##Declaration

[#50561071_pgfId-21117]##public final class _IndexedValueExpression_
extends _jakarta.el.ValueExpression_

[#50561071_pgfId-21119]## Â 

[#50561071_pgfId-21121]## _java.lang.Object_

[#50561071_pgfId-21123]## |

[#50561071_pgfId-21125]## +-- _jakarta.el.Expression_

[#50561071_pgfId-21127]## |

[#50561071_pgfId-21129]## +-- _jakarta.el.ValueExpression_

[#50561071_pgfId-21131]## |

[#50561071_pgfId-21133]## +--
_jakarta.servlet.jsp.jstl.core.IndexedValueExpression_

======= [#50561071_pgfId-21135]##All Implemented Interfaces:

[#50561071_pgfId-21137]## _java.io.Serializable_

[#50561071_pgfId-21140]##Â 

======= [#50561071_pgfId-19026]##Member Summary

== [#50561071_pgfId-19032]##Fields

[#50561071_pgfId-19038]##protected java.lang.Integer

[#50561071_pgfId-19046]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.i[i]link:jstl.htm#50561071_MemberHead[See
i]_

[#50561071_pgfId-19052]##protected jakarta.el.ValueExpression

[#50561071_pgfId-19060]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.orig[orig]link:jstl.htm#50561071_MemberHead[See
orig]_

== [#50561071_pgfId-19066]##Constructors

[#50561071_pgfId-19072]##Â 

[#50561071_pgfId-19080]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.IndexedValueExpression(jakarta.el.ValueExpression,%20int)[IndexedValueExpression(jakarta.el.ValueExpression
orig, int i)]link:jstl.htm#50561071_MemberHead[See
IndexedValueExpression(ValueExpression, int)]_

== [#50561071_pgfId-19086]##Methods

[#50561071_pgfId-19092]## boolean

[#50561071_pgfId-19100]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.equals(java.lang.Object)[equals(java.lang.Object
obj)]link:jstl.htm#50561071_MemberHead[See equals(Object)]_

[#50561071_pgfId-19106]## java.lang.Class

[#50561071_pgfId-19114]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getExpectedType()[getExpectedType()]link:jstl.htm#50561071_MemberHead[See
getExpectedType()]_

[#50561071_pgfId-19120]## java.lang.String

[#50561071_pgfId-19128]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getExpressionString()[getExpressionString()]link:jstl.htm#50561071_MemberHead[See
getExpressionString()]_

[#50561071_pgfId-19134]## java.lang.Class

[#50561071_pgfId-19142]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getType(jakarta.el.ELContext)[getType(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getType(ELContext)]_

[#50561071_pgfId-19148]## java.lang.Object

[#50561071_pgfId-19156]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getValue(jakarta.el.ELContext)[getValue(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getValue(ELContext)]_

[#50561071_pgfId-19162]## int

[#50561071_pgfId-19170]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.hashCode()[hashCode()]link:jstl.htm#50561071_MemberHead[See
hashCode()]_

[#50561071_pgfId-19176]## boolean

[#50561071_pgfId-19184]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.isLiteralText()[isLiteralText()]link:jstl.htm#50561071_MemberHead[See
isLiteralText()]_

[#50561071_pgfId-19190]## boolean

[#50561071_pgfId-19198]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.isReadOnly(jakarta.el.ELContext)[isReadOnly(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See isReadOnly(ELContext)]_

[#50561071_pgfId-19204]## void

[#50561071_pgfId-19212]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.setValue(jakarta.el.ELContext,%20java.lang.Object)[setValue(jakarta.el.ELContext
context, java.lang.Object value)]link:jstl.htm#50561071_MemberHead[See
setValue(ELContext, Object)]_

[#50561071_pgfId-21143]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-19217]##Inherited Member Summary

a|
======= [#50561071_pgfId-19221]##Methods inherited from class _Object_

|[#50561071_pgfId-19225]## _clone()_ , _finalize()_ , _getClass()_ ,
_notify()_ , _notifyAll()_ , _toString()_ , _wait()_ , _wait(long)_ ,
_wait(long, int)_
|===

======= [#50561071_pgfId-21145]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-21153]##[#50561071_marker-21147]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.i]##i

[#50561071_pgfId-21155]##protected final _java.lang.Integer_ _i_

======= [#50561071_pgfId-21163]##[#50561071_marker-21157]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.orig]##orig

[#50561071_pgfId-21165]##protected final _jakarta.el.ValueExpression_
_orig_

======= [#50561071_pgfId-21167]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-21175]##[#50561071_marker-21169]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.IndexedValueExpression(jakarta.el.ValueExpression, int)]##IndexedValueExpression(ValueExpression, int)

[#50561071_pgfId-21177]##public _IndexedValueExpression_ (
_jakarta.el.ValueExpression_ orig, int i)

======= [#50561071_pgfId-21179]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21187]##[#50561071_marker-21181]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.equals(java.lang.Object)]##equals(Object)

[#50561071_pgfId-21189]##public boolean _equals_ ( _java.lang.Object_
obj)

======= [#50561071_pgfId-21191]##Overrides:

[#50561071_pgfId-21193]## _equals_ in class _Object_

======= [#50561071_pgfId-21201]##[#50561071_marker-21195]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getExpectedType()]##getExpectedType()

[#50561071_pgfId-21203]##public _java.lang.Class_ _getExpectedType_ ()

======= [#50561071_pgfId-21211]##[#50561071_marker-21205]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getExpressionString()]##getExpressionString()

[#50561071_pgfId-21213]##public _java.lang.String_ _getExpressionString_
()

======= [#50561071_pgfId-21221]##[#50561071_marker-21215]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getType(jakarta.el.ELContext)]##getType(ELContext)

[#50561071_pgfId-21223]##public _java.lang.Class_ _getType_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21231]##[#50561071_marker-21225]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.getValue(jakarta.el.ELContext)]##getValue(ELContext)

[#50561071_pgfId-21233]##public _java.lang.Object_ _getValue_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21241]##[#50561071_marker-21235]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.hashCode()]##hashCode()

[#50561071_pgfId-21243]##public int _hashCode_ ()

======= [#50561071_pgfId-21245]##Overrides:

[#50561071_pgfId-21247]## _hashCode_ in class _Object_

======= [#50561071_pgfId-21255]##[#50561071_marker-21249]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.isLiteralText()]##isLiteralText()

[#50561071_pgfId-21257]##public boolean _isLiteralText_ ()

======= [#50561071_pgfId-21265]##[#50561071_marker-21259]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.isReadOnly(jakarta.el.ELContext)]##isReadOnly(ELContext)

[#50561071_pgfId-21267]##public boolean _isReadOnly_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21275]##[#50561071_marker-21269]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IndexedValueExpression.setValue(jakarta.el.ELContext, java.lang.Object)]##setValue(ELContext, Object)

[#50561071_pgfId-21277]##public void _setValue_ ( _jakarta.el.ELContext_
context, _java.lang.Object_ value)

==== [#50561071_pgfId-21279]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21287]##[#50561071_marker-21281]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression]##IteratedExpression

====== [#50561071_pgfId-21289]##Declaration

[#50561071_pgfId-21291]##public final class _IteratedExpression_

[#50561071_pgfId-21293]## Â 

[#50561071_pgfId-21295]## _java.lang.Object_

[#50561071_pgfId-21297]## |

[#50561071_pgfId-21299]## +--
_jakarta.servlet.jsp.jstl.core.IteratedExpression_

[#50561071_pgfId-21302]##Â 

======= [#50561071_pgfId-19232]##Member Summary

== [#50561071_pgfId-19238]##Fields

[#50561071_pgfId-19244]##protected jakarta.el.ValueExpression

[#50561071_pgfId-19252]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.orig[orig]link:jstl.htm#50561071_MemberHead[See
orig]_

== [#50561071_pgfId-19258]##Constructors

[#50561071_pgfId-19264]##Â 

[#50561071_pgfId-19272]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.IteratedExpression(jakarta.el.ValueExpression)[IteratedExpression(jakarta.el.ValueExpression
orig)]link:jstl.htm#50561071_MemberHead[See
IteratedExpression(ValueExpression)]_

== [#50561071_pgfId-19278]##Methods

[#50561071_pgfId-19284]## java.lang.Object

[#50561071_pgfId-19292]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.getItem(jakarta.el.ELContext,%20int)[getItem(jakarta.el.ELContext
context, int i)]link:jstl.htm#50561071_MemberHead[See getItem(ELContext,
int)]_

[#50561071_pgfId-19298]## jakarta.el.ValueExpression

[#50561071_pgfId-19306]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.getValueExpression()[getValueExpression()]link:jstl.htm#50561071_MemberHead[See
getValueExpression()]_

[#50561071_pgfId-21305]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-19311]##Inherited Member Summary

a|
======= [#50561071_pgfId-19315]##Methods inherited from class _Object_

|[#50561071_pgfId-19319]## _clone()_ , _equals(Object)_ , _finalize()_ ,
_getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ , _toString()_
, _wait()_ , _wait(long)_ , _wait(long, int)_
|===

======= [#50561071_pgfId-21307]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-21315]##[#50561071_marker-21309]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.orig]##orig

[#50561071_pgfId-21317]##protected final _jakarta.el.ValueExpression_
_orig_

======= [#50561071_pgfId-21319]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-21327]##[#50561071_marker-21321]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.IteratedExpression(jakarta.el.ValueExpression)]##IteratedExpression(ValueExpression)

[#50561071_pgfId-21329]##public _IteratedExpression_ (
_jakarta.el.ValueExpression_ orig)

======= [#50561071_pgfId-21331]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21339]##[#50561071_marker-21333]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.getItem(jakarta.el.ELContext, int)]##getItem(ELContext, int)

[#50561071_pgfId-21341]##public _java.lang.Object_ _getItem_ (
_jakarta.el.ELContext_ context, int i)

[#50561071_pgfId-21343]##Evaluates the stored ValueExpression and return
the indexed item.

======= [#50561071_pgfId-21345]##Parameters:

[#50561071_pgfId-21347]## _context_ - The ELContext used to evaluate the
ValueExpression

[#50561071_pgfId-21349]## _i_ - The index of the item to be retrieved

======= [#50561071_pgfId-21357]##[#50561071_marker-21351]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression.getValueExpression()]##getValueExpression()

[#50561071_pgfId-21359]##public _jakarta.el.ValueExpression_
_getValueExpression_ ()

==== [#50561071_pgfId-21361]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21369]##[#50561071_marker-21363]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression]##IteratedValueExpression

====== [#50561071_pgfId-21371]##Declaration

[#50561071_pgfId-21373]##public final class _IteratedValueExpression_
extends _jakarta.el.ValueExpression_

[#50561071_pgfId-21375]## Â 

[#50561071_pgfId-21377]## _java.lang.Object_

[#50561071_pgfId-21379]## |

[#50561071_pgfId-21381]## +-- _jakarta.el.Expression_

[#50561071_pgfId-21383]## |

[#50561071_pgfId-21385]## +-- _jakarta.el.ValueExpression_

[#50561071_pgfId-21387]## |

[#50561071_pgfId-21389]## +--
_jakarta.servlet.jsp.jstl.core.IteratedValueExpression_

======= [#50561071_pgfId-21391]##All Implemented Interfaces:

[#50561071_pgfId-21393]## _java.io.Serializable_

[#50561071_pgfId-21396]##Â 

======= [#50561071_pgfId-19326]##Member Summary

== [#50561071_pgfId-19332]##Fields

[#50561071_pgfId-19338]##protected int

[#50561071_pgfId-19346]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.i[i]link:jstl.htm#50561071_MemberHead[See
i]_

[#50561071_pgfId-19352]##protected IteratedExpression

[#50561071_pgfId-19360]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.iteratedExpression[iteratedExpression]link:jstl.htm#50561071_MemberHead[See
iteratedExpression]_

== [#50561071_pgfId-19366]##Constructors

[#50561071_pgfId-19372]##Â 

[#50561071_pgfId-19380]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.IteratedValueExpression(jakarta.servlet.jsp.jstl.core.IteratedExpression,%20int)[IteratedValueExpression(IteratedExpression
iteratedExpr, int i)]link:jstl.htm#50561071_MemberHead[See
IteratedValueExpression(IteratedExpression, int)]_

== [#50561071_pgfId-19386]##Methods

[#50561071_pgfId-19392]## boolean

[#50561071_pgfId-19400]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.equals(java.lang.Object)[equals(java.lang.Object
obj)]link:jstl.htm#50561071_MemberHead[See equals(Object)]_

[#50561071_pgfId-19406]## java.lang.Class

[#50561071_pgfId-19414]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getExpectedType()[getExpectedType()]link:jstl.htm#50561071_MemberHead[See
getExpectedType()]_

[#50561071_pgfId-19420]## java.lang.String

[#50561071_pgfId-19428]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getExpressionString()[getExpressionString()]link:jstl.htm#50561071_MemberHead[See
getExpressionString()]_

[#50561071_pgfId-19434]## java.lang.Class

[#50561071_pgfId-19442]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getType(jakarta.el.ELContext)[getType(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getType(ELContext)]_

[#50561071_pgfId-19448]## java.lang.Object

[#50561071_pgfId-19456]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getValue(jakarta.el.ELContext)[getValue(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getValue(ELContext)]_

[#50561071_pgfId-19462]## int

[#50561071_pgfId-19470]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.hashCode()[hashCode()]link:jstl.htm#50561071_MemberHead[See
hashCode()]_

[#50561071_pgfId-19476]## boolean

[#50561071_pgfId-19484]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.isLiteralText()[isLiteralText()]link:jstl.htm#50561071_MemberHead[See
isLiteralText()]_

[#50561071_pgfId-19490]## boolean

[#50561071_pgfId-19498]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.isReadOnly(jakarta.el.ELContext)[isReadOnly(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See isReadOnly(ELContext)]_

[#50561071_pgfId-19504]## void

[#50561071_pgfId-19512]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.setValue(jakarta.el.ELContext,%20java.lang.Object)[setValue(jakarta.el.ELContext
context, java.lang.Object value)]link:jstl.htm#50561071_MemberHead[See
setValue(ELContext, Object)]_

[#50561071_pgfId-21399]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-19517]##Inherited Member Summary

a|
======= [#50561071_pgfId-19521]##Methods inherited from class _Object_

|[#50561071_pgfId-19525]## _clone()_ , _finalize()_ , _getClass()_ ,
_notify()_ , _notifyAll()_ , _toString()_ , _wait()_ , _wait(long)_ ,
_wait(long, int)_
|===

======= [#50561071_pgfId-21401]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-21409]##[#50561071_marker-21403]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.i]##i

[#50561071_pgfId-21411]##protected final int _i_

======= [#50561071_pgfId-21419]##[#50561071_marker-21413]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.iteratedExpression]##iteratedExpression

[#50561071_pgfId-21427]##protected final
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression[jakarta.servlet.jsp.jstl.core.IteratedExpression]link:jstl.htm#50561071_ClassHead[See
IteratedExpression] _iteratedExpression__

======= [#50561071_pgfId-21429]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-21437]##[#50561071_marker-21431]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.IteratedValueExpression(jakarta.servlet.jsp.jstl.core.IteratedExpression, int)]##IteratedValueExpression(IteratedExpression, int)

[#50561071_pgfId-21445]##public _IteratedValueExpression_ (
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.IteratedExpression[jakarta.servlet.jsp.jstl.core.IteratedExpression]link:jstl.htm#50561071_ClassHead[See
IteratedExpression] iteratedExpr, int i)_

======= [#50561071_pgfId-21447]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21455]##[#50561071_marker-21449]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.equals(java.lang.Object)]##equals(Object)

[#50561071_pgfId-21457]##public boolean _equals_ ( _java.lang.Object_
obj)

======= [#50561071_pgfId-21459]##Overrides:

[#50561071_pgfId-21461]## _equals_ in class _Object_

======= [#50561071_pgfId-21469]##[#50561071_marker-21463]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getExpectedType()]##getExpectedType()

[#50561071_pgfId-21471]##public _java.lang.Class_ _getExpectedType_ ()

======= [#50561071_pgfId-21479]##[#50561071_marker-21473]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getExpressionString()]##getExpressionString()

[#50561071_pgfId-21481]##public _java.lang.String_ _getExpressionString_
()

======= [#50561071_pgfId-21489]##[#50561071_marker-21483]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getType(jakarta.el.ELContext)]##getType(ELContext)

[#50561071_pgfId-21491]##public _java.lang.Class_ _getType_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21499]##[#50561071_marker-21493]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.getValue(jakarta.el.ELContext)]##getValue(ELContext)

[#50561071_pgfId-21501]##public _java.lang.Object_ _getValue_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21509]##[#50561071_marker-21503]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.hashCode()]##hashCode()

[#50561071_pgfId-21511]##public int _hashCode_ ()

======= [#50561071_pgfId-21513]##Overrides:

[#50561071_pgfId-21515]## _hashCode_ in class _Object_

======= [#50561071_pgfId-21523]##[#50561071_marker-21517]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.isLiteralText()]##isLiteralText()

[#50561071_pgfId-21525]##public boolean _isLiteralText_ ()

======= [#50561071_pgfId-21533]##[#50561071_marker-21527]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.isReadOnly(jakarta.el.ELContext)]##isReadOnly(ELContext)

[#50561071_pgfId-21535]##public boolean _isReadOnly_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-21543]##[#50561071_marker-21537]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.IteratedValueExpression.setValue(jakarta.el.ELContext, java.lang.Object)]##setValue(ELContext, Object)

[#50561071_pgfId-21545]##public void _setValue_ ( _jakarta.el.ELContext_
context, _java.lang.Object_ value)

==== [#50561071_pgfId-21547]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21555]##[#50561071_marker-21549]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTag]##LoopTag

====== [#50561071_pgfId-21557]##Declaration

[#50561071_pgfId-21559]##public interface _LoopTag extends_
_jakarta.servlet.jsp.tagext.Tag_

======= [#50561071_pgfId-21561]##All Superinterfaces:

[#50561071_pgfId-21563]## _jakarta.servlet.jsp.tagext.JspTag_ ,
_jakarta.servlet.jsp.tagext.Tag_

======= [#50561071_pgfId-21565]##All Known Implementing Classes:

[#50561071_pgfId-21573]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport[LoopTagSupport]link:jstl.htm#50561071_ClassHead[See
LoopTagSupport]_

====== [#50561071_pgfId-21575]##Description

[#50561071_pgfId-21577]##JSTL allows developers to write custom
iteration tags by implementing the LoopTag interface. This is not to be
confused with _jakarta.servlet.jsp.tagext.IterationTag_ as defined in JSP
1.2. LoopTag establishes a mechanism for iteration tags to be recognized
and for type-safe implicit collaboration with custom subtags.

[#50561071_pgfId-21579]##In most cases, it will not be necessary to
implement this interface manually, for a base support class (
_LoopTagSupport_ ) is provided to facilitate implementation.

[#50561071_pgfId-21582]##Â 

======= [#50561071_pgfId-19532]##Member Summary

== [#50561071_pgfId-19538]##Methods

[#50561071_pgfId-19544]## java.lang.Object

[#50561071_pgfId-19552]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTag.getCurrent()[getCurrent()]link:jstl.htm#50561071_MemberHead[See
getCurrent()]_

[#50561071_pgfId-19558]## LoopTagStatus

[#50561071_pgfId-19566]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTag.getLoopStatus()[getLoopStatus()]link:jstl.htm#50561071_MemberHead[See
getLoopStatus()]_

[#50561071_pgfId-21585]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-19571]##Inherited Member Summary

a|
======= [#50561071_pgfId-19575]##Fields inherited from interface _Tag_

|[#50561071_pgfId-19579]## _EVAL_BODY_INCLUDE_ , _EVAL_PAGE_ ,
_SKIP_BODY_ , _SKIP_PAGE_

a|
======= [#50561071_pgfId-19583]##Methods inherited from interface _Tag_

|[#50561071_pgfId-19587]## _doEndTag()_ , _doStartTag()_ , _getParent()_
, _release()_ , _setPageContext(PageContext)_ , _setParent(Tag)_
|===

======= [#50561071_pgfId-21587]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21595]##[#50561071_marker-21589]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTag.getCurrent()]##getCurrent()

[#50561071_pgfId-21597]##public _java.lang.Object_ _getCurrent_ ()

[#50561071_pgfId-21599]##Retrieves the current item in the iteration.
Behaves idempotently; calling getCurrent() repeatedly should return the
same Object until the iteration is advanced. (Specifically, calling
getCurrent() does _not_ advance the iteration.)

======= [#50561071_pgfId-21601]##Returns:

[#50561071_pgfId-21603]##the current item as an object

======= [#50561071_pgfId-21611]##[#50561071_marker-21605]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTag.getLoopStatus()]##getLoopStatus()

[#50561071_pgfId-21619]##public
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus[jakarta.servlet.jsp.jstl.core.LoopTagStatus]link:jstl.htm#50561071_ClassHead[See
LoopTagStatus] _getLoopStatus_ ()_

[#50561071_pgfId-21621]##Retrieves a âstatusâ object to provide
information about the current round of the iteration.

======= [#50561071_pgfId-21623]##Returns:

[#50561071_pgfId-21625]##The LoopTagStatus for the current _LoopTag_ .

==== [#50561071_pgfId-21627]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21635]##[#50561071_marker-21629]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus]##LoopTagStatus

====== [#50561071_pgfId-21637]##Declaration

[#50561071_pgfId-21639]##public interface _LoopTagStatus_

====== [#50561071_pgfId-21641]##Description

[#50561071_pgfId-21643]##Exposes the current status of an iteration.
JSTL provides a mechanism for LoopTags to return information about the
current index of the iteration and convenience methods to determine
whether or not the current round is either the first or last in the
iteration. It also lets authors use the status object to obtain
information about the iteration range, step, and current object.

[#50561071_pgfId-21645]##Environments that require more status can
extend this interface.

[#50561071_pgfId-21648]##Â 

======= [#50561071_pgfId-19594]##Member Summary

== [#50561071_pgfId-19600]##Methods

[#50561071_pgfId-19606]## java.lang.Integer

[#50561071_pgfId-19614]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getBegin()[getBegin()]link:jstl.htm#50561071_MemberHead[See
getBegin()]_

[#50561071_pgfId-19620]## int

[#50561071_pgfId-19628]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getCount()[getCount()]link:jstl.htm#50561071_MemberHead[See
getCount()]_

[#50561071_pgfId-19634]## java.lang.Object

[#50561071_pgfId-19642]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getCurrent()[getCurrent()]link:jstl.htm#50561071_MemberHead[See
getCurrent()]_

[#50561071_pgfId-19648]## java.lang.Integer

[#50561071_pgfId-19656]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getEnd()[getEnd()]link:jstl.htm#50561071_MemberHead[See
getEnd()]_

[#50561071_pgfId-19662]## int

[#50561071_pgfId-19670]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getIndex()[getIndex()]link:jstl.htm#50561071_MemberHead[See
getIndex()]_

[#50561071_pgfId-19676]## java.lang.Integer

[#50561071_pgfId-19684]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getStep()[getStep()]link:jstl.htm#50561071_MemberHead[See
getStep()]_

[#50561071_pgfId-19690]## boolean

[#50561071_pgfId-19698]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.isFirst()[isFirst()]link:jstl.htm#50561071_MemberHead[See
isFirst()]_

[#50561071_pgfId-19704]## boolean

[#50561071_pgfId-19712]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.isLast()[isLast()]link:jstl.htm#50561071_MemberHead[See
isLast()]_

======= [#50561071_pgfId-21650]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21658]##[#50561071_marker-21652]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getBegin()]##getBegin()

[#50561071_pgfId-21660]##public _java.lang.Integer_ _getBegin_ ()

[#50561071_pgfId-21662]##Returns the value of the âbeginâ attribute for
the associated tag, or null if no âbeginâ attribute was specified.

======= [#50561071_pgfId-21664]##Returns:

[#50561071_pgfId-21666]##the âbeginâ value for the associated tag, or
null if no âbeginâ attribute was specified

======= [#50561071_pgfId-21674]##[#50561071_marker-21668]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getCount()]##getCount()

[#50561071_pgfId-21676]##public int _getCount_ ()

[#50561071_pgfId-21678]##Retrieves the âcountâ of the current round of
the iteration. The count is a relative, 1-based sequence number
identifying the current âroundâ of iteration (in context with all rounds
the current iteration will perform).

[#50561071_pgfId-21680]##As an example, an iteration with begin = 5, end
= 15, and step = 5 produces the counts 1, 2, and 3 in that order.

======= [#50561071_pgfId-21682]##Returns:

[#50561071_pgfId-21684]##the 1-based count of the current round of the
iteration

======= [#50561071_pgfId-21692]##[#50561071_marker-21686]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getCurrent()]##getCurrent()

[#50561071_pgfId-21694]##public _java.lang.Object_ _getCurrent_ ()

[#50561071_pgfId-21696]##Retrieves the current item in the iteration.
Behaves idempotently; calling getCurrent() repeatedly should return the
same Object until the iteration is advanced. (Specifically, calling
getCurrent() does _not_ advance the iteration.)

======= [#50561071_pgfId-21698]##Returns:

[#50561071_pgfId-21700]##the current item as an object

======= [#50561071_pgfId-21708]##[#50561071_marker-21702]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getEnd()]##getEnd()

[#50561071_pgfId-21710]##public _java.lang.Integer_ _getEnd_ ()

[#50561071_pgfId-21712]##Returns the value of the âendâ attribute for
the associated tag, or null if no âendâ attribute was specified.

======= [#50561071_pgfId-21714]##Returns:

[#50561071_pgfId-21716]##the âendâ value for the associated tag, or null
if no âendâ attribute was specified

======= [#50561071_pgfId-21724]##[#50561071_marker-21718]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getIndex()]##getIndex()

[#50561071_pgfId-21726]##public int _getIndex_ ()

[#50561071_pgfId-21728]##Retrieves the index of the current round of the
iteration. If iteration is being performed over a subset of an
underlying array, java.lang.Collection, or other type, the index
returned is absolute with respect to the underlying collection. Indices
are 0-based.

======= [#50561071_pgfId-21730]##Returns:

[#50561071_pgfId-21732]##the 0-based index of the current round of the
iteration

======= [#50561071_pgfId-21740]##[#50561071_marker-21734]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.getStep()]##getStep()

[#50561071_pgfId-21742]##public _java.lang.Integer_ _getStep_ ()

[#50561071_pgfId-21744]##Returns the value of the âstepâ attribute for
the associated tag, or null if no âstepâ attribute was specified.

======= [#50561071_pgfId-21746]##Returns:

[#50561071_pgfId-21748]##the âstepâ value for the associated tag, or
null if no âstepâ attribute was specified

======= [#50561071_pgfId-21756]##[#50561071_marker-21750]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.isFirst()]##isFirst()

[#50561071_pgfId-21758]##public boolean _isFirst_ ()

[#50561071_pgfId-21760]##Returns information about whether the current
round of the iteration is the first one. This current round may be the
âfirstâ even when getIndex() != 0, for âindexâ refers to the absolute
index of the current âitemâ in the context of its underlying collection.
It is always that case that a true result from isFirst() implies
getCount() == 1.

======= [#50561071_pgfId-21762]##Returns:

[#50561071_pgfId-21764]## _true_ if the current round is the first in
the iteration, _false_ otherwise.

======= [#50561071_pgfId-21772]##[#50561071_marker-21766]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus.isLast()]##isLast()

[#50561071_pgfId-21774]##public boolean _isLast_ ()

[#50561071_pgfId-21776]##Returns information about whether the current
round of the iteration is the last one. As with isFirst(), subsetting is
taken into account. isLast() doesnât necessarily refer to the status of
the underlying Iterator; it refers to whether or not the current round
will be the final round of iteration for the tag associated with this
LoopTagStatus.

======= [#50561071_pgfId-21778]##Returns:

[#50561071_pgfId-21780]## _true_ if the current round is the last in the
iteration, _false_ otherwise.

==== [#50561071_pgfId-21782]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-21790]##[#50561071_marker-21784]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport]##LoopTagSupport

====== [#50561071_pgfId-21792]##Declaration

[#50561071_pgfId-21800]##public abstract class _LoopTagSupport_ extends
_jakarta.servlet.jsp.tagext.TagSupport_ implements
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTag[LoopTag]link:jstl.htm#50561071_ClassHead[See
LoopTag], _jakarta.servlet.jsp.tagext.IterationTag_ ,
_jakarta.servlet.jsp.tagext.TryCatchFinally__

[#50561071_pgfId-21802]## Â 

[#50561071_pgfId-21804]## _java.lang.Object_

[#50561071_pgfId-21806]## |

[#50561071_pgfId-21808]## +-- _jakarta.servlet.jsp.tagext.TagSupport_

[#50561071_pgfId-21810]## |

[#50561071_pgfId-21812]## +--
_jakarta.servlet.jsp.jstl.core.LoopTagSupport_

======= [#50561071_pgfId-21814]##All Implemented Interfaces:

[#50561071_pgfId-21822]## _jakarta.servlet.jsp.tagext.IterationTag_ ,
_jakarta.servlet.jsp.tagext.JspTag_ ,
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTag[LoopTag]link:jstl.htm#50561071_ClassHead[See
LoopTag], _java.io.Serializable_ , _jakarta.servlet.jsp.tagext.Tag_ ,
_jakarta.servlet.jsp.tagext.TryCatchFinally__

====== [#50561071_pgfId-21824]##Description

[#50561071_pgfId-21826]##Base support class to facilitate implementation
of iteration tags.

[#50561071_pgfId-21828]##Since most iteration tags will behave
identically with respect to actual iterative behavior, JSTL provides
this base support class to facilitate implementation. Many iteration
tags will extend this and merely implement the _hasNext()_ and _next()_
methods to provide contents for the handler to iterate over.

[#50561071_pgfId-21830]##In particular, this base class provides support
for:

[#50561071_pgfId-21832]##Iteration control, based on protected
_prepare()_ , _next()_ , and _hasNext()_ methods

[#50561071_pgfId-21834]##Subsetting ( _begin_ , _end_ , _step>_
functionality, including validation of subset parameters for
sensibility)

[#50561071_pgfId-21836]##item retrieval ( _getCurrent()_ )

[#50561071_pgfId-21838]##status retrieval ( _LoopTagStatus_ )

[#50561071_pgfId-21840]##exposing attributes (set by _var_ and
_varStatus_ attributes)

[#50561071_pgfId-21842]##In providing support for these tasks,
_LoopTagSupport_ contains certain control variables that act to modify
the iteration. Accessors are provided for these control variables when
the variables represent information needed or wanted at translation time
(e.g., _var_ , _varStatus_ ). For other variables, accessors cannot be
provided here since subclasses may differ on their implementations of
how those accessors are received. For instance, one subclass might
accept a _String_ and convert it into an object of a specific type by
using an expression evaluator; others might accept objects directly.
Still others might not want to expose such information to outside
control.

[#50561071_pgfId-21845]##Â 

======= [#50561071_pgfId-19719]##Member Summary

== [#50561071_pgfId-19725]##Fields

[#50561071_pgfId-19731]##protected int

[#50561071_pgfId-19739]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.begin[begin]link:jstl.htm#50561071_MemberHead[See
begin]_

[#50561071_pgfId-19745]##protected boolean

[#50561071_pgfId-19753]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.beginSpecified[beginSpecified]link:jstl.htm#50561071_MemberHead[See
beginSpecified]_

[#50561071_pgfId-19759]##protected jakarta.el.ValueExpression

[#50561071_pgfId-19767]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.deferredExpression[deferredExpression]link:jstl.htm#50561071_MemberHead[See
deferredExpression]_

[#50561071_pgfId-19773]##protected int

[#50561071_pgfId-19781]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.end[end]link:jstl.htm#50561071_MemberHead[See
end]_

[#50561071_pgfId-19787]##protected boolean

[#50561071_pgfId-19795]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.endSpecified[endSpecified]link:jstl.htm#50561071_MemberHead[See
endSpecified]_

[#50561071_pgfId-19801]##protected java.lang.String

[#50561071_pgfId-19809]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.itemId[itemId]link:jstl.htm#50561071_MemberHead[See
itemId]_

[#50561071_pgfId-19815]##protected java.lang.String

[#50561071_pgfId-19823]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.statusId[statusId]link:jstl.htm#50561071_MemberHead[See
statusId]_

[#50561071_pgfId-19829]##protected int

[#50561071_pgfId-19837]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.step[step]link:jstl.htm#50561071_MemberHead[See
step]_

[#50561071_pgfId-19843]##protected boolean

[#50561071_pgfId-19851]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.stepSpecified[stepSpecified]link:jstl.htm#50561071_MemberHead[See
stepSpecified]_

== [#50561071_pgfId-19857]##Constructors

[#50561071_pgfId-19863]##Â 

[#50561071_pgfId-19871]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.LoopTagSupport()[LoopTagSupport()]link:jstl.htm#50561071_MemberHead[See
LoopTagSupport()]_

== [#50561071_pgfId-19877]##Methods

[#50561071_pgfId-19883]## int

[#50561071_pgfId-19891]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doAfterBody()[doAfterBody()]link:jstl.htm#50561071_MemberHead[See
doAfterBody()]_

[#50561071_pgfId-19897]## void

[#50561071_pgfId-19905]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doCatch(java.lang.Throwable)[doCatch(java.lang.Throwable
t)]link:jstl.htm#50561071_MemberHead[See doCatch(Throwable)]_

[#50561071_pgfId-19911]## void

[#50561071_pgfId-19919]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doFinally()[doFinally()]link:jstl.htm#50561071_MemberHead[See
doFinally()]_

[#50561071_pgfId-19925]## int

[#50561071_pgfId-19933]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doStartTag()[doStartTag()]link:jstl.htm#50561071_MemberHead[See
doStartTag()]_

[#50561071_pgfId-19939]## java.lang.Object

[#50561071_pgfId-19947]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.getCurrent()[getCurrent()]link:jstl.htm#50561071_MemberHead[See
getCurrent()]_

[#50561071_pgfId-19953]## LoopTagStatus

[#50561071_pgfId-19961]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.getLoopStatus()[getLoopStatus()]link:jstl.htm#50561071_MemberHead[See
getLoopStatus()]_

[#50561071_pgfId-19967]##protected abstract boolean

[#50561071_pgfId-19975]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.hasNext()[hasNext()]link:jstl.htm#50561071_MemberHead[See
hasNext()]_

[#50561071_pgfId-19981]##protected abstract java.lang.Object

[#50561071_pgfId-19989]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.next()[next()]link:jstl.htm#50561071_MemberHead[See
next()]_

[#50561071_pgfId-19995]##protected abstract void

[#50561071_pgfId-20003]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.prepare()[prepare()]link:jstl.htm#50561071_MemberHead[See
prepare()]_

[#50561071_pgfId-20009]## void

[#50561071_pgfId-20017]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.release()[release()]link:jstl.htm#50561071_MemberHead[See
release()]_

[#50561071_pgfId-20023]## void

[#50561071_pgfId-20031]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.setVar(java.lang.String)[setVar(java.lang.String
id)]link:jstl.htm#50561071_MemberHead[See setVar(String)]_

[#50561071_pgfId-20037]## void

[#50561071_pgfId-20045]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.setVarStatus(java.lang.String)[setVarStatus(java.lang.String
statusId)]link:jstl.htm#50561071_MemberHead[See setVarStatus(String)]_

[#50561071_pgfId-20051]##protected void

[#50561071_pgfId-20059]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateBegin()[validateBegin()]link:jstl.htm#50561071_MemberHead[See
validateBegin()]_

[#50561071_pgfId-20065]##protected void

[#50561071_pgfId-20073]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateEnd()[validateEnd()]link:jstl.htm#50561071_MemberHead[See
validateEnd()]_

[#50561071_pgfId-20079]##protected void

[#50561071_pgfId-20087]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateStep()[validateStep()]link:jstl.htm#50561071_MemberHead[See
validateStep()]_

[#50561071_pgfId-21848]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-20092]##Inherited Member Summary

a|
======= [#50561071_pgfId-20096]##Fields inherited from interface _IterationTag_

|[#50561071_pgfId-20100]## _EVAL_BODY_AGAIN_

a|
======= [#50561071_pgfId-20104]##Fields inherited from interface _Tag_

|[#50561071_pgfId-20108]## _EVAL_BODY_INCLUDE_ , _EVAL_PAGE_ ,
_SKIP_BODY_ , _SKIP_PAGE_

a|
======= [#50561071_pgfId-20112]##Fields inherited from class _TagSupport_

|[#50561071_pgfId-20116]## _id_ , _pageContext_

a|
======= [#50561071_pgfId-20120]##Methods inherited from class _Object_

|[#50561071_pgfId-20124]## _clone()_ , _equals(Object)_ , _finalize()_ ,
_getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ , _toString()_
, _wait()_ , _wait(long)_ , _wait(long, int)_

a|
======= [#50561071_pgfId-20128]##Methods inherited from interface _Tag_

|[#50561071_pgfId-20132]## _doEndTag()_ , _getParent()_ ,
_setPageContext(PageContext)_ , _setParent(Tag)_

a|
======= [#50561071_pgfId-20136]##Methods inherited from class _TagSupport_

|[#50561071_pgfId-20140]## _doEndTag()_ , _findAncestorWithClass(Tag,
Class)_ , _getId()_ , _getParent()_ , _getValue(String)_ , _getValues()_
, _removeValue(String)_ , _setId(String)_ ,
_setPageContext(PageContext)_ , _setParent(Tag)_ , _setValue(String,
Object)_
|===

======= [#50561071_pgfId-21850]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-21858]##[#50561071_marker-21852]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.begin]##begin

[#50561071_pgfId-21860]##protected int _begin_

[#50561071_pgfId-21862]##Starting index (âbeginâ attribute)

======= [#50561071_pgfId-21870]##[#50561071_marker-21864]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.beginSpecified]##beginSpecified

[#50561071_pgfId-21872]##protected boolean _beginSpecified_

[#50561071_pgfId-21874]##Boolean flag indicating whether âbeginâ was
specified.

======= [#50561071_pgfId-21882]##[#50561071_marker-21876]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.deferredExpression]##deferredExpression

[#50561071_pgfId-21884]##protected _jakarta.el.ValueExpression_
_deferredExpression_

[#50561071_pgfId-21886]##The deferred expression if any

======= [#50561071_pgfId-21894]##[#50561071_marker-21888]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.end]##end

[#50561071_pgfId-21896]##protected int _end_

[#50561071_pgfId-21898]##Ending index of the iteration (âendâ
attribute). A value of -1 internally indicates âno end specifiedâ,
although accessors for the core JSTL tags do not allow this value to be
supplied directly by the user.

======= [#50561071_pgfId-21906]##[#50561071_marker-21900]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.endSpecified]##endSpecified

[#50561071_pgfId-21908]##protected boolean _endSpecified_

[#50561071_pgfId-21910]##Boolean flag indicating whether âendâ was
specified.

======= [#50561071_pgfId-21918]##[#50561071_marker-21912]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.itemId]##itemId

[#50561071_pgfId-21920]##protected _java.lang.String_ _itemId_

[#50561071_pgfId-21922]##Attribute-exposing control

======= [#50561071_pgfId-21930]##[#50561071_marker-21924]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.statusId]##statusId

[#50561071_pgfId-21932]##protected _java.lang.String_ _statusId_

[#50561071_pgfId-21934]##Attribute-exposing control

======= [#50561071_pgfId-21942]##[#50561071_marker-21936]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.step]##step

[#50561071_pgfId-21944]##protected int _step_

[#50561071_pgfId-21946]##Iteration step (âstepâ attribute)

======= [#50561071_pgfId-21954]##[#50561071_marker-21948]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.stepSpecified]##stepSpecified

[#50561071_pgfId-21956]##protected boolean _stepSpecified_

[#50561071_pgfId-21958]##Boolean flag indicating whether âstepâ was
specified.

======= [#50561071_pgfId-21960]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-21968]##[#50561071_marker-21962]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.LoopTagSupport()]##LoopTagSupport()

[#50561071_pgfId-21970]##public _LoopTagSupport_ ()

[#50561071_pgfId-21972]##Constructs a new LoopTagSupport. As with
TagSupport, subclasses should not implement constructors with arguments,
and no-arguments constructors implemented by subclasses must call the
superclass constructor.

======= [#50561071_pgfId-21974]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-21982]##[#50561071_marker-21976]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doAfterBody()]##doAfterBody()

[#50561071_pgfId-21984]##public int _doAfterBody_ () +
throws JspException

[#50561071_pgfId-21986]##Continues the iteration when appropriate â-
that is, if we (a) have more items and (b) donât run over our âendâ
(given our âstepâ).

======= [#50561071_pgfId-21988]##Specified By:

[#50561071_pgfId-21990]## _doAfterBody_ in interface _IterationTag_

======= [#50561071_pgfId-21992]##Overrides:

[#50561071_pgfId-21994]## _doAfterBody_ in class _TagSupport_

======= [#50561071_pgfId-21996]##Throws:

[#50561071_pgfId-21998]## _jakarta.servlet.jsp.JspException_

======= [#50561071_pgfId-22006]##[#50561071_marker-22000]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doCatch(java.lang.Throwable)]##doCatch(Throwable)

[#50561071_pgfId-22008]##public void _doCatch_ ( _java.lang.Throwable_
t) +
throws Throwable

[#50561071_pgfId-22010]##Rethrows the given Throwable.

======= [#50561071_pgfId-22012]##Specified By:

[#50561071_pgfId-22014]## _doCatch_ in interface _TryCatchFinally_

======= [#50561071_pgfId-22016]##Throws:

[#50561071_pgfId-22018]## _java.lang.Throwable_

======= [#50561071_pgfId-22026]##[#50561071_marker-22020]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doFinally()]##doFinally()

[#50561071_pgfId-22028]##public void _doFinally_ ()

[#50561071_pgfId-22030]##Removes any attributes that this LoopTagSupport
set.

[#50561071_pgfId-22032]##These attributes are intended to support
scripting variables with NESTED scope, so we donât want to pollute
attribute space by leaving them lying around.

======= [#50561071_pgfId-22034]##Specified By:

[#50561071_pgfId-22036]## _doFinally_ in interface _TryCatchFinally_

======= [#50561071_pgfId-22044]##[#50561071_marker-22038]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.doStartTag()]##doStartTag()

[#50561071_pgfId-22046]##public int _doStartTag_ () +
throws JspException

[#50561071_pgfId-22048]##Begins iterating by processing the first item.

======= [#50561071_pgfId-22050]##Specified By:

[#50561071_pgfId-22052]## _doStartTag_ in interface _Tag_

======= [#50561071_pgfId-22054]##Overrides:

[#50561071_pgfId-22056]## _doStartTag_ in class _TagSupport_

======= [#50561071_pgfId-22058]##Throws:

[#50561071_pgfId-22060]## _jakarta.servlet.jsp.JspException_

======= [#50561071_pgfId-22068]##[#50561071_marker-22062]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.getCurrent()]##getCurrent()

[#50561071_pgfId-22070]##public _java.lang.Object_ _getCurrent_ ()

[#50561071_pgfId-22072]##Retrieves the current item in the iteration.
Behaves idempotently; calling getCurrent() repeatedly should return the
same Object until the iteration is advanced. (Specifically, calling
getCurrent() does _not_ advance the iteration.)

======= [#50561071_pgfId-22074]##Returns:

[#50561071_pgfId-22076]##the current item as an object

======= [#50561071_pgfId-22084]##[#50561071_marker-22078]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.getLoopStatus()]##getLoopStatus()

[#50561071_pgfId-22092]##public
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagStatus[jakarta.servlet.jsp.jstl.core.LoopTagStatus]link:jstl.htm#50561071_ClassHead[See
LoopTagStatus] _getLoopStatus_ ()_

[#50561071_pgfId-22094]##Retrieves a âstatusâ object to provide
information about the current round of the iteration.

======= [#50561071_pgfId-22096]##Returns:

[#50561071_pgfId-22098]##The LoopTagStatus for the current _LoopTag_ .

======= [#50561071_pgfId-22106]##[#50561071_marker-22100]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.hasNext()]##hasNext()

[#50561071_pgfId-22108]##protected abstract boolean _hasNext_ () +
throws JspTagException

[#50561071_pgfId-22110]##Returns information concerning the availability
of more items over which to iterate. This method must be provided by
concrete subclasses of LoopTagSupport to assist the iterative logic
provided by the supporting base class.

[#50561071_pgfId-22112]##See next for more information about the purpose
and expectations behind this tag.

======= [#50561071_pgfId-22114]##Returns:

[#50561071_pgfId-22116]## _true_ if there is at least one more item to
iterate over, _false_ otherwise

======= [#50561071_pgfId-22118]##Throws:

======= [#50561071_pgfId-22120]##See Also:

[#50561071_pgfId-22128]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.next()[next()]link:jstl.htm#50561071_MemberHead[See
next()]_

======= [#50561071_pgfId-22136]##[#50561071_marker-22130]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.next()]##next()

[#50561071_pgfId-22138]##protected abstract _java.lang.Object_ _next_
() +
throws JspTagException

[#50561071_pgfId-22140]##Returns the next object over which the tag
should iterate. This method must be provided by concrete subclasses of
LoopTagSupport to inform the base logic about what objects it should
iterate over.

[#50561071_pgfId-22142]##It is expected that this method will generally
be backed by an Iterator, but this will not always be the case. In
particular, if retrieving the next object raises the possibility of an
exception being thrown, this method allows that exception to propagate
back to the JSP container as a JspTagException; a standalone Iterator
would not be able to do this. (This explains why LoopTagSupport does not
simply call for an Iterator from its subtags.)

======= [#50561071_pgfId-22144]##Returns:

[#50561071_pgfId-22146]##the java.lang.Object to use in the next round
of iteration

======= [#50561071_pgfId-22148]##Throws:

[#50561071_pgfId-22150]## _java.util.NoSuchElementException_ - if next()
is called but no new elements are available

[#50561071_pgfId-22152]## _jakarta.servlet.jsp.JspTagException_ - for
other, unexpected exceptions

======= [#50561071_pgfId-22160]##[#50561071_marker-22154]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.prepare()]##prepare()

[#50561071_pgfId-22162]##protected abstract void _prepare_ () +
throws JspTagException

[#50561071_pgfId-22164]##Prepares for a single tag invocation.
Specifically, allows subclasses to prepare for calls to hasNext() and
next(). Subclasses can assume that prepare() will be called once for
each invocation of doStartTag() in the superclass.

======= [#50561071_pgfId-22166]##Throws:

======= [#50561071_pgfId-22174]##[#50561071_marker-22168]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.release()]##release()

[#50561071_pgfId-22176]##public void _release_ ()

[#50561071_pgfId-22178]##Releases any resources this LoopTagSupport may
have (or inherit).

======= [#50561071_pgfId-22180]##Specified By:

[#50561071_pgfId-22182]## _release_ in interface _Tag_

======= [#50561071_pgfId-22184]##Overrides:

[#50561071_pgfId-22186]## _release_ in class _TagSupport_

======= [#50561071_pgfId-22194]##[#50561071_marker-22188]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.setVar(java.lang.String)]##setVar(String)

[#50561071_pgfId-22196]##public void _setVar_ ( _java.lang.String_ id)

[#50561071_pgfId-22198]##Sets the âvarâ attribute.

======= [#50561071_pgfId-22200]##Parameters:

[#50561071_pgfId-22202]## _id_ - Name of the exported scoped variable
storing the current item of the iteration.

======= [#50561071_pgfId-22210]##[#50561071_marker-22204]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.setVarStatus(java.lang.String)]##setVarStatus(String)

[#50561071_pgfId-22212]##public void _setVarStatus_ ( _java.lang.String_
statusId)

[#50561071_pgfId-22214]##Sets the âvarStatusâ attribute.

======= [#50561071_pgfId-22216]##Parameters:

[#50561071_pgfId-22218]## _statusId_ - Name of the exported scoped
variable storing the status of the iteration.

======= [#50561071_pgfId-22226]##[#50561071_marker-22220]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateBegin()]##validateBegin()

[#50561071_pgfId-22228]##protected void _validateBegin_ () +
throws JspTagException

[#50561071_pgfId-22230]##Ensures the âbeginâ property is sensible,
throwing an exception expected to propagate up if it isnât

======= [#50561071_pgfId-22232]##Throws:

[#50561071_pgfId-22234]## _jakarta.servlet.jsp.JspTagException_

======= [#50561071_pgfId-22242]##[#50561071_marker-22236]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateEnd()]##validateEnd()

[#50561071_pgfId-22244]##protected void _validateEnd_ () +
throws JspTagException

[#50561071_pgfId-22246]##Ensures the âendâ property is sensible,
throwing an exception expected to propagate up if it isnât

======= [#50561071_pgfId-22248]##Throws:

[#50561071_pgfId-22250]## _jakarta.servlet.jsp.JspTagException_

======= [#50561071_pgfId-22258]##[#50561071_marker-22252]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.LoopTagSupport.validateStep()]##validateStep()

[#50561071_pgfId-22260]##protected void _validateStep_ () +
throws JspTagException

[#50561071_pgfId-22262]##Ensures the âstepâ property is sensible,
throwing an exception expected to propagate up if it isnât

======= [#50561071_pgfId-22264]##Throws:

[#50561071_pgfId-22266]## _jakarta.servlet.jsp.JspTagException_

==== [#50561071_pgfId-22268]##jakarta.servlet.jsp.jstl.core

== [#50561071_pgfId-22276]##[#50561071_marker-22270]##[#50561071_ClassHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression]##StringTokenValueExpression

====== [#50561071_pgfId-22278]##Declaration

[#50561071_pgfId-22280]##public final class _StringTokenValueExpression_
extends _jakarta.el.ValueExpression_

[#50561071_pgfId-22282]## Â 

[#50561071_pgfId-22284]## _java.lang.Object_

[#50561071_pgfId-22286]## |

[#50561071_pgfId-22288]## +-- _jakarta.el.Expression_

[#50561071_pgfId-22290]## |

[#50561071_pgfId-22292]## +-- _jakarta.el.ValueExpression_

[#50561071_pgfId-22294]## |

[#50561071_pgfId-22296]## +--
_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression_

======= [#50561071_pgfId-22298]##All Implemented Interfaces:

[#50561071_pgfId-22300]## _java.io.Serializable_

[#50561071_pgfId-22303]##Â 

======= [#50561071_pgfId-20147]##Member Summary

== [#50561071_pgfId-20153]##Fields

[#50561071_pgfId-20159]##protected java.lang.Integer

[#50561071_pgfId-20167]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.i[i]link:jstl.htm#50561071_MemberHead[See
i]_

[#50561071_pgfId-20173]##protected jakarta.el.ValueExpression

[#50561071_pgfId-20181]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.orig[orig]link:jstl.htm#50561071_MemberHead[See
orig]_

== [#50561071_pgfId-20187]##Constructors

[#50561071_pgfId-20193]##Â 

[#50561071_pgfId-20201]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.StringTokenValueExpression(jakarta.el.ValueExpression,%20int)[StringTokenValueExpression(jakarta.el.ValueExpression
orig, int i)]link:jstl.htm#50561071_MemberHead[See
StringTokenValueExpression(ValueExpression, int)]_

== [#50561071_pgfId-20207]##Methods

[#50561071_pgfId-20213]## boolean

[#50561071_pgfId-20221]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.equals(java.lang.Object)[equals(java.lang.Object
obj)]link:jstl.htm#50561071_MemberHead[See equals(Object)]_

[#50561071_pgfId-20227]## java.lang.Class

[#50561071_pgfId-20235]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getExpectedType()[getExpectedType()]link:jstl.htm#50561071_MemberHead[See
getExpectedType()]_

[#50561071_pgfId-20241]## java.lang.String

[#50561071_pgfId-20249]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getExpressionString()[getExpressionString()]link:jstl.htm#50561071_MemberHead[See
getExpressionString()]_

[#50561071_pgfId-20255]## java.lang.Class

[#50561071_pgfId-20263]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getType(jakarta.el.ELContext)[getType(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getType(ELContext)]_

[#50561071_pgfId-20269]## java.lang.Object

[#50561071_pgfId-20277]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getValue(jakarta.el.ELContext)[getValue(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See getValue(ELContext)]_

[#50561071_pgfId-20283]## int

[#50561071_pgfId-20291]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.hashCode()[hashCode()]link:jstl.htm#50561071_MemberHead[See
hashCode()]_

[#50561071_pgfId-20297]## boolean

[#50561071_pgfId-20305]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.isLiteralText()[isLiteralText()]link:jstl.htm#50561071_MemberHead[See
isLiteralText()]_

[#50561071_pgfId-20311]## boolean

[#50561071_pgfId-20319]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.isReadOnly(jakarta.el.ELContext)[isReadOnly(jakarta.el.ELContext
context)]link:jstl.htm#50561071_MemberHead[See isReadOnly(ELContext)]_

[#50561071_pgfId-20325]## void

[#50561071_pgfId-20333]##
_link:jstl.htm#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.setValue(jakarta.el.ELContext,%20java.lang.Object)[setValue(jakarta.el.ELContext
context, java.lang.Object value)]link:jstl.htm#50561071_MemberHead[See
setValue(ELContext, Object)]_

[#50561071_pgfId-22306]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561071_pgfId-20338]##Inherited Member Summary

a|
======= [#50561071_pgfId-20342]##Methods inherited from class _Object_

|[#50561071_pgfId-20346]## _clone()_ , _finalize()_ , _getClass()_ ,
_notify()_ , _notifyAll()_ , _toString()_ , _wait()_ , _wait(long)_ ,
_wait(long, int)_
|===

======= [#50561071_pgfId-22308]##

image:jstl-60.gif[image]

Fields

======= [#50561071_pgfId-22316]##[#50561071_marker-22310]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.i]##i

[#50561071_pgfId-22318]##protected final _java.lang.Integer_ _i_

======= [#50561071_pgfId-22326]##[#50561071_marker-22320]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.orig]##orig

[#50561071_pgfId-22328]##protected final _jakarta.el.ValueExpression_
_orig_

======= [#50561071_pgfId-22330]##

image:jstl-60.gif[image]

Constructors

======= [#50561071_pgfId-22338]##[#50561071_marker-22332]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.StringTokenValueExpression(jakarta.el.ValueExpression, int)]##StringTokenValueExpression(ValueExpression, int)

[#50561071_pgfId-22340]##public _StringTokenValueExpression_ (
_jakarta.el.ValueExpression_ orig, int i)

======= [#50561071_pgfId-22342]##

image:jstl-60.gif[image]

Methods

======= [#50561071_pgfId-22350]##[#50561071_marker-22344]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.equals(java.lang.Object)]##equals(Object)

[#50561071_pgfId-22352]##public boolean _equals_ ( _java.lang.Object_
obj)

======= [#50561071_pgfId-22354]##Overrides:

[#50561071_pgfId-22356]## _equals_ in class _Object_

======= [#50561071_pgfId-22364]##[#50561071_marker-22358]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getExpectedType()]##getExpectedType()

[#50561071_pgfId-22366]##public _java.lang.Class_ _getExpectedType_ ()

======= [#50561071_pgfId-22374]##[#50561071_marker-22368]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getExpressionString()]##getExpressionString()

[#50561071_pgfId-22376]##public _java.lang.String_ _getExpressionString_
()

======= [#50561071_pgfId-22384]##[#50561071_marker-22378]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getType(jakarta.el.ELContext)]##getType(ELContext)

[#50561071_pgfId-22386]##public _java.lang.Class_ _getType_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-22394]##[#50561071_marker-22388]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.getValue(jakarta.el.ELContext)]##getValue(ELContext)

[#50561071_pgfId-22396]##public _java.lang.Object_ _getValue_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-22404]##[#50561071_marker-22398]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.hashCode()]##hashCode()

[#50561071_pgfId-22406]##public int _hashCode_ ()

======= [#50561071_pgfId-22408]##Overrides:

[#50561071_pgfId-22410]## _hashCode_ in class _Object_

======= [#50561071_pgfId-22418]##[#50561071_marker-22412]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.isLiteralText()]##isLiteralText()

[#50561071_pgfId-22420]##public boolean _isLiteralText_ ()

======= [#50561071_pgfId-22428]##[#50561071_marker-22422]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.isReadOnly(jakarta.el.ELContext)]##isReadOnly(ELContext)

[#50561071_pgfId-22430]##public boolean _isReadOnly_ (
_jakarta.el.ELContext_ context)

======= [#50561071_pgfId-22438]##[#50561071_marker-22432]##[#50561071_MemberHead]##[#50561071_jakarta.servlet.jsp.jstl.core.StringTokenValueExpression.setValue(jakarta.el.ELContext, java.lang.Object)]##setValue(ELContext, Object)

[#50561071_pgfId-22440]##public void _setValue_ ( _jakarta.el.ELContext_
context, _java.lang.Object_ value)

==== [#50561050_pgfId-628442]##[#50561050_marker-628440]##Package

== [#50561050_pgfId-628448]##[#50561050_PackageHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt]##jakarta.servlet.jsp.jstl.fmt

====== [#50561050_pgfId-628450]##Description

[#50561050_pgfId-628453]##Â 

======= [#50561050_pgfId-628022]##Class Summary

== [#50561050_pgfId-628028]##Classes

[#50561050_pgfId-628040]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport[LocaleSupport]link:jstl.htm#50561050_ClassHead[See
LocaleSupport]_

[#50561050_pgfId-628042]##Class which exposes the locale-determination
logic for resource bundles through convenience methods.

[#50561050_pgfId-628054]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext[LocalizationContext]link:jstl.htm#50561050_ClassHead[See
LocalizationContext]_

[#50561050_pgfId-628056]##Class representing an I18N localization
context.

==== [#50561050_pgfId-628455]##jakarta.servlet.jsp.jstl.fmt

== [#50561050_pgfId-628463]##[#50561050_marker-628457]##[#50561050_ClassHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport]##LocaleSupport

====== [#50561050_pgfId-628465]##Declaration

[#50561050_pgfId-628467]##public class _LocaleSupport_

[#50561050_pgfId-628469]## Â 

[#50561050_pgfId-628471]## _java.lang.Object_

[#50561050_pgfId-628473]## |

[#50561050_pgfId-628475]## +--
_jakarta.servlet.jsp.jstl.fmt.LocaleSupport_

====== [#50561050_pgfId-628477]##Description

[#50561050_pgfId-628479]##Class which exposes the locale-determination
logic for resource bundles through convenience methods.

[#50561050_pgfId-628481]##This class may be useful to any tag handler
implementation that needs to produce localized messages. For example,
this might be useful for exception messages that are intended directly
for user consumption on an error page.

[#50561050_pgfId-628484]##Â 

======= [#50561050_pgfId-628063]##Member Summary

== [#50561050_pgfId-628069]##Constructors

[#50561050_pgfId-628075]##Â 

[#50561050_pgfId-628083]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.LocaleSupport()[LocaleSupport()]link:jstl.htm#50561050_MemberHead[See
LocaleSupport()]_

== [#50561050_pgfId-628089]##Methods

[#50561050_pgfId-628095]##static java.lang.String

[#50561050_pgfId-628103]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String)[getLocalizedMessage(jakarta.servlet.jsp.PageContext
pageContext, java.lang.String key)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String)]_

[#50561050_pgfId-628109]##static java.lang.String

[#50561050_pgfId-628117]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20java.lang.Object\%5B\%5D)[getLocalizedMessage(jakarta.servlet.jsp.PageContext
pageContext, java.lang.String key, java.lang.Object[]
args)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String, Object[])]_

[#50561050_pgfId-628123]##static java.lang.String

[#50561050_pgfId-628131]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20java.lang.Object\%5B\%5D,%20java.lang.String)[getLocalizedMessage(jakarta.servlet.jsp.PageContext
pageContext, java.lang.String key, java.lang.Object[] args,
java.lang.String basename)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String, Object[], String)]_

[#50561050_pgfId-628137]##static java.lang.String

[#50561050_pgfId-628145]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20java.lang.String)[getLocalizedMessage(jakarta.servlet.jsp.PageContext
pageContext, java.lang.String key, java.lang.String
basename)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String, String)]_

[#50561050_pgfId-628487]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561050_pgfId-628150]##Inherited Member Summary

a|
======= [#50561050_pgfId-628154]##Methods inherited from class _Object_

|[#50561050_pgfId-628158]## _clone()_ , _equals(Object)_ , _finalize()_
, _getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ ,
_toString()_ , _wait()_ , _wait(long)_ , _wait(long, int)_
|===

======= [#50561050_pgfId-628489]##

image:jstl-61.gif[image]

Constructors

======= [#50561050_pgfId-628497]##[#50561050_marker-628491]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.LocaleSupport()]##LocaleSupport()

[#50561050_pgfId-628499]##public _LocaleSupport_ ()

======= [#50561050_pgfId-628501]##

image:jstl-61.gif[image]

Methods

======= [#50561050_pgfId-628509]##[#50561050_marker-628503]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext, java.lang.String)]##getLocalizedMessage(PageContext, String)

[#50561050_pgfId-628511]##public static _java.lang.String_
_getLocalizedMessage_ ( _jakarta.servlet.jsp.PageContext_ pageContext,
_java.lang.String_ key)

[#50561050_pgfId-628513]##Retrieves the localized message corresponding
to the given key.

[#50561050_pgfId-628515]##The given key is looked up in the resource
bundle of the default I18N localization context, which is retrieved from
the _jakarta.servlet.jsp.jstl.fmt.localizationContext_ configuration
setting.

[#50561050_pgfId-628517]##If the configuration setting is empty, or the
default I18N localization context does not contain any resource bundle,
or the given key is undefined in its resource bundle, the string
â???<key>???â is returned, where â<key>â is replaced with the given key.

======= [#50561050_pgfId-628519]##Parameters:

[#50561050_pgfId-628521]## _pageContext_ - the page in which to get the
localized message corresponding to the given key

[#50561050_pgfId-628523]## _key_ - the message key

======= [#50561050_pgfId-628525]##Returns:

[#50561050_pgfId-628527]##the localized message corresponding to the
given key

======= [#50561050_pgfId-628535]##[#50561050_marker-628529]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext, java.lang.String, java.lang.String)]##getLocalizedMessage(PageContext, String, String)

[#50561050_pgfId-628537]##public static _java.lang.String_
_getLocalizedMessage_ ( _jakarta.servlet.jsp.PageContext_ pageContext,
_java.lang.String_ key, _java.lang.String_ basename)

[#50561050_pgfId-628539]##Retrieves the localized message corresponding
to the given key.

[#50561050_pgfId-628541]##The given key is looked up in the resource
bundle with the given base name.

[#50561050_pgfId-628543]##If no resource bundle with the given base name
exists, or the given key is undefined in the resource bundle, the string
â???<key>???â is returned, where â<key>â is replaced with the given key.

======= [#50561050_pgfId-628545]##Parameters:

[#50561050_pgfId-628547]## _pageContext_ - the page in which to get the
localized message corresponding to the given key

[#50561050_pgfId-628549]## _key_ - the message key

[#50561050_pgfId-628551]## _basename_ - the resource bundle base name

======= [#50561050_pgfId-628553]##Returns:

[#50561050_pgfId-628555]##the localized message corresponding to the
given key

======= [#50561050_pgfId-628563]##[#50561050_marker-628557]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext, java.lang.String, java.lang.Object\[\])]##getLocalizedMessage(PageContext, String, Object[])

[#50561050_pgfId-628565]##public static _java.lang.String_
_getLocalizedMessage_ ( _jakarta.servlet.jsp.PageContext_ pageContext,
_java.lang.String_ key, _java.lang.Object[]_ args)

[#50561050_pgfId-628567]##Retrieves the localized message corresponding
to the given key, and performs parametric replacement using the
arguments specified via _args_ .

[#50561050_pgfId-628569]##See the specification of the <fmt:message>
action for a description of how parametric replacement is implemented.

[#50561050_pgfId-628577]##The localized message is retrieved as in
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String)[getLocalizedMessage(pageContext,
key)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String)]._

======= [#50561050_pgfId-628579]##Parameters:

[#50561050_pgfId-628581]## _pageContext_ - the page in which to get the
localized message corresponding to the given key

[#50561050_pgfId-628583]## _key_ - the message key

[#50561050_pgfId-628585]## _args_ - the arguments for parametric
replacement

======= [#50561050_pgfId-628587]##Returns:

[#50561050_pgfId-628589]##the localized message corresponding to the
given key

======= [#50561050_pgfId-628597]##[#50561050_marker-628591]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext, java.lang.String, java.lang.Object\[\], java.lang.String)]##getLocalizedMessage(PageContext, String, Object[], String)

[#50561050_pgfId-628599]##public static _java.lang.String_
_getLocalizedMessage_ ( _jakarta.servlet.jsp.PageContext_ pageContext,
_java.lang.String_ key, _java.lang.Object[]_ args, _java.lang.String_
basename)

[#50561050_pgfId-628601]##Retrieves the localized message corresponding
to the given key, and performs parametric replacement using the
arguments specified via _args_ .

[#50561050_pgfId-628603]##See the specification of the <fmt:message>
action for a description of how parametric replacement is implemented.

[#50561050_pgfId-628611]##The localized message is retrieved as in
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocaleSupport.getLocalizedMessage(jakarta.servlet.jsp.PageContext,%20java.lang.String,%20java.lang.String)[getLocalizedMessage(pageContext,
key, basename)]link:jstl.htm#50561050_MemberHead[See
getLocalizedMessage(PageContext, String, String)]._

======= [#50561050_pgfId-628613]##Parameters:

[#50561050_pgfId-628615]## _pageContext_ - the page in which to get the
localized message corresponding to the given key

[#50561050_pgfId-628617]## _key_ - the message key

[#50561050_pgfId-628619]## _args_ - the arguments for parametric
replacement

[#50561050_pgfId-628621]## _basename_ - the resource bundle base name

======= [#50561050_pgfId-628623]##Returns:

[#50561050_pgfId-628625]##the localized message corresponding to the
given key

==== [#50561050_pgfId-628627]##jakarta.servlet.jsp.jstl.fmt

== [#50561050_pgfId-628635]##[#50561050_marker-628629]##[#50561050_ClassHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext]##LocalizationContext

====== [#50561050_pgfId-628637]##Declaration

[#50561050_pgfId-628639]##public class _LocalizationContext_

[#50561050_pgfId-628641]## Â 

[#50561050_pgfId-628643]## _java.lang.Object_

[#50561050_pgfId-628645]## |

[#50561050_pgfId-628647]## +--
_jakarta.servlet.jsp.jstl.fmt.LocalizationContext_

====== [#50561050_pgfId-628649]##Description

[#50561050_pgfId-628651]##Class representing an I18N localization
context.

[#50561050_pgfId-628653]##An I18N localization context has two
components: a resource bundle and the locale that led to the resource
bundle match.

[#50561050_pgfId-628655]##The resource bundle component is used by
<fmt:message> for mapping message keys to localized messages, and the
locale component is used by the <fmt:message>, <fmt:formatNumber>,
<fmt:parseNumber>, <fmt:formatDate>, and <fmt:parseDate> actions as
their formatting or parsing locale, respectively.

[#50561050_pgfId-628658]##Â 

======= [#50561050_pgfId-628165]##Member Summary

== [#50561050_pgfId-628171]##Constructors

[#50561050_pgfId-628177]##Â 

[#50561050_pgfId-628185]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext()[LocalizationContext()]link:jstl.htm#50561050_MemberHead[See
LocalizationContext()]_

[#50561050_pgfId-628191]##Â 

[#50561050_pgfId-628199]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext(java.util.ResourceBundle)[LocalizationContext(java.util.ResourceBundle
bundle)]link:jstl.htm#50561050_MemberHead[See
LocalizationContext(ResourceBundle)]_

[#50561050_pgfId-628205]##Â 

[#50561050_pgfId-628213]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext(java.util.ResourceBundle,%20java.util.Locale)[LocalizationContext(java.util.ResourceBundle
bundle, java.util.Locale locale)]link:jstl.htm#50561050_MemberHead[See
LocalizationContext(ResourceBundle, Locale)]_

== [#50561050_pgfId-628219]##Methods

[#50561050_pgfId-628225]## java.util.Locale

[#50561050_pgfId-628233]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.getLocale()[getLocale()]link:jstl.htm#50561050_MemberHead[See
getLocale()]_

[#50561050_pgfId-628239]## java.util.ResourceBundle

[#50561050_pgfId-628247]##
_link:jstl.htm#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.getResourceBundle()[getResourceBundle()]link:jstl.htm#50561050_MemberHead[See
getResourceBundle()]_

[#50561050_pgfId-628661]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561050_pgfId-628252]##Inherited Member Summary

a|
======= [#50561050_pgfId-628256]##Methods inherited from class _Object_

|[#50561050_pgfId-628260]## _clone()_ , _equals(Object)_ , _finalize()_
, _getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ ,
_toString()_ , _wait()_ , _wait(long)_ , _wait(long, int)_
|===

======= [#50561050_pgfId-628663]##

image:jstl-61.gif[image]

Constructors

======= [#50561050_pgfId-628671]##[#50561050_marker-628665]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext()]##LocalizationContext()

[#50561050_pgfId-628673]##public _LocalizationContext_ ()

[#50561050_pgfId-628675]##Constructs an empty I18N localization context.

======= [#50561050_pgfId-628683]##[#50561050_marker-628677]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext(java.util.ResourceBundle, java.util.Locale)]##LocalizationContext(ResourceBundle, Locale)

[#50561050_pgfId-628685]##public _LocalizationContext_ (
_java.util.ResourceBundle_ bundle, _java.util.Locale_ locale)

[#50561050_pgfId-628687]##Constructs an I18N localization context from
the given resource bundle and locale.

[#50561050_pgfId-628689]##The specified locale is the application- or
browser-based preferred locale that led to the resource bundle match.

======= [#50561050_pgfId-628691]##Parameters:

[#50561050_pgfId-628693]## _bundle_ - The localization contextâs
resource bundle

[#50561050_pgfId-628695]## _locale_ - The localization contextâs locale

======= [#50561050_pgfId-628703]##[#50561050_marker-628697]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.LocalizationContext(java.util.ResourceBundle)]##LocalizationContext(ResourceBundle)

[#50561050_pgfId-628705]##public _LocalizationContext_ (
_java.util.ResourceBundle_ bundle)

[#50561050_pgfId-628707]##Constructs an I18N localization context from
the given resource bundle.

[#50561050_pgfId-628709]##The localization contextâs locale is taken
from the given resource bundle.

======= [#50561050_pgfId-628711]##Parameters:

[#50561050_pgfId-628713]## _bundle_ - The resource bundle

======= [#50561050_pgfId-628715]##

image:jstl-61.gif[image]

Methods

======= [#50561050_pgfId-628723]##[#50561050_marker-628717]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.getLocale()]##getLocale()

[#50561050_pgfId-628725]##public _java.util.Locale_ _getLocale_ ()

[#50561050_pgfId-628727]##Gets the locale of this I18N localization
context.

======= [#50561050_pgfId-628729]##Returns:

[#50561050_pgfId-628731]##The locale of this I18N localization context,
or null if this I18N localization context is empty, or its resource
bundle is a (locale-less) root resource bundle.

======= [#50561050_pgfId-628739]##[#50561050_marker-628733]##[#50561050_MemberHead]##[#50561050_jakarta.servlet.jsp.jstl.fmt.LocalizationContext.getResourceBundle()]##getResourceBundle()

[#50561050_pgfId-628741]##public _java.util.ResourceBundle_
_getResourceBundle_ ()

[#50561050_pgfId-628743]##Gets the resource bundle of this I18N
localization context.

======= [#50561050_pgfId-628745]##Returns:

[#50561050_pgfId-628747]##The resource bundle of this I18N localization
context, or null if this I18N localization context is empty

==== [#50561052_pgfId-250303]##[#50561052_marker-250301]##Package

== [#50561052_pgfId-250309]##[#50561052_PackageHead]##[#50561052_jakarta.servlet.jsp.jstl.sql]##jakarta.servlet.jsp.jstl.sql

====== [#50561052_pgfId-250311]##Description

[#50561052_pgfId-250314]##Â 

======= [#50561052_pgfId-249883]##Class Summary

== [#50561052_pgfId-249889]##Interfaces

[#50561052_pgfId-249901]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result[Result]link:jstl.htm#50561052_ClassHead[See
Result]_

[#50561052_pgfId-249903]##This interface represents the result of a
<sql:query> action.

[#50561052_pgfId-249915]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.SQLExecutionTag[SQLExecutionTag]link:jstl.htm#50561052_ClassHead[See
SQLExecutionTag]_

[#50561052_pgfId-249917]##This interface allows tag handlers
implementing it to receive values for parameter markers in their SQL
statements.

== [#50561052_pgfId-249923]##Classes

[#50561052_pgfId-249935]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport[ResultSupport]link:jstl.htm#50561052_ClassHead[See
ResultSupport]_

[#50561052_pgfId-249937]##Supports the creation of a
jakarta.servlet.jsp.jstl.sql.Result object from a source
java.sql.ResultSet object.

==== [#50561052_pgfId-250316]##jakarta.servlet.jsp.jstl.sql

== [#50561052_pgfId-250324]##[#50561052_marker-250318]##[#50561052_ClassHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result]##Result

====== [#50561052_pgfId-250326]##Declaration

[#50561052_pgfId-250328]##public interface _Result_

====== [#50561052_pgfId-250330]##Description

[#50561052_pgfId-250332]##This interface represents the result of a
<sql:query> action. It provides access to the following information in
the query result:

[#50561052_pgfId-250334]##The result rows ( _getRows()_ and
_getRowsByIndex()_ )

[#50561052_pgfId-250336]##The column names ( _getColumnNames()_ )

[#50561052_pgfId-250338]##The number of rows in the result (
_getRowCount()_ )

[#50561052_pgfId-250340]##An indication whether the rows returned
represent the complete result or just a subset that is limited by a
maximum row setting ( _isLimitedByMaxRows()_ )

[#50561052_pgfId-250342]##An implementation of the _Result_ interface
provides a _disconnected_ view into the result of a query.

[#50561052_pgfId-250345]##Â 

======= [#50561052_pgfId-249944]##Member Summary

== [#50561052_pgfId-249950]##Methods

{empty}[#50561052_pgfId-249956]## java.lang.String[]

[#50561052_pgfId-249964]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result.getColumnNames()[getColumnNames()]link:jstl.htm#50561052_MemberHead[See
getColumnNames()]_

[#50561052_pgfId-249970]## int

[#50561052_pgfId-249978]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRowCount()[getRowCount()]link:jstl.htm#50561052_MemberHead[See
getRowCount()]_

{empty}[#50561052_pgfId-249984]## java.util.SortedMap[]

[#50561052_pgfId-249992]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRows()[getRows()]link:jstl.htm#50561052_MemberHead[See
getRows()]_

{empty}[#50561052_pgfId-249998]## java.lang.Object[][]

[#50561052_pgfId-250006]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRowsByIndex()[getRowsByIndex()]link:jstl.htm#50561052_MemberHead[See
getRowsByIndex()]_

[#50561052_pgfId-250012]## boolean

[#50561052_pgfId-250020]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result.isLimitedByMaxRows()[isLimitedByMaxRows()]link:jstl.htm#50561052_MemberHead[See
isLimitedByMaxRows()]_

======= [#50561052_pgfId-250347]##

image:jstl-62.gif[image]

Methods

======= [#50561052_pgfId-250355]##[#50561052_marker-250349]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result.getColumnNames()]##getColumnNames()

[#50561052_pgfId-250357]##public _java.lang.String[]_ _getColumnNames_
()

[#50561052_pgfId-250359]##Returns the names of the columns in the
result. The order of the names in the array matches the order in which
columns are returned in method getRowsByIndex().

======= [#50561052_pgfId-250361]##Returns:

[#50561052_pgfId-250363]##the column names as an array of _String_
objects

======= [#50561052_pgfId-250371]##[#50561052_marker-250365]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRowCount()]##getRowCount()

[#50561052_pgfId-250373]##public int _getRowCount_ ()

[#50561052_pgfId-250375]##Returns the number of rows in the cached
ResultSet

======= [#50561052_pgfId-250377]##Returns:

[#50561052_pgfId-250379]##the number of rows in the result

======= [#50561052_pgfId-250387]##[#50561052_marker-250381]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRows()]##getRows()

[#50561052_pgfId-250389]##public _java.util.SortedMap[]_ _getRows_ ()

[#50561052_pgfId-250391]##Returns the result of the query as an array of
_SortedMap_ objects. Each item of the array represents a specific row in
the query result.

[#50561052_pgfId-250393]##A row is structured as a _SortedMap_ object
where the key is the column name, and where the value is the value
associated with the column identified by the key. The column value is an
Object of the Java type corresponding to the mapping between column
types and Java types defined by the JDBC specification when the
_ResultSet.getObject()_ method is used.

[#50561052_pgfId-250395]##The _SortedMap_ must use the _Comparator_
_java.util.String.CASE_INSENSITIVE_ORDER_ . This makes it possible to
access the key as a case insensitive representation of a column name.
This method will therefore work regardless of the case of the column
name returned by the database.

======= [#50561052_pgfId-250397]##Returns:

[#50561052_pgfId-250399]##The result rows as an array of _SortedMap_
objects

======= [#50561052_pgfId-250407]##[#50561052_marker-250401]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result.getRowsByIndex()]##getRowsByIndex()

[#50561052_pgfId-250409]##public _java.lang.Object[][]_ _getRowsByIndex_
()

[#50561052_pgfId-250411]##Returns the result of the query as an array of
arrays. The first array dimension represents a specific row in the query
result. The array elements for each row are Object instances of the Java
type corresponding to the mapping between column types and Java types
defined by the JDBC specification when the _ResultSet.getObject()_
method is used.

======= [#50561052_pgfId-250413]##Returns:

[#50561052_pgfId-250415]##the result rows as an array of _Object[]_
objects

======= [#50561052_pgfId-250423]##[#50561052_marker-250417]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.Result.isLimitedByMaxRows()]##isLimitedByMaxRows()

[#50561052_pgfId-250425]##public boolean _isLimitedByMaxRows_ ()

[#50561052_pgfId-250427]##Returns true if the query was limited by a
maximum row setting

======= [#50561052_pgfId-250429]##Returns:

[#50561052_pgfId-250431]## _true_ if the query was limited by a maximum
row setting

==== [#50561052_pgfId-250433]##jakarta.servlet.jsp.jstl.sql

== [#50561052_pgfId-250441]##[#50561052_marker-250435]##[#50561052_ClassHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport]##ResultSupport

====== [#50561052_pgfId-250443]##Declaration

[#50561052_pgfId-250445]##public class _ResultSupport_

[#50561052_pgfId-250447]## Â 

[#50561052_pgfId-250449]## _java.lang.Object_

[#50561052_pgfId-250451]## |

[#50561052_pgfId-250453]## +--
_jakarta.servlet.jsp.jstl.sql.ResultSupport_

====== [#50561052_pgfId-250455]##Description

[#50561052_pgfId-250457]##Supports the creation of a
jakarta.servlet.jsp.jstl.sql.Result object from a source
java.sql.ResultSet object. A Result object makes it much easier for page
authors to access and manipulate the data resulting from a SQL query.

[#50561052_pgfId-250460]##Â 

======= [#50561052_pgfId-250027]##Member Summary

== [#50561052_pgfId-250033]##Constructors

[#50561052_pgfId-250039]##Â 

[#50561052_pgfId-250047]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.ResultSupport()[ResultSupport()]link:jstl.htm#50561052_MemberHead[See
ResultSupport()]_

== [#50561052_pgfId-250053]##Methods

[#50561052_pgfId-250059]##static Result

[#50561052_pgfId-250067]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.toResult(java.sql.ResultSet)[toResult(java.sql.ResultSet
rs)]link:jstl.htm#50561052_MemberHead[See toResult(ResultSet)]_

[#50561052_pgfId-250073]##static Result

[#50561052_pgfId-250081]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.toResult(java.sql.ResultSet,%20int)[toResult(java.sql.ResultSet
rs, int maxRows)]link:jstl.htm#50561052_MemberHead[See
toResult(ResultSet, int)]_

[#50561052_pgfId-250463]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561052_pgfId-250086]##Inherited Member Summary

a|
======= [#50561052_pgfId-250090]##Methods inherited from class _Object_

|[#50561052_pgfId-250094]## _clone()_ , _equals(Object)_ , _finalize()_
, _getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ ,
_toString()_ , _wait()_ , _wait(long)_ , _wait(long, int)_
|===

======= [#50561052_pgfId-250465]##

image:jstl-62.gif[image]

Constructors

======= [#50561052_pgfId-250473]##[#50561052_marker-250467]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.ResultSupport()]##ResultSupport()

[#50561052_pgfId-250475]##public _ResultSupport_ ()

======= [#50561052_pgfId-250477]##

image:jstl-62.gif[image]

Methods

======= [#50561052_pgfId-250485]##[#50561052_marker-250479]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.toResult(java.sql.ResultSet)]##toResult(ResultSet)

[#50561052_pgfId-250493]##public static
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result[jakarta.servlet.jsp.jstl.sql.Result]link:jstl.htm#50561052_ClassHead[See
Result] _toResult_ ( _java.sql.ResultSet_ rs)_

[#50561052_pgfId-250495]##Converts a _ResultSet_ object to a _Result_
object.

======= [#50561052_pgfId-250497]##Parameters:

[#50561052_pgfId-250499]## _rs_ - the _ResultSet_ object

======= [#50561052_pgfId-250501]##Returns:

[#50561052_pgfId-250503]##The _Result_ object created from the
_ResultSet_

======= [#50561052_pgfId-250511]##[#50561052_marker-250505]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.ResultSupport.toResult(java.sql.ResultSet, int)]##toResult(ResultSet, int)

[#50561052_pgfId-250519]##public static
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.Result[jakarta.servlet.jsp.jstl.sql.Result]link:jstl.htm#50561052_ClassHead[See
Result] _toResult_ ( _java.sql.ResultSet_ rs, int maxRows)_

[#50561052_pgfId-250521]##Converts _maxRows_ of a _ResultSet_ object to
a _Result_ object.

======= [#50561052_pgfId-250523]##Parameters:

[#50561052_pgfId-250525]## _rs_ - the _ResultSet_ object

[#50561052_pgfId-250527]## _maxRows_ - the maximum number of rows to be
cached into the _Result_ object.

======= [#50561052_pgfId-250529]##Returns:

[#50561052_pgfId-250531]##The _Result_ object created from the
_ResultSet_ , limited by _maxRows_

==== [#50561052_pgfId-250533]##jakarta.servlet.jsp.jstl.sql

== [#50561052_pgfId-250541]##[#50561052_marker-250535]##[#50561052_ClassHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.SQLExecutionTag]##SQLExecutionTag

====== [#50561052_pgfId-250543]##Declaration

[#50561052_pgfId-250545]##public interface _SQLExecutionTag_

====== [#50561052_pgfId-250547]##Description

[#50561052_pgfId-250549]##This interface allows tag handlers
implementing it to receive values for parameter markers in their SQL
statements.

[#50561052_pgfId-250551]##This interface is implemented by both
<sql:query> and <sql:update>. Its _addSQLParameter()_ method is called
by nested parameter actions (such as <sql:param>) to substitute
_PreparedStatement_ parameter values for â?â parameter markers in the
SQL statement of the enclosing _SQLExecutionTag_ action.

[#50561052_pgfId-250553]##The given parameter values are converted to
their corresponding SQL type (following the rules in the JDBC
specification) before they are sent to the database.

[#50561052_pgfId-250555]##Keeping track of the index of the parameter
values being added is the responsibility of the tag handler implementing
this interface

[#50561052_pgfId-250557]##The _SQLExcecutionTag_ interface is exposed in
order to support custom parameter actions which may retrieve their
parameters from any source and process them before substituting them for
a parameter marker in the SQL statement of the enclosing
_SQLExecutionTag_ action

[#50561052_pgfId-250560]##Â 

======= [#50561052_pgfId-250101]##Member Summary

== [#50561052_pgfId-250107]##Methods

[#50561052_pgfId-250113]## void

[#50561052_pgfId-250121]##
_link:jstl.htm#50561052_jakarta.servlet.jsp.jstl.sql.SQLExecutionTag.addSQLParameter(java.lang.Object)[addSQLParameter(java.lang.Object
value)]link:jstl.htm#50561052_MemberHead[See addSQLParameter(Object)]_

======= [#50561052_pgfId-250562]##

image:jstl-62.gif[image]

Methods

======= [#50561052_pgfId-250570]##[#50561052_marker-250564]##[#50561052_MemberHead]##[#50561052_jakarta.servlet.jsp.jstl.sql.SQLExecutionTag.addSQLParameter(java.lang.Object)]##addSQLParameter(Object)

[#50561052_pgfId-250572]##public void _addSQLParameter_ (
_java.lang.Object_ value)

[#50561052_pgfId-250574]##Adds a PreparedStatement parameter value. Must
behave as if it calls _PreparedStatement.setObject(int, Object)_ . For
each tag invocation, the integral index passed logically to
_setObject()_ must begin with 1 and must be incremented by 1 for each
subsequent invocation of _addSQLParameter()_ . The Object logically
passed to _setObject()_ must be the unmodified object received in the
value argument.

======= [#50561052_pgfId-250576]##Parameters:

[#50561052_pgfId-250578]## _value_ - the _PreparedStatement_ parameter
value

==== [#50561054_pgfId-927138]##[#50561054_marker-927136]##Package

== [#50561054_pgfId-927144]##[#50561054_PackageHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv]##jakarta.servlet.jsp.jstl.tlv

====== [#50561054_pgfId-927146]##Description

[#50561054_pgfId-927149]##Â 

======= [#50561054_pgfId-926758]##Class Summary

== [#50561054_pgfId-926764]##Classes

[#50561054_pgfId-926776]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV[PermittedTaglibsTLV]link:jstl.htm#50561054_ClassHead[See
PermittedTaglibsTLV]_

[#50561054_pgfId-926778]##A TagLibraryValidator class to allow a TLD to
restrict what taglibs (in addition to itself) may be imported on a page
where itâs used.

[#50561054_pgfId-926790]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV[ScriptFreeTLV]link:jstl.htm#50561054_ClassHead[See
ScriptFreeTLV]_

[#50561054_pgfId-926792]##A TagLibraryValidator for enforcing
restrictions against the use of JSP scripting elements.

==== [#50561054_pgfId-927151]##jakarta.servlet.jsp.jstl.tlv

== [#50561054_pgfId-927159]##[#50561054_marker-927153]##[#50561054_ClassHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV]##PermittedTaglibsTLV

====== [#50561054_pgfId-927161]##Declaration

[#50561054_pgfId-927163]##public class _PermittedTaglibsTLV_ extends
_jakarta.servlet.jsp.tagext.TagLibraryValidator_

[#50561054_pgfId-927165]## Â 

[#50561054_pgfId-927167]## _java.lang.Object_

[#50561054_pgfId-927169]## |

[#50561054_pgfId-927171]## +--
_jakarta.servlet.jsp.tagext.TagLibraryValidator_

[#50561054_pgfId-927173]## |

[#50561054_pgfId-927175]## +--
_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV_

====== [#50561054_pgfId-927177]##Description

[#50561054_pgfId-927179]##A TagLibraryValidator class to allow a TLD to
restrict what taglibs (in addition to itself) may be imported on a page
where itâs used.

[#50561054_pgfId-927181]##This TLV supports the following initialization
parameter:

[#50561054_pgfId-927183]## _permittedTaglibs_ : A whitespace-separated
list of URIs corresponding to tag libraries permitted to be imported on
the page in addition to the tag library that references
PermittedTaglibsTLV (which is allowed implicitly).

[#50561054_pgfId-927186]##Â 

======= [#50561054_pgfId-926799]##Member Summary

== [#50561054_pgfId-926805]##Constructors

[#50561054_pgfId-926811]##Â 

[#50561054_pgfId-926819]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.PermittedTaglibsTLV()[PermittedTaglibsTLV()]link:jstl.htm#50561054_MemberHead[See
PermittedTaglibsTLV()]_

== [#50561054_pgfId-926825]##Methods

[#50561054_pgfId-926831]## void

[#50561054_pgfId-926839]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.release()[release()]link:jstl.htm#50561054_MemberHead[See
release()]_

{empty}[#50561054_pgfId-926845]##
jakarta.servlet.jsp.tagext.ValidationMessage[]

[#50561054_pgfId-926853]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.validate(java.lang.String,%20java.lang.String,%20jakarta.servlet.jsp.tagext.PageData)[validate(java.lang.String
prefix, java.lang.String uri, jakarta.servlet.jsp.tagext.PageData
page)]link:jstl.htm#50561054_MemberHead[See validate(String, String,
PageData)]_

[#50561054_pgfId-927189]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561054_pgfId-926858]##Inherited Member Summary

a|
======= [#50561054_pgfId-926862]##Methods inherited from class _Object_

|[#50561054_pgfId-926866]## _clone()_ , _equals(Object)_ , _finalize()_
, _getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ ,
_toString()_ , _wait()_ , _wait(long)_ , _wait(long, int)_

a|
======= [#50561054_pgfId-926870]##Methods inherited from class _TagLibraryValidator_

|[#50561054_pgfId-926874]## _getInitParameters()_ ,
_setInitParameters(Map)_
|===

======= [#50561054_pgfId-927191]##

image:jstl-63.gif[image]

Constructors

======= [#50561054_pgfId-927199]##[#50561054_marker-927193]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.PermittedTaglibsTLV()]##PermittedTaglibsTLV()

[#50561054_pgfId-927201]##public _PermittedTaglibsTLV_ ()

======= [#50561054_pgfId-927203]##

image:jstl-63.gif[image]

Methods

======= [#50561054_pgfId-927211]##[#50561054_marker-927205]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.release()]##release()

[#50561054_pgfId-927213]##public void _release_ ()

======= [#50561054_pgfId-927221]##[#50561054_marker-927215]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.PermittedTaglibsTLV.validate(java.lang.String, java.lang.String, jakarta.servlet.jsp.tagext.PageData)]##validate(String, String, PageData)

[#50561054_pgfId-927223]##public
_jakarta.servlet.jsp.tagext.ValidationMessage[]_ _validate_ (
_java.lang.String_ prefix, _java.lang.String_ uri,
_jakarta.servlet.jsp.tagext.PageData_ page)

==== [#50561054_pgfId-927225]##jakarta.servlet.jsp.jstl.tlv

== [#50561054_pgfId-927233]##[#50561054_marker-927227]##[#50561054_ClassHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV]##ScriptFreeTLV

====== [#50561054_pgfId-927235]##Declaration

[#50561054_pgfId-927237]##public class _ScriptFreeTLV_ extends
_jakarta.servlet.jsp.tagext.TagLibraryValidator_

[#50561054_pgfId-927239]## Â 

[#50561054_pgfId-927241]## _java.lang.Object_

[#50561054_pgfId-927243]## |

[#50561054_pgfId-927245]## +--
_jakarta.servlet.jsp.tagext.TagLibraryValidator_

[#50561054_pgfId-927247]## |

[#50561054_pgfId-927249]## +--
_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV_

====== [#50561054_pgfId-927251]##Description

[#50561054_pgfId-927253]##A TagLibraryValidator for enforcing
restrictions against the use of JSP scripting elements.

[#50561054_pgfId-927255]##This TLV supports four initialization
parameters, for controlling which of the four types of scripting
elements are allowed or prohibited:

[#50561054_pgfId-927257]## _allowDeclarations_ : if true, indicates that
declaration elements are not prohibited.

[#50561054_pgfId-927259]## _allowScriptlets_ : if true, indicates that
scriptlets are not prohibited

[#50561054_pgfId-927261]## _allowExpressions_ : if true, indicates that
top-level expression elements (i.e., expressions not associated with
request-time attribute values) are not prohibited.

[#50561054_pgfId-927263]## _allowRTExpressions_ : if true, indicates
that expression elements associated with request-time attribute values
are not prohibited.

[#50561054_pgfId-927265]##The default value for all for initialization
parameters is false, indicating all forms of scripting elements are to
be prohibited.

[#50561054_pgfId-927268]##Â 

======= [#50561054_pgfId-926881]##Member Summary

== [#50561054_pgfId-926887]##Constructors

[#50561054_pgfId-926893]##Â 

[#50561054_pgfId-926901]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.ScriptFreeTLV()[ScriptFreeTLV()]link:jstl.htm#50561054_MemberHead[See
ScriptFreeTLV()]_

== [#50561054_pgfId-926907]##Methods

[#50561054_pgfId-926913]## void

[#50561054_pgfId-926921]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.setInitParameters(java.util.Map)[setInitParameters(java.util.Map
initParms)]link:jstl.htm#50561054_MemberHead[See
setInitParameters(Map)]_

{empty}[#50561054_pgfId-926927]##
jakarta.servlet.jsp.tagext.ValidationMessage[]

[#50561054_pgfId-926935]##
_link:jstl.htm#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.validate(java.lang.String,%20java.lang.String,%20jakarta.servlet.jsp.tagext.PageData)[validate(java.lang.String
prefix, java.lang.String uri, jakarta.servlet.jsp.tagext.PageData
page)]link:jstl.htm#50561054_MemberHead[See validate(String, String,
PageData)]_

[#50561054_pgfId-927271]##Â 

[width="100%",cols="100%",options="header",]
|===
a|
======= [#50561054_pgfId-926940]##Inherited Member Summary

a|
======= [#50561054_pgfId-926944]##Methods inherited from class _Object_

|[#50561054_pgfId-926948]## _clone()_ , _equals(Object)_ , _finalize()_
, _getClass()_ , _hashCode()_ , _notify()_ , _notifyAll()_ ,
_toString()_ , _wait()_ , _wait(long)_ , _wait(long, int)_

a|
======= [#50561054_pgfId-926952]##Methods inherited from class _TagLibraryValidator_

|[#50561054_pgfId-926956]## _getInitParameters()_ , _release()_
|===

======= [#50561054_pgfId-927273]##

image:jstl-63.gif[image]

Constructors

======= [#50561054_pgfId-927281]##[#50561054_marker-927275]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.ScriptFreeTLV()]##ScriptFreeTLV()

[#50561054_pgfId-927283]##public _ScriptFreeTLV_ ()

[#50561054_pgfId-927285]##Constructs a new validator instance.
Initializes the parser factory to create non-validating, namespace-aware
SAX parsers.

======= [#50561054_pgfId-927287]##

image:jstl-63.gif[image]

Methods

======= [#50561054_pgfId-927295]##[#50561054_marker-927289]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.setInitParameters(java.util.Map)]##setInitParameters(Map)

[#50561054_pgfId-927297]##public void _setInitParameters_ (
_java.util.Map_ initParms)

[#50561054_pgfId-927299]##Sets the values of the initialization
parameters, as supplied in the TLD.

======= [#50561054_pgfId-927301]##Overrides:

[#50561054_pgfId-927303]## _setInitParameters_ in class
_TagLibraryValidator_

======= [#50561054_pgfId-927305]##Parameters:

[#50561054_pgfId-927307]## _initParms_ - a mapping from the names of the
initialization parameters to their values, as specified in the TLD.

======= [#50561054_pgfId-927315]##[#50561054_marker-927309]##[#50561054_MemberHead]##[#50561054_jakarta.servlet.jsp.jstl.tlv.ScriptFreeTLV.validate(java.lang.String, java.lang.String, jakarta.servlet.jsp.tagext.PageData)]##validate(String, String, PageData)

[#50561054_pgfId-927317]##public
_jakarta.servlet.jsp.tagext.ValidationMessage[]_ _validate_ (
_java.lang.String_ prefix, _java.lang.String_ uri,
_jakarta.servlet.jsp.tagext.PageData_ page)

[#50561054_pgfId-927319]##Validates a single JSP page.

======= [#50561054_pgfId-927321]##Overrides:

[#50561054_pgfId-927323]## _validate_ in class _TagLibraryValidator_

======= [#50561054_pgfId-927325]##Parameters:

[#50561054_pgfId-927327]## _prefix_ - the namespace prefix specified by
the page for the custom tag library being validated.

[#50561054_pgfId-927329]## _uri_ - the URI specified by the page for the
TLD of the custom tag library being validated.

[#50561054_pgfId-927331]## _page_ - a wrapper around the XML
representation of the page being validated.

======= [#50561054_pgfId-927333]##Returns:

[#50561054_pgfId-927335]##null, if the page is valid; otherwise, a
ValidationMessage[] containing one or more messages indicating why the
page is not valid.

======= [#50561110_pgfId-10125]## [#50561110_32725]##

======= [#50561110_pgfId-10127]##

image:jstl-64.gif[image]

[#50561110_42159]##Compatibility & Migration

image:jstl-65.gif[image]

[#50561110_pgfId-7578]##[#50561110_32559]##This appendix provides
information on compatibility between different versions of JSTL, as well
as on how to migrate your web application to take advantage of the new
features of the latest JSTL release.

[#50561110_pgfId-10171]##

image:jstl-66.gif[image]

JSTL 1.2 Backwards Compatibility

[#50561110_pgfId-10172]##JSTL 1.2 is backwards compatible with JSTL 1.1.
This means that a web-application that was developed to run with JSTL
1.1 wonât require any modification when run with JSTL 1.2.

[#50561110_pgfId-10205]##Note that JSTL is part of the Java EE platform
as of the JSTL 1.2 version. A web application therefore does not need to
bundle JSTL anymore when it runs on a web container that is Java EE
technology compliant. Should JSTL be bundled with a web-application, it
will simply be ignored as JSTL provided by the platform always takes
precedence (see Section JSP.7.3.2, "TLD resource path" of the JSP
specification).

[#50561110_pgfId-9325]##

image:jstl-66.gif[image]

JSTL 1.1 Backwards Compatibility

[#50561110_pgfId-9623]##JSTL 1.1 is backwards compatible with JSTL 1.0.
This means that a web-application that was developed to run with JSTL
1.0 wonât require any modification when run with JSTL 1.1. Details
explaining how this backwards compatibility is achieved are given in
link:jstl.htm#50561110_77392[See How JSTL 1.1 Backwards Compatibility is
Achieved] below.

[#50561110_pgfId-10144]##If your application executes in an environment
that has JSTL 1.1, it is however recommended that you migrate to JSTL
1.1 to take full advantage of the new capabilities it offers. Details on
how to migrate your web-application from JSTL 1.0 to JSTL 1.1 are given
in link:jstl.htm#50561110_13820[See Migrating to JSTL 1.1].

[#50561110_pgfId-10149]##[#50561110_77392]##How JSTL 1.1 Backwards
Compatibility is Achieved

[#50561110_pgfId-10150]##JSTL 1.0 requires JSP 1.2 (J2EE 1.3 platform).
The key difference between JSTL 1.0 and JSTL 1.1 is that the expression
language (EL) has moved from the JSTL specification to the JSP
specification. The EL is therefore now part of the JSP 2.0
specification, and JSTL 1.1 requires JSP 2.0 (J2EE 1.4 platform).

[#50561110_pgfId-9739]##A web application developed for JSP 1.2 has a
servlet 2.3 deployment descriptor (web.xml). JSP 2.0 provides backwards
compatibility for JSP 1.2 web applications by disabling by default the
EL machinery (i.e. evaluation of EL expressions) when a web application
has a servlet 2.3 deployment descriptor. A web application that uses
JSTL 1.0 and which is deployed with a servlet 2.3 deployment descriptor
therefore runs without any modification in a J2EE 1.4 environment
because EL expressions are ignored by JSP 2.0, and JSTL 1.0 keeps
evaluating them as was the case with JSP 1.2.

[#50561110_pgfId-9757]##To support backwards compatibility, JSTL 1.1
introduces new URIs that must be specified to use the new capabilities
offered in JSTL 1.1. Among these new capabilities is the evaluation of
EL expressions being performed by the JSP 2.0 container rather than JSTL
itself. The new URIs for JSTL 1.1 are as follows:

[#50561110_pgfId-9857]##JSTL 1.1 Tag Libraries

[#50561110_pgfId-9889]##Â 

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50561110_pgfId-9860]##Functional Area |[#50561110_pgfId-9862]##URI
|[#50561110_pgfId-9864]##Prefix
|[#50561110_pgfId-9866]##core |[#50561110_pgfId-9868]##
_http://java.sun.com/jsp/jstl/core_ |[#50561110_pgfId-9870]## _c_

|[#50561110_pgfId-9872]##XML processing |[#50561110_pgfId-9874]##
_http://java.sun.com/jsp/jstl/xml_ |[#50561110_pgfId-9876]## _x_

|[#50561110_pgfId-9878]##I18N capable formatting
|[#50561110_pgfId-9880]## _http://java.sun.com/jsp/jstl/fmt_
|[#50561110_pgfId-9882]## _fmt_

|[#50561110_pgfId-9884]##relational db access (SQL)
|[#50561110_pgfId-9886]## _http://java.sun.com/jsp/jstl/sql_
|[#50561110_pgfId-9888]## _sql_
|===

[#50561110_pgfId-10056]##The new URIs are similar to the old JSTL 1.0 EL
URIs, except that _jsp/_ has been added in front of _jstl_ , stressing
JSTL's dependency on the JSP specification (which now "owns" the EL). It
would have been desirable to move forward with the same EL URIs in JSTL
1.1, however this would have only been possible at the cost of losing
full backwards compatibility. The JSTL Expert Group felt that
maintaining backwards compatibility was more important than preserving
the old URIs.

[#50561110_pgfId-9900]##The JSTL 1.0 URIs are deprecated as of JSTL 1.1.
If used, they should normally appear in a web application that has a
servlet 2.3 deployment descriptor to disable the JSP 2.0 EL machinery.
If used with a servlet 2.4 deployment descriptor, the JSP 2.0 EL
machinery must be explicitely disabled for the pages where the JSTL 1.0
tag libraries are used. Consult the JSP specification for details.

[#50561110_pgfId-9694]##

image:jstl-66.gif[image]

[#50561110_13820]##Migrating to JSTL 1.1

[#50561110_pgfId-9774]##To migrate from JSTL 1.0 to JSTL 1.1, so a web
application can take advantage of the new features associated with JSTL
1.1, one must do the following:

[#50561110_pgfId-9776]##Migrate the web application deployment
descriptor (web.xml) from servlet 2.3 to servlet 2.4.

[#50561110_pgfId-9990]##See Servlet 2.4 specification for details

[#50561110_pgfId-9806]##Replace all the JSTL 1.0 EL & RT URIs by the new
JSTL 1.1 URIs

[#50561110_pgfId-9812]##Escape all occurrences of â$\{â in RT actions
and template text.

[#50561110_pgfId-9946]##See JSP 2.0 specification for details.

======= [#50561111_pgfId-10304]## [#50561111_32725]##

======= [#50561111_pgfId-10196]##

image:jstl-67.gif[image]

[#50561111_42159]##Changes

image:jstl-68.gif[image]

[#50561111_pgfId-7578]##[#50561111_32559]##This appendix lists the
changes in the JSTL specification. This appendix is non-normative.

[#50561111_pgfId-10322]##

image:jstl-69.gif[image]

JSTL 1.2 Maintenance Release

[#50561111_pgfId-10323]##The goal of this maintenance release is to
align the JSTL specification with the work done on the JavaServer Pages
2.1 and JavaServer Faces (Faces) 1.2 specifications. Also, as of this
release (JSTL 1.2), JSTL is now part of the Java Enterprise Edition
platform.

[#50561111_pgfId-10385]##Iteration tags support for nested actions with
deferred-values referring to the iteration variable

[#50561111_pgfId-10401]##The semantics of the standard actions
<c:forEach> and <c:forTokens> are modified to allow the iteration tags
to work seamlessly with nested JavaServer Faces actions. More
specifically, <c:forEach> and <c:forTokens> now support nested actions
with deferred-values referring to the iteration variable, as long as a
deferred value has been specified for the 'items' attribute. See
link:jstl.htm#50561100_91064[See <c:forEach>] and
link:jstl.htm#50561100_50484[See <c:forTokens>].

[#50561111_pgfId-10425]##<c:set> support for deferred values

[#50561111_pgfId-10426]##The semantics of the standard action <c:set>
have been modified to allow the action to accept a deferred-value. See
link:jstl.htm#50561098_97330[See <c:set>].

[#50561111_pgfId-10463]##Generics

[#50561111_pgfId-10464]##Since JSP 2.1 requires J2SE 5.0, weâve modified
the APIs that can take advantage of generics:
_ScriptFreeTLV:setInitParameters()_

[#50561111_pgfId-10338]##Minor corrections

[#50561111_pgfId-10339]##Example involving <fmt:parseDate> in section
9.9 was incorrect. A pattern has been added so the date can be parsed
properly.

[#50561111_pgfId-10353]##Clarified the fact that the output of <c:url>
wonât work for the _url_ attribute value of <c:import> for context
relative URLs (URLs that start with a '/'). (section 7.4).

[#50561111_pgfId-9325]##

image:jstl-69.gif[image]

JSTL 1.1 Maintenance Release

[#50561111_pgfId-9667]##As already stated in the JSTL 1.0 specification,
the specification of the Expression Language (EL) first introduced in
JSTL 1.0 is now moving into the JSP 2.0 specification. The primary goal
of the JSTL 1.1 maintenance release is to synchronize the JSTL
specification with the JSP 2.0 specification which now owns the EL. This
maintenance release also adresses clarifications and corrections needed
to the initial specification.

[#50561111_pgfId-9623]##Expression Language moved to the JSP
specification

[#50561111_pgfId-9624]##Necessary changes have been made all across the
specification to reflect the fact that the Expression Language now
belongs to the JSP specification (JSP 2.0). This includes having
appendix A removed ("Appendix A - Expression Language Definition"), as
well as having examples modified to take advantage of the fact that EL
expressions can now be used in template text and do not require the use
of the <c:out> action (unless the escapeXml or default features of
<c:out> are required).

[#50561111_pgfId-9362]##Compatibility and Migration

[#50561111_pgfId-9363]##New Appendix A provides information on
compatibility between different versions of JSTL, as well as on how to
migrate a web application to take advantage of the new features of the
latest JSTL release.

[#50561111_pgfId-9440]##Functions

[#50561111_pgfId-9442]##Since JSP 2.0 introduces EL functions, JSTL 1.1
defines a simple, standard set of functions that has been most often
requested by page authors. This includes functions to get the size of a
collection, as well as to perform common string manipulations. Functions
are defined in the new Chapter 15.

[#50561111_pgfId-9349]##Support for direct transfer from Reader -> out

[#50561111_pgfId-9350]##With JSP 2.0, displaying the content of a Reader
object to "out" has been identified as an important use case, creating
the need for a mechanism to handle a direct transfer from reader -> out.
This is now provided as an extension of <c:out>.

[#50561111_pgfId-9599]##Default values

[#50561111_pgfId-9600]##New section 2.9 has been added to describe how
default values can be handled in a generic way in JSTL.

[#50561111_pgfId-9381]##end attribute < begin attribute in iterator
actions

[#50561111_pgfId-9648]##The spec used to constrain the end attribute to
be greater than or equal to the begin attribute. It has now been relaxed
to handle this situation according to common practices of modern
programming languages (e.g. C++, Java, Perl). If end < begin, the loop
will simply not be executed.

[#50561111_pgfId-9529]##Character encoding support in <c:import>

[#50561111_pgfId-9571]##The way character encoding is handled for
<c:import> has been corrected in Section 7.4.

[#50561111_pgfId-10238]##Semantics of locales

[#50561111_pgfId-10230]##Clarified the fact that the semantics of
locales in JSTL are the same as the ones defined by the class
_java.util.Locale_ (section 8.1). A consequence of this is that, as of
J2SE 1.4, new language codes defined in ISO 639 (e.g. _he_ , _yi_ , _id_
) will be returned as the old codes (e.g. _iw_ , _ji_ , _in_ ).

[#50561111_pgfId-9857]##Correct the inconsistency between <fmt:message>
and <fmt:formatXXX> when <fmt:message> is used with parametric
replacement and a locale-less localization context

[#50561111_pgfId-9870]##If the localization context does not have any
locale, the locale of the java.text.MessageFormat is set to the locale
returned by the formatting locale lookup algorithm in section 9.3,
except that the available formatting locales are given as the
intersection of the number- and date- formatting locales. If this
algorithm does not yield any locale, the locale of the
java.text.MessageFormat is set to the runtime's default locale.

[#50561111_pgfId-9895]##Null or empty values with formatting actions

[#50561111_pgfId-9908]##The behavior of <fmt:formatNumber> and
<fmt:formatDate> (sections 9.7 and 9.9) has been clarified when value is
null or empty.

[#50561111_pgfId-9922]##Connection handling in SQL actions

[#50561111_pgfId-9923]##Clarifications have been made to the fact that
SQL actions in JSTL always release connections to the database as
quickly as possible (a connection is always closed by the time execution
of the action responsible for opening it completes).

[#50561111_pgfId-9941]##Context for XPath expression evaluations nested
within <x:forEach>

[#50561111_pgfId-9958]##A new description subsection has been added to
Section 12.6 to clarify how the context for XPath expression evaluations
is obtained within <x:forEach>.

[#50561111_pgfId-9973]##Align behavior of <x:forEach> with <c:forEach>

[#50561111_pgfId-9974]##Attributes _varStatus_ , _begin_ , _end_ , and
_step_ have been added.

[#50561111_pgfId-10008]##Default context node for XPath expression
evaluations

[#50561111_pgfId-10009]##New section "11.1.6 Default Context Node"
clarifies how the default context node for XPath expression evaluations
is obtained.

[#50561111_pgfId-10032]##Replace attributes that start with "xml"

[#50561111_pgfId-10045]##Names beginning with the string "xml" are
reserved by the XML specification. New attribute _doc_ has been added to
<x:parse> to replace attribute _xml_ that is now being deprecated. Also,
new attributes _doc_ and _docSystemId_ have been added to <x:transform>
to replace attributes _xml_ and _xmlSystemId_ that are now being
deprecated.

[#50561111_pgfId-10143]##Response Encoding

[#50561111_pgfId-10144]##The way formatting actions influence the
encoding of the response has been clarified in sections 8.4 and 8.10.
Repeated calls to _ServletResponse.setLocale()_ will affect the
character encoding of the response only if it has not already been set
explicitely.

[#50561111_pgfId-10204]##Java APIs

[#50561111_pgfId-10205]##The specification of the JSTL Java APIs is now
generated directly from the Javadoc of the reference implementation and
is consolidated within its own chapter (Chapter 16).

[#50561111_pgfId-10116]##Minor corrections

[#50561111_pgfId-10117]## _status_ has been corrected with _varStatus_
in section 6.6.

[#50561111_pgfId-10118]##The resulting locale of examples 1 and 3 in
Section 8.3.3 have been corrected.

[#50561111_pgfId-10110]##The syntax of <sql:dateParam> in Section 10.8
has been corrected.

[#50561111_pgfId-8846]##

image:jstl-69.gif[image]

Changes between Proposed Final Draft and Final Draft

[#50561111_pgfId-9093]##Many typos and clarifications have been made to
the specification. Clarifications and modifications worth noting
include:

[#50561111_pgfId-9253]##Preface

[#50561111_pgfId-9254]##Added typographical conventions.

[#50561111_pgfId-8852]##Chapter 2 - Conventions

[#50561111_pgfId-8859]##When an action is required to throw an
exception, there were two choices when no root cause was involved:
_JspException_ or _JspTagException_ . The specification has now
standardized on _JspException_ everywhere in the spec (instead of
_JspException_ in some places (with root cause), and _JspTagException_
in some others (no root cause)).

[#50561111_pgfId-9048]##Clarified the proper handling of constraints in
section 2.7.

[#50561111_pgfId-9263]##Constants names now use â_â as word separators
(e.g. FMT_FALLBACK_LOCALE)

[#50561111_pgfId-9179]##Chapter 3 - Expression Language Overview

[#50561111_pgfId-9180]##Fixed example featuring the _default_ attribute
in section 3.6.

[#50561111_pgfId-9064]##Chapter 4 - General-Purpose Actions

[#50561111_pgfId-9082]##Transparent conversion now supported on a value
to be set as a bean property.

[#50561111_pgfId-9229]##Clarified behavior of <c:set> when _value_ is
null, so it has the same semantics as <c:remove>.

[#50561111_pgfId-9230]##Clarified the behavior of <c:out> when _value_
is null.

[#50561111_pgfId-9231]##Chapter 6 - Iterator Actions

[#50561111_pgfId-8848]##Corrected the name of method _setStatus()_ to be
_setVarStatus()_ , as it should have been.

[#50561111_pgfId-9269]##Methods _next()_ , _hasNext()_ , _prepare()_ of
class _LoopTagSupport_ are abstract methods.

[#50561111_pgfId-9284]##Method _hasNext()_ of class _LoopTagSupport_
returns boolean.

[#50561111_pgfId-9300]##Added protected fields _beginSpecified_ ,
_endSpecified_ , and _stepSpecified_ to class _LoopTagSupport_ .

[#50561111_pgfId-8953]##Chapter 8 - I18N Actions

[#50561111_pgfId-8942]##Left over references to
_jakarta.servlet.jsp.jstl.fmt.bundle_ have been changed to
_jakarta.servlet.jsp.jstl.fmt.localizationContext_ .

[#50561111_pgfId-9149]##Added the three constructors to class
_LocalizationContext_ and clarified the behavior of methods
_getResourceBundle()_ and _getLocale()_ .

[#50561111_pgfId-9198]##Chapter 9 - Formatting Actions

[#50561111_pgfId-9199]##Clarified how the formatting pattern applies in
<fmt:number> and <fmt:parseNumber>.

[#50561111_pgfId-8795]##Chapter 10 - SQL Actions

[#50561111_pgfId-8787]##Clarified the handling of auto-commit mode and
isolation level in <sql:transaction>.

[#50561111_pgfId-8920]##Clarified the handling of exceptions occurring
during the execution of <sql:transaction>.

[#50561111_pgfId-9022]##Added clarification to <sql:param> when dealing
with _String_ values (only works for columns of text type).

[#50561111_pgfId-9119]##Clarified that if _dataSource_ is null, a
_JspException_ is thrown for <sql:query>, <sql:update>,
<sql:transaction>, and <sql:setDataSource>.

[#50561111_pgfId-8921]##Chapters 11, 12, 13 - XML Actions

[#50561111_pgfId-8772]##Clarified âNull & Error Handlingâ for <x:parse>
and <x:transform>

[#50561111_pgfId-8800]##In <x:forEach>, if _select_ is empty, a
_JspException_ is now thrown.

[#50561111_pgfId-8926]##Added syntax without body content to <x:if>. It
is now similar to <c:if>.

[#50561111_pgfId-8981]##Only _String_ and _Reader_ objects are now
allowed for the _xml_ attribute of <x:parse>.

[#50561111_pgfId-9239]##Clarified that DOM objects are supported as
XPath variables.

[#50561111_pgfId-8755]##Appendix A - Expression Language

[#50561111_pgfId-8739]##Alternative operators &&, ||, and ! were missing
in some of the tables. They now appear along with their counterpart and,
or, and not.

[#50561111_pgfId-9259]##Clarified the definition of integer and floating
point literals.

[#50561111_pgfId-9260]##Removed division by 0 as an example of exception
for arithmetic operators / and %.

[#50561111_pgfId-7814]##

image:jstl-69.gif[image]

Changes between Public Draft and Proposed Final Draft

[#50561111_pgfId-7818]##Many typos and clarifications have been made to
the specification. Major changes include:

[#50561111_pgfId-8252]##Preface

[#50561111_pgfId-8253]##Added acknowledgements.

[#50561111_pgfId-8195]##Chapter 1 - Introduction

[#50561111_pgfId-8196]##Clarified the fact that actions from EL- and RT-
based libraries can be mixed together.

[#50561111_pgfId-7839]##Chapter 2 - Conventions

[#50561111_pgfId-7819]##Clarified how actions throw exceptions.

[#50561111_pgfId-8233]##âSection 2.8 - Configuration Parametersâ has
been completely rewritten and is now titled âConfiguration Dataâ. The
way configuration data is handled in JSTL has been clarified and will
now work properly with containers that implement JSP scopes via a single
namespace.

[#50561111_pgfId-8210]##Chapter 4 - Expression Language Support Actions

[#50561111_pgfId-8211]##Renamed the chapter to âGeneral Purpose
Actionsâ.

[#50561111_pgfId-8222]##Removed the restriction that the actions in this
chapter are only available in the EL-based version of the library.

[#50561111_pgfId-8245]##Extended the scope of <c:set> so it supports
setting a property of a target JavaBeans or _java.util.Map_ object.

[#50561111_pgfId-8099]##Chapter 7 - URL Related Actions

[#50561111_pgfId-8156]##Improved the error handling behavior of
<c:import>

[#50561111_pgfId-8157]##<c:url> and <c:redirect> now append the context
path to any relative URL that starts with "/". Added new attribute
_context_ to properly handle foreign context URLs.

[#50561111_pgfId-8519]##Chapter 8 - I18N Actions

[#50561111_pgfId-8520]##In the resource bundle lookup, the locale-less
root resource bundle is now supported if neither the preferred locales
nor the fallback locale yield a resource bundle match.

[#50561111_pgfId-8521]##<fmt:locale> has been renamed to
<fmt:setLocale>.

[#50561111_pgfId-8522]##<fmt:bundle> no longer takes 'var' and 'scope'.
Creating and storing an I18N localization context with a resource bundle
in a 'var' or scoped configuration variable is now done by the new
<fmt:setBundle>.

[#50561111_pgfId-8523]##Logging is considered an implementation-specific
(deployment) issue and has been removed from <fmt:message>'s
description.

[#50561111_pgfId-8524]##A new class _LocalizationContext_ has been
defined which represents an I18N localization context containg a
_java.util.ResourceBundle_ and a _java.util.Locale_ .

[#50561111_pgfId-8669]## _jakarta.servlet.jsp.jstl.fmt.basename_ has been
replaced with _jakarta.servlet.jsp.jstl.fmt.localizationContext_ .

[#50561111_pgfId-8525]##Chapter 9 - Formatting Actions

[#50561111_pgfId-8526]##Formatting actions nested inside a <fmt:bundle>
no longer use that bundle's locale as their formatting locale, but the
locale of the enclosing I18N localization context, which is the
(possibly more specific) locale that led to the resource bundle match.

[#50561111_pgfId-8527]##<fmt:timeZone> no longer takes 'var' and
'scope'. Storing a time zone in a 'var' or scoped configuration variable
is now done by the new <fmt:setTimeZone>.

[#50561111_pgfId-8528]##<fmt:formatNumber> no longer uses the "en"
locale to parse numeric values given as strings, but uses Long.valueOf()
or Double.valueOf() instead.

[#50561111_pgfId-8529]##In <fmt:parseNumber>, _parseLocale_ , which used
to support string values only, now also supports values of type
_java.util.Locale_ .

[#50561111_pgfId-8530]##<fmt:formatDate> no longer supports literal
values, and no longer has a body. Its 'value' attribute is no longer
optional, meaning the default behaviour of formatting the current time
and date is no longer supported.

[#50561111_pgfId-8531]##In <fmt:parseDate>, _parseLocale_ , which used
to support string values only, now also supports values of type
_java.util.Locale_ .

[#50561111_pgfId-8623]##<fmt:setLocale>, formerly known as <fmt:locale>,
now also accepts values of type _java.util.Locale_ (in addition to
string values).

[#50561111_pgfId-8647]##The runtime's default locale is no longer used
as a fallback, since it is not guaranteed to be among the supported
formatting locales.

[#50561111_pgfId-8650]##<fmt:timeZone> and the new <fmt:setTimeZone> now
also accept values of type _java.util.TimeZone_ (in addition to string
values).

[#50561111_pgfId-7869]##Chapter 10 - SQL Actions

[#50561111_pgfId-8177]##The configuration settings now include JDBC
parameters.

[#50561111_pgfId-8184]##<sql:driver> has been renamed
<sql:setDataSource>. It now supports attribute âpasswordâ as well as
setting configuration variables.

[#50561111_pgfId-8167]##The keys in the Map objects returned by
Result.getRows() are now case-insensitive. The motivation for this
change is that some databases return column names as all-uppercase
strings in the ResultSet, while others return them with the same
upper/lowercase mix as was used in the SELECT statement.

[#50561111_pgfId-8142]##Method _Result.getRowsCount()_ has been renamed
to _Result.getRowCount()_ to be compatible with naming conventions in
J2SE.

[#50561111_pgfId-8143]##Method _Result.getMetaData()_ as well as
interface _ColumnMetaData_ have been removed because handling of
exceptions encountered when caching _ResultSetMetaData_ is problematic.
New method _Result.getColumnNames()_ has been added to still provide
easy access to column names.

[#50561111_pgfId-8144]##Exception message for <sql:query> and
<sql:update> has been improved. It now includes the SQL statement and
provides the caught exception as the root cause.

[#50561111_pgfId-8145]##Warning added in <sql:transaction> about the use
of commit and rollback.

[#50561111_pgfId-8146]##JNDI resource path to a data source must now be
specified as a relative path, just as is the case in a J2EE deployment
descriptor.

[#50561111_pgfId-8147]##New <sql:dateParam> action added to properly
support setting the values of parameter markers for values of type
_java.util.Date_ .

[#50561111_pgfId-8148]##The algorithm used by the SQL actions
(<sql:query>, <sql:update>, <sql:transaction>) to access a database has
been modified to support configuration settings for a dataSource as well
as for the JDBC DriverManager facility.

[#50561111_pgfId-8150]##Chapters 11, 12, 13 - XML Actions

[#50561111_pgfId-8055]##Removed the syntax with body content for
<x:set>. This was introducing a potentially confusing mechanism for
entering "dynamic" XPath expressions.

[#50561111_pgfId-8074]##URLs specified in <x:parse> and <x:transform>
may now be absolute or relative URLs.

[#50561111_pgfId-8075]##Clarified the fact that <x:parse> and
<x:transform> do not perform any validation against DTD's or Schemas.

[#50561111_pgfId-8087]##XPath scopes âpageâ, ârequestâ, âsessionâ, and
âapplicationâ have been renamed âpageScopeâ, ârequestScopeâ,
âsessionScopeâ, and âapplicationScopeâ to be the same as the names of
implicit objects in the expression language.

[#50561111_pgfId-8542]##Appendix A - Expression Language

[#50561111_pgfId-8543]##Implicit objects _page_ , _request_ , _session_
, _application_ , have been renamed _pageScope_ , _requestScope_ ,
_sessionScope_ , _applicationScope_ .

[#50561111_pgfId-8555]##Implicit object _params_ has been renamed
_paramValues_ .

[#50561111_pgfId-8554]##Added implicit objects _header_ , _headerValues_
, _cookie_ , and _initParam_ .

[#50561111_pgfId-8602]##Coercion rules have been improved.

[#50561111_pgfId-8603]##New operator âemptyâ has been added.

[#50561111_pgfId-8604]##âeqâ and âneâ have been added as alternatives to
â==â and â!=â

[#50561111_pgfId-8605]##â&&â, â||â, â!â have been added as alternatives
to âandâ, âorâ, and ânotâ.

'''''

[.footnoteNumber]# 1.# [#50561096_pgfId-1002046]##Since nested scoped
variables are always saved in page scope, no scope attribute is
associated with them.

[.footnoteNumber]# 2.# [#50561096_pgfId-1002058]##It is important to
note that the JSP specification says that "A name should refer to a
unique object at all points in the execution, that is all the different
scopes really should behave as a single name space." The JSP
specification also says that "A JSP container implementation may or may
not enforce this rule explicitly due to performance reasons". Because of
this, if a scoped variable with the same name as a nested variable
already exists in a scope other than 'page', exactly what happens to
that scoped variable depends on how the JSP container has been
implemented. To comply with the JSP specification, and to avoid
non-portable behavior, page authors should therefore avoid using the
same name in different scopes.

[.footnoteNumber]# 3.# [#50561100_pgfId-1008877]##The proper way to
process strings of tokens is via <c:forTokens> or via functions _split_
and _join_ .

[.footnoteNumber]# 4.# [#50561101_pgfId-1010105]##If the responsibility
was left to the consumer tag, this could lead to resource leaks (e.g.
connection left open, memory space for buffers) until garbage collection
is activated. This is because a consumer tag might not close the
_Reader_ , or because the page author might remove the consumer tag
while leaving inadvertantly the <c:import> tag in the page.

[.footnoteNumber]# 5.# [#50561101_pgfId-1010114]##This restriction could
eventually be lifted when the JSP spec supports the notion of page
events that actions could register to. On a _pageExit_ event, an
<c:import> tag would then simply release its resources if it had not
already been done, removing the requirement for nested visibility.

[.footnoteNumber]# 6.# [#50561101_pgfId-1013210]##It is however
important to note that using the output of <c:url> as the _url_
attribute value of <c:import> won't work for context relative URLs (URLs
that start with a '/'). Thatâs because in those cases <c:url> prepends
the context path to the URL value.

[.footnoteNumber]# 7.# [#50561102_pgfId-1014741]##A variant code may
also be specified, although rarely used.

[.footnoteNumber]# 8.# [#50561103_pgfId-1014130]##Four formatting
actions localize their data: <fmt:formatNumber>, <fmt:parseNumber>,
<fmt:formatDate>, <fmt:parseDate>.

[.footnoteNumber]# 9.# [#50561104_pgfId-1011746]##<sql:transaction> is
responsible for setting the data source in a transaction.

[.footnoteNumber]# 10.# [#50561105_pgfId-1013987]##Deprecated.

======= [.footnoteNumber]# 11.# [#50561105_pgfId-1013950]##Names beginning with the string "xml" are reserved by the XML specification.

[.footnoteNumber]# 12.# [#50561107_pgfId-1012279]##Deprecated.

======= [.footnoteNumber]# 13.# [#50561107_pgfId-1012432]##Names beginning with the string "xml" are reserved by the XML specification.

[.footnoteNumber]# 14.# [#50561109_pgfId-1007339]##Note that the support
in <c:forEach> for strings representing lists of coma separated values
has been deprecated. The proper way to process strings of tokens is via
<c:forTokens> or via functions _split_ and _join_ .
